<?php
if (!defined('MOTO_MEDIA_LIBRARY')) define('MOTO_MEDIA_LIBRARY', MOTO_ADMIN_DIR . '/' . MEDIA_LIBRARY); class MediaLibraryService { const RASTERIZE_FOLDER = 'images'; const RASTERIZE_FILE_PREFIX = 'raster_'; const RASTERIZE_FILE_EXT = 'png'; protected static $_media_library = null; public function getMediaLibraryItems() { $responseVO = new ResponseVO(); try { $list = MediaLibraryItemVO::findAll(MotoXML::create(MOTO_MEDIA_LIBRARY)); $result = array(); foreach($list as $itemVO) { if (!is_null($itemVO) && !is_null($itemVO->source) ) $result[] = $itemVO; } $responseVO->result = $result; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getMediaLibrary() { $responseVO = new ResponseVO(); try { $responseVO->result = new MediaLibraryVO(MotoXML::create(MOTO_MEDIA_LIBRARY)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveMediaLibraryItems($items, $exclude) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = MotoXML::create(MOTO_MEDIA_LIBRARY); foreach ($exclude as $item) { $itemVO = MediaLibraryItemVO::findBySource($item->source, $dom); if ($itemVO) $itemVO->remove(); } $library = new DOMElement('library'); $dom->replaceChild($library, MotoXML::findOneByXPath('//library', $dom)); MotoXML::putXML($dom, MOTO_MEDIA_LIBRARY); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveMediaLibrary(MediaLibraryVO $mediaLibraryVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = MotoXML::create(MOTO_MEDIA_LIBRARY); foreach ($mediaLibraryVO->items as $item) if (!is_null($item) && !is_null($item->source) && isset($item->deleted)) { if ($item->deleted) { $itemVO = MediaLibraryItemVO::findBySource($item->source, $dom); if ($itemVO) $itemVO->remove(); continue; } } $library = new DOMElement('library'); $dom->replaceChild($library, MotoXML::findOneByXPath('//library', $dom)); $mediaLibraryVO->saveDomElement($library); MotoXML::putXML($dom, MOTO_MEDIA_LIBRARY); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function removeMediaLibraryItems($itemName) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = MotoXML::create(MOTO_MEDIA_LIBRARY); $items = ($itemName == '*') ? MediaLibraryItemVO::findAll($dom) : array(MediaLibraryItemVO::findByName($itemName, $dom)); foreach ($items as $item) { $item->remove(); } MotoXML::putXML($dom, MOTO_MEDIA_LIBRARY); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getMediaLibraryItemInfo($source) { if (self::$_media_library == null) self::$_media_library = MotoXML::create(MOTO_MEDIA_LIBRARY); $responseVO = new ResponseVO(); try { $responseVO->result = MediaLibraryItemVO::findBySource($source, self::$_media_library); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } static public function getStaticMediaLibraryItemInfo($source) { if (self::$_media_library == null) self::$_media_library = MotoXML::create(MOTO_MEDIA_LIBRARY); $responseVO = new ResponseVO(); try { $responseVO->result = MediaLibraryItemVO::findBySource($source, self::$_media_library); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function scanMediaLibrary($fullMode = false) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { if (self::$_media_library == null) self::$_media_library = MotoXML::create(MOTO_MEDIA_LIBRARY); $list = array(); $list["image"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "images", array( "folder.exclude" => array("_preview"), "path.exclude" => array('^images\/modules', '^images\/previews'), "extension.include" => array("png", "jpg", "jpeg"), ) ); $list["image"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "media", array( "folder.exclude" => array("_preview"), "extension.include" => array("png", "jpg", "jpeg"), ), $list["image"] ); $list["audio"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "music", array( "extension.include" => array("mp3"), ) ); $list["audio"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "media", array( "extension.include" => array("mp3"), ), $list["audio"] ); $list["video"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "video", array( "folder.exclude" => array("_preview"), "extension.include" => array("flv", "swf"), ) ); $list["video"] = MotoUtil::scanDir(MOTO_ROOT_DIR . "/", "media", array( "folder.exclude" => array("_preview"), "extension.include" => array("flv", "swf"), ), $list["video"] ); $result = array(); $dom = new MotoXML(); foreach($list as $type => $sources) { foreach($sources as $source) { $itemVO = MediaLibraryItemVO::findBySource($source, self::$_media_library); if (is_null($itemVO) && filesize(MOTO_ROOT_DIR . '/' . $source)>0) { $itemVO = new MediaLibraryItemVO( MotoUtil::arrayToNode( array( "source" => $source, "type" => $type, "name" => basename($source), ), $dom->appendChild(new DOMElement('item')) ) ); if ($fullMode == false) $result[] = $itemVO; } if ($fullMode == true) $result[] = $itemVO; } } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function saveBitmapData($itemVO, $img) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { $dirname = self::RASTERIZE_FOLDER; $filePrefix = self::RASTERIZE_FILE_PREFIX; $ext = self::RASTERIZE_FILE_EXT; if ( is_null($itemVO->source) || $itemVO->source == '' || preg_match('/^\.?(jpg|png)$/i', $itemVO->source, $match)) { if (isset($match[1])) $ext = $match[1]; while(file_exists(MOTO_ROOT_DIR . '/' . $itemVO->source = $dirname . '/' . $filePrefix . uniqid() . '.' . $ext)) continue; } else { if ( preg_match('/^([^\/]+)/i', $itemVO->source, $match) ) { if (!is_dir(MOTO_ROOT_DIR . '/' . $match[1])) { throw new Exception('Can not find dir: ' . dirname(MOTO_ROOT_DIR . '/' . $match[1])); } } } MotoUtil::createDir( dirname(MOTO_ROOT_DIR . '/' . $itemVO->source) ); if (!is_dir(dirname(MOTO_ROOT_DIR . '/' . $itemVO->source))) throw new Exception('Can not create dir: ' . dirname(MOTO_ROOT_DIR . '/' . $itemVO->source)); if (file_exists(MOTO_ROOT_DIR . '/' . $itemVO->source)) @unlink(MOTO_ROOT_DIR . '/' . $itemVO->source); file_put_contents(MOTO_ROOT_DIR . '/' . $itemVO->source, $img); MotoUtil::fixFilePermission(MOTO_ROOT_DIR . '/' . $itemVO->source); if (!is_file(MOTO_ROOT_DIR . '/' . $itemVO->source)) throw new Exception('Can not save file: ' . MOTO_ROOT_DIR . '/' . $itemVO->source); if (is_null($itemVO->type) || $itemVO->type == '') $itemVO->type = 'image'; if (is_null($itemVO->name) || $itemVO->name == '') { $info = pathinfo($itemVO->source); $itemVO->name = $info['basename']; } $itemVO->size = filesize(MOTO_ROOT_DIR . '/' . $itemVO->source); if ($itemVO->thumbnail != '' && $itemVO->thumbnail != $itemVO->source && file_exists(MOTO_ROOT_DIR . '/' . $itemVO->thumbnail)) @unlink(MOTO_ROOT_DIR . '/' . $itemVO->thumbnail); $itemVO->thumbnail = $itemVO->source; if ( function_exists("getimagesize") ) { $size = getimagesize(MOTO_ROOT_DIR . '/' . $itemVO->source); if ($size) { $itemVO->parameters["width"] = $size[0]; $itemVO->parameters["height"] = $size[1]; if (defined("THUMBNAILS_ENABLED") && THUMBNAILS_ENABLED == "true") { $thumbnail = ''; if ($size[0] > THUMBNAIL_MAX_WIDTH || $size[1] > THUMBNAIL_MAX_HEIGHT) { try { $thumbnail = MotoImgUtil::makeAutoThumbnail($itemVO->source, true); } catch(Exception $e) { } } if ($thumbnail !== "" && $thumbnail !== false) $itemVO->thumbnail = $thumbnail; } } } $this->saveMediaLibraryItem($itemVO); $result = $itemVO; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function saveMediaLibraryItem(MediaLibraryItemVO $itemVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = MotoXML::create(MOTO_MEDIA_LIBRARY); $items = MotoXML::findOneByXPath('//items', $dom); if (is_null($items)) $items = MotoXML::findOneByXPath('//library', $dom); $itemNode = MotoXML::findOneByXPath(".//item[source='" . $itemVO->source . "']", $items); if (!is_null($itemNode)) { $itemVO->saveDomElement($itemNode); } else { $itemVO->saveDomElement($items->appendChild(new DOMElement('item'))); } MotoXML::putXML($dom, MOTO_MEDIA_LIBRARY); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function addExternalImage($source = '', $thumbnail = '', $name = '', $type = '') { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $result = null; try { $MediaLibraryVO = new MediaLibraryVO(); $params = array( 'source' => $source, 'thumbnail' => $thumbnail, 'name' => $name, 'type' => $type, ); $result = $MediaLibraryVO->addExternalImage($params); } catch (Exception $e) { $result = null; $responseVO->status->status = $e->getCode(); $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } }