<?php
 if (!defined("ASSETS_RESOURSE_PATH")) define("ASSETS_RESOURSE_PATH", MOTO_ROOT_DIR . '/xml/assets.xml'); class AssetsService { const SLOT = 'slot'; const MODULE = 'module'; const MEDIA = 'media'; public function preloadAsset(MotoAssetVO $assetVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { $dom = MotoXML::create(ASSETS_RESOURSE_PATH); $main = MotoXML::findOneByXPath('../assets', $dom); if (is_null($main)) { $main = new DOMElement('assets'); $dom->appendChild($main); } $save = false; $query = './*[.="' . $assetVO->url . '"'; if ($assetVO->type != '') $query .= ' and @type="' . $assetVO->type . '"'; if ($assetVO->typeId != '') $query .= ' and @typeId="' . $assetVO->typeId . '"'; $query .= ']'; $node = MotoXML::findOneByXPath($query, $main); if ($assetVO->preload) { if (is_null($node)) { $assetVO->saveDomElement($main->appendChild(new DOMElement('asset'))); $save = true; } } else { if (!is_null($node)) { $node->parentNode->removeChild($node); $save = true; } } if ($save) MotoXML::putXML($dom, ASSETS_RESOURSE_PATH); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public static function saveList($list, $type = '') { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->result = $result = null; try { $dom = MotoXML::create(ASSETS_RESOURSE_PATH); $main = MotoXML::findOneByXPath(".", $dom); if (is_null($main)) { $main = new DOMElement("assets"); $dom->appendChild($main); } $query = "./asset"; if ($type != '') $query .= "[@type='$type']"; $nodes = MotoXML::findByXPath($query, $main); if (!is_null($nodes)) { foreach($nodes as $node) { $main->removeChild($node); } } foreach($list as $item) { $asset = new DOMElement('asset'); $main->appendChild($asset); $asset->nodeValue = $item; $asset->setAttribute('type', $type); $asset->setAttribute('typeId', $type); } MotoXML::putXML($dom, ASSETS_RESOURSE_PATH); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public static function checkItem($url = '', $type = '', $typeId = '') { $result = false; if (DEMO_MODE === 'true') { return $result; } if ($url == '' && $type == '' && $typeId == '') return false; try { $dom = MotoXML::create(ASSETS_RESOURSE_PATH); $query = ''; if ($url != '') $query .= ".='$url'"; if ($type != '') { if ($query != '') $query .= ' and '; $query .= " @type='$type'"; } if ($typeId != '') { if ($query != '') $query .= ' and '; $query .= " @typeId='$typeId'"; } $query = './*['. $query . ']'; $node = MotoXML::findOneByXPath($query, $dom); if (!is_null($node)) $result = true; } catch (Exception $e) { $result = false; MotoLog::getInstance()->err(__CLASS__ . "." . __FUNCTION__ . ": " . $e->getMessage()); } return $result; } } 