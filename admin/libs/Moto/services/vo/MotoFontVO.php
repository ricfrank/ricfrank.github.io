<?php
 class MotoFontVO implements MotoDomObjectInterface { public $name; public $characters; public $file; public $enabled; public $isGoogle; private $_node = null; public $regular; public $italic; public $bold; public $boldItalic; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./file", $parent); if (!is_null($node)) $this->file = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./characters", $parent); if (!is_null($node)) $this->characters = (string) MotoUtil::trim($node->nodeValue); $this->enabled = (boolean) MotoUtil::toBoolean($parent->getAttribute('enabled')); $this->isGoogle = (boolean) MotoUtil::toBoolean($parent->getAttribute('isGoogle')); $this->regular = (boolean) MotoUtil::toBoolean($parent->getAttribute('regular')); $this->bold = (boolean) MotoUtil::toBoolean($parent->getAttribute('bold')); $this->italic = (boolean) MotoUtil::toBoolean($parent->getAttribute('italic')); $this->boldItalic = (boolean) MotoUtil::toBoolean($parent->getAttribute('boldItalic')); return $this; } public function saveDomElement(DOMNode $parent) { $font = new DOMElement('font'); $parent->parentNode->replaceChild($font, $parent); $font->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); $font->appendChild(new DOMElement('file', (string) $this->file)); $font->appendChild(new DOMElement('characters', (string) $this->characters)); $font->setAttribute('enabled', (string) MotoUtil::boolToString($this->enabled)); $font->setAttribute('isGoogle', (string) MotoUtil::boolToString($this->isGoogle)); $font->setAttribute('regular', (string) MotoUtil::boolToString($this->regular)); $font->setAttribute('bold', (string) MotoUtil::boolToString($this->bold)); $font->setAttribute('italic', (string) MotoUtil::boolToString($this->italic)); $font->setAttribute('boldItalic', (string) MotoUtil::boolToString($this->boldItalic)); $this->_node = $font; return $font; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } $fontFile = MOTO_ROOT_DIR . "/fonts/{$this->file}"; return unlink($fontFile); } public static function findByName($name, DOMNode $context) { return MotoXML::findOneByXPath(".//font[name='{$name}']", $context, get_class()); } public static function findBySource($source, DOMNode $context) { return MotoXML::findOneByXPath(".//font[file='{$source}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//font", $context, get_class()); } public static function findBySourceCharacters($source, $characters, DOMNode $context) { return MotoXML::findOneByXPath(".//font[file='{$source}' and characters='{$characters}']", $context, get_class()); } }