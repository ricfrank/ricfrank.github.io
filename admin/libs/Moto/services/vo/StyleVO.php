<?php
 class StyleVO implements MotoDomObjectInterface { public $backgroundFillType = "none"; public $backgroundFirstColor = 0; public $backgroundSecondColor = 0; public $backgroundGradientRotation = -90; public $borderLThickness = 0; public $borderRThickness = 0; public $borderTThickness = 0; public $borderBThickness = 0; public $borderTLRadius = 0; public $borderTRRadius = 0; public $borderBLRadius = 0; public $borderBRRadius = 0; public $borderColor = 0; public $paddingTop = 0; public $paddingRight = 0; public $paddingBottom = 0; public $paddingLeft = 0; public $backgroundImage; public $backgroundImageVerticalAlign = "top"; public $backgroundImageHorizontalAlign = "left"; public $backgroundImageRepeat = "no-repeat"; public $backgroundEnabled = true; public $borderEnabled = true; public $paddingEnabled = true; static protected $_browser = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { if ($parent) { if ($parent->hasAttribute('background')) { $backgroundNode = (string) $parent->getAttribute('background'); $background = explode(" ", $backgroundNode); $this->backgroundFillType = (string) $background[0]; $this->backgroundFirstColor = (string) $background[1]; $this->backgroundSecondColor = (string) $background[2]; $this->backgroundGradientRotation = (integer) $background[3]; $this->backgroundImage = (string) $background[4]; $this->backgroundImageHorizontalAlign = (string) $background[5]; $this->backgroundImageVerticalAlign = (string) $background[6]; $this->backgroundImageRepeat = (string) $background[7]; } if ($parent->hasAttribute('border')) { $borderNode = (string) $parent->getAttribute('border'); $border = explode(" ", $borderNode); $this->borderColor = (string) $border[0]; $this->borderTThickness = (integer) $border[1]; $this->borderRThickness = (integer) $border[2]; $this->borderBThickness = (integer) $border[3]; $this->borderLThickness = (integer) $border[4]; $this->borderTLRadius = (integer) $border[5]; $this->borderTRRadius = (integer) $border[6]; $this->borderBRRadius = (integer) $border[7]; $this->borderBLRadius = (integer) $border[8]; } if ($parent->hasAttribute('padding')) { $paddingNode = (string) $parent->getAttribute('padding'); $padding = explode(" ", $paddingNode); $this->paddingTop = (integer) $padding[0]; $this->paddingRight = (integer) $padding[1]; $this->paddingBottom = (integer) $padding[2]; $this->paddingLeft = (integer) $padding[3]; } if ($parent->hasAttribute('backgroundEnabled')) $this->backgroundEnabled = (boolean) MotoUtil::toBoolean($parent->getAttribute('backgroundEnabled')); if ($parent->hasAttribute('borderEnabled')) $this->borderEnabled = (boolean) MotoUtil::toBoolean($parent->getAttribute('borderEnabled')); if ($parent->hasAttribute('paddingEnabled')) $this->paddingEnabled = (boolean) MotoUtil::toBoolean($parent->getAttribute('paddingEnabled')); } return $this; } public function saveDomElement(DOMNode $parent) { $styleNode = $parent->appendChild(new DOMElement('style')); if ($this->backgroundFirstColor !== 0 || $this->backgroundSecondColor !== 0 || $this->backgroundImage != "") { $background = (string) $this->backgroundFillType . ' ' . (string) $this->decToAHex($this->backgroundFirstColor) . ' ' . (string) $this->decToAHex($this->backgroundSecondColor) . ' ' . (string) $this->backgroundGradientRotation . ' ' . (string) $this->backgroundImage . ' ' . (string) $this->backgroundImageHorizontalAlign . ' ' . (string) $this->backgroundImageVerticalAlign . ' ' . (string) $this->backgroundImageRepeat; $styleNode->setAttribute('background', $background); } $border = (string) $this->decToHex($this->borderColor) . ' ' . (integer) $this->borderTThickness . ' ' . (integer) $this->borderRThickness . ' ' . (integer) $this->borderBThickness . ' ' . (integer) $this->borderLThickness . ' ' . (integer) $this->borderTLRadius . ' ' . (integer) $this->borderTRRadius . ' ' . (integer) $this->borderBRRadius . ' ' . (integer) $this->borderBLRadius; $styleNode->setAttribute('border', $border); if ( ($this->paddingTop + $this->paddingRight + $this->paddingBottom + $this->paddingLeft) > 0) { $padding = (integer) $this->paddingTop . ' ' . (integer) $this->paddingRight . ' ' . (integer) $this->paddingBottom . ' ' . (integer) $this->paddingLeft; $styleNode->setAttribute('padding', $padding); } if ((string) MotoUtil::boolToString($this->backgroundEnabled) == 'false') $styleNode->setAttribute('backgroundEnabled', (string) MotoUtil::boolToString($this->backgroundEnabled)); if ((string) MotoUtil::boolToString($this->borderEnabled) == 'false') $styleNode->setAttribute('borderEnabled', (string) MotoUtil::boolToString($this->borderEnabled)); if ((string) MotoUtil::boolToString($this->paddingEnabled) == 'false') $styleNode->setAttribute('paddingEnabled', (string) MotoUtil::boolToString($this->paddingEnabled)); return $parent; } private function decToHex($dec) { return "0xFF" . strtoupper(substr("000000" . dechex($dec + 0), -6)); } private function decToAHex($dec) { return "0x" . strtoupper(substr("00000000" . dechex($dec + 0), -8)); } function explodeRGBA($rgba) { $data = array(); $rgba = preg_replace('/^(0x)/i', '', $rgba); if (preg_match('/^([0-9ABCDEF]{2})([0-9ABCDEF]{2})([0-9ABCDEF]{2})([0-9ABCDEF]{2})$/i', $rgba, $match)) { $match['r'] = hexdec($match[2]); $match['g'] = hexdec($match[3]); $match['b'] = hexdec($match[4]); $match['a'] = round( hexdec($match[1])*100/255 )/100; return $match; } return null; } public function getBackgroundColor($backgroundImage = '') { $styles = array(); switch($this->backgroundFillType) { case 'none': if ($backgroundImage != '') $styles[] = 'background:' . $backgroundImage . ';' ; break; case 'solid': $color = $this->explodeRGBA($this->backgroundFirstColor, true); if ($color != null) { $styles[] = 'background:' . $backgroundImage . ' rgb(' . $color['r'] . ',' . $color['g'] . ',' . $color['b'] . ');' ; $styles[] = 'background:' . $backgroundImage . ' rgba(' . $color['r'] . ',' . $color['g'] . ',' . $color['b'] . ',' . $color['a'] . ');' ; } break; } $style = implode("\n", $styles) . "\n"; return $style; } public function getBackgroundStyle() { $styles = array(); $style = ''; $backgroundImage = ''; if ($this->backgroundImage != '') { $backgroundImage = 'url(\'' . rtrim(MOTO_ROOT_URL, '/') . '/' . $this->backgroundImage . '\') ' . $this->backgroundImageRepeat . ' ' . $this->backgroundImageVerticalAlign . ' ' . $this->backgroundImageHorizontalAlign; } $isIE = self::isIE(); switch($this->backgroundFillType) { case 'none': if ($backgroundImage != '') $styles[] = 'background:' . $backgroundImage . ';' ; break; case 'solid': $color = $this->explodeRGBA($this->backgroundFirstColor, true); if ($color != null) { $styles[] = 'background: transparent;'; if ($color['a'] < 1) { if ($isIE && $isIE < 10) { $styles[] = "zoom:1;"; $styles[] = "filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr='#$color[1]$color[2]$color[3]$color[4]', endColorstr='#$color[1]$color[2]$color[3]$color[4]');"; } else { $styles[] = 'background-color: rgba(' . $color['r'] . ',' . $color['g'] . ',' . $color['b'] . ',' . $color['a'] . ') ;' ; } } else { $styles[] = 'background-color: rgb(' . $color['r'] . ',' . $color['g'] . ',' . $color['b'] . ');' ; } if ($this->backgroundImage != '') { $styles[] = 'background-image:' . 'url(\'' . rtrim(MOTO_ROOT_URL, '/') . '/' . $this->backgroundImage . '\');'; $styles[] = 'background-repeat:' . $this->backgroundImageRepeat . ';'; $styles[] = 'background-position:' . $this->backgroundImageVerticalAlign . ' ' . $this->backgroundImageHorizontalAlign . ';'; } } break; case 'gradient': $styles[] = 'background: transparent;'; $color1 = $this->explodeRGBA($this->backgroundFirstColor, true); $color2 = $this->explodeRGBA($this->backgroundSecondColor, true); if ($backgroundImage != '') $backgroundImage .= ','; $gradient = $this->backgroundGradientRotation . "deg, rgba($color1[r],$color1[g],$color1[b],$color1[a]), rgba($color2[r],$color2[g],$color2[b],$color2[a])"; if ($isIE) { if ($isIE < 10) { if ($this->backgroundImage != '') { $styles[] = 'background-image:' . 'url(\'' . rtrim(MOTO_ROOT_URL, '/') . '/' . $this->backgroundImage . '\');'; $styles[] = 'background-repeat:' . $this->backgroundImageRepeat . ';'; $styles[] = 'background-position:' . $this->backgroundImageVerticalAlign . ' ' . $this->backgroundImageHorizontalAlign . ';'; } $styles[] = "zoom:1;\n"; if ($this->backgroundGradientRotation == 0) { $styles[] = "filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr='#$color1[1]$color1[2]$color1[3]$color1[4]', endColorstr='#$color2[1]$color2[2]$color2[3]$color2[4]');"; } else { $styles[] = "filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#$color1[1]$color1[2]$color1[3]$color1[4]', endColorstr='#$color2[1]$color2[2]$color2[3]$color2[4]');"; } } else { $styles[] = "background: $backgroundImage -ms-linear-gradient( $gradient );"; $styles[] = "background: $backgroundImage linear-gradient( $gradient );"; } } else { $styles[] = "background: $backgroundImage -moz-linear-gradient( $gradient );"; if ($this->backgroundGradientRotation == 0) { $styles[] = "background: $backgroundImage -webkit-gradient(linear, left bottom, left top, from(rgb($color1[r],$color1[g],$color1[b])), to(rgb($color2[r],$color2[g],$color2[b])));"; } else { $styles[] = "background: $backgroundImage -webkit-gradient(linear, left top, left bottom, from(rgb($color1[r],$color1[g],$color1[b])), to(rgb($color2[r],$color2[g],$color2[b])));"; } $styles[] = "background: $backgroundImage -webkit-linear-gradient( $gradient );"; $styles[] = "background: $backgroundImage -o-linear-gradient( $gradient );"; $gradient = "to " . (($this->backgroundGradientRotation == 0) ? 'right' : 'bottom') . ", rgba($color1[r],$color1[g],$color1[b],$color1[a]), rgba($color2[r],$color2[g],$color2[b],$color2[a])"; $styles[] = "background: $backgroundImage linear-gradient( $gradient );"; } break; } $style = implode("\n", $styles) . "\n"; return $style; } public function getPaddingStyle() { $style = ''; if ($this->paddingEnabled && ($this->paddingTop + $this->paddingRight + $this->paddingBottom + $this->paddingLeft) > 0 ) { $style = 'padding: ' . $this->paddingTop . 'px ' . $this->paddingRight . 'px ' . $this->paddingBottom . 'px ' . $this->paddingLeft . 'px;' . "\n"; } return $style; } public function getBorderStyle() { $style = $this->getBorderRadiusStyle(); if ($this->borderEnabled && ($this->borderTThickness + $this->borderRThickness + $this->borderBThickness + $this->borderLThickness > 0 )) { $color = $this->explodeRGBA($this->borderColor); $style .= "border-top: {$this->borderTThickness}px solid rgb($color[r],$color[g],$color[b]);\n"; $style .= "border-right: {$this->borderRThickness}px solid rgb($color[r],$color[g],$color[b]);\n"; $style .= "border-bottom: {$this->borderBThickness}px solid rgb($color[r],$color[g],$color[b]);\n"; $style .= "border-left: {$this->borderLThickness}px solid rgb($color[r],$color[g],$color[b]);\n"; } return $style; } public function getBorderRadiusStyle() { $style = ''; if ($this->borderEnabled && ( $this->borderTLRadius + $this->borderTRRadius + $this->borderBRRadius + $this->borderBLRadius > 0 ) ) { $borderRadius = $this->borderTLRadius . 'px ' . $this->borderTRRadius . 'px ' . $this->borderBRRadius . 'px ' . $this->borderBLRadius . 'px;'; $style .= '-webkit-border-radius: ' . $borderRadius . "\n"; $style .= '-moz-border-radius: ' . $borderRadius . "\n"; $style .= '-ms-border-radius: ' . $borderRadius . "\n"; $style .= 'border-radius: ' . $borderRadius . "\n"; } return $style; } function __toString() { return $this->getCss(); } function getCss($options = array()) { $style = ''; $style .= $this->getBackgroundStyle(); $style .= $this->getPaddingStyle(); $style .= $this->getBorderStyle(); return $style; } static protected function _initBrowser($userAgent = null) { self::$_browser['msie'] = false; self::$_browser['version'] = 0; if (empty($userAgent)) $userAgent = (isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'none'); if (preg_match('/MSIE ([0-9\.]+)/i', $userAgent, $match)) { self::$_browser['msie'] = true; self::$_browser['version'] = $match[1] * 1; } } static function isIE() { if (self::$_browser == null) { self::_initBrowser(); } if (self::$_browser['msie']) return self::$_browser['version']; return 0; } }