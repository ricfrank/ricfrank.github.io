<?php
 class MediaLibraryVO implements MotoDomObjectInterface { const ERROR_BAD_REQUEST_FILENAME = 'ERROR_BAD_REQUEST_FILENAME'; const ERROR_BAD_REQUEST_URL = 'ERROR_BAD_REQUEST_URL'; const ERROR_BAD_REQUEST = 'ERROR_BAD_REQUEST'; public $parameters = array(); public $folders = array(); public $items = array(); private $_node = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $parametersNode = MotoXML::findOneByXPath('.', $parent); if (!is_null($parametersNode)) { $this->parameters = array(); foreach ($parametersNode->attributes as $attrName => $attrNode) { $this->parameters[$attrName] = MotoUtil::trim($attrNode->nodeValue); } } $post_max_size = MotoUtil::toBytes(ini_get('post_max_size')); $upload_max_filesize = MotoUtil::toBytes(ini_get('upload_max_filesize')); $min = $post_max_size; if ($post_max_size > $upload_max_filesize) $min = $upload_max_filesize; $this->parameters['maxUploadSize'] = $min; if (!is_null($node = MotoXML::findOneByXPath('./folders', $parent))) $this->folders = MotoFolderVO::findAll($node); $list = MediaLibraryItemVO::findAll($parent); $result = array(); foreach($list as $itemVO) { if (!is_null($itemVO) && !is_null($itemVO->source) ) $result[] = $itemVO; } $this->items = $result; return $this; } public function saveDomElement(DOMNode $parent) { foreach ($this->parameters as $key => $value) { if (is_bool($value)) $parent->setAttribute($key, MotoUtil::boolToString($value)); else $parent->setAttribute($key, $value); } $newFoldersNode = new DOMElement('folders'); $oldFoldersNode = MotoXML::findOneByXPath("./folders", $parent); if (!is_null($oldFoldersNode)) { $parent->replaceChild($newFoldersNode, $oldFoldersNode); } else { $parent->appendChild($newFoldersNode); } foreach ($this->folders as $folder) { $folder->saveDomElement($newFoldersNode->appendChild(new DOMElement('folder'))); } $newItemsNode = new DOMElement('items'); $oldItemsNode = MotoXML::findOneByXPath("./items", $parent); if (!is_null($oldItemsNode)) { $parent->replaceChild($newItemsNode, $oldItemsNode); } else { $parent->appendChild($newItemsNode); } $toPreload = array(); foreach ($this->items as $item) if (!is_null($item) && !is_null($item->source)) { if (isset($item->deleted) && $item->deleted) continue; $item->saveDomElement($newItemsNode->appendChild(new DOMElement('item'))); if (isset($item->preload) && $item->preload == true) $toPreload[] = $item->source; } AssetsService::saveList($toPreload, AssetsService::MEDIA); $this->_node = $parent; return $parent; } protected function _getInfo($filename) { $result = null; $map = array( 'image' => array( 'extension' => array('bmp', 'gif', 'jpeg', 'jpg', 'png'), 'folder' => 'images', ), 'video' => array( 'extension' => array('avi', 'flv', 'mov', 'mp4', 'mpeg', 'mpg', 'ogm', 'rm', 'wmv', 'swf'), 'folder' => 'video', ), 'music' => array( 'extension' => array('wav', 'wave', 'mp3', 'wma', 'ogg', 'mid', 'midi'), 'folder' => 'music', ), ); $info = pathinfo($filename); if ( !isset($info['filename']) || !isset($info['extension']) || empty($info['extension']) || empty ($info['filename']) ) { throw new Exception (self::ERROR_BAD_REQUEST_FILENAME, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); } $info['extension'] = strtolower($info['extension']); foreach($map as $type => $item) { if ( in_array($info['extension'], $item['extension']) ) { $result = $info; $result['folder'] = $item['folder']; $result['type'] = $type; if ( !preg_match("/^[a-z0-9_\-]+$/i", $info['filename']) ) { $result['basename'] = uniqid() . '.' . $info['extension']; } break; } } return $result; } function addExternalImage($params) { try { $user = new UserService(); if (!$user->isAuthenticated()->status->status) { throw new Exception('Access denied.', StatusEnum::ERROR_ACCESS_DENIED); } $objVO = new MediaLibraryItemVO(); $objVO->type = 'image'; $source = trim($params['source']); $thumbnail = trim($params['thumbnail']); $name = trim($params['name']); $type = strtolower(trim($params['type'])); if ($type == '') $type = 'external'; if ($thumbnail != '') { $url = $thumbnail; $filename = ''; $info = parse_url($url); if (!isset($info['scheme']) || !in_array(strtolower($info['scheme']), array('http', 'https')) || !isset($info['path']) || $info['path'] == '' ) throw new Exception (self::ERROR_BAD_REQUEST_URL, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $info = $this->_getInfo($info['path']); if ($info == null) throw new Exception (self::ERROR_BAD_REQUEST_FILENAME, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $destination = ( isset($info['folder']) ? $info['folder'] : 'media') . '/' . ( $type != '' ? $type . '/' : ''); $_filename = $filename = (isset($info['basename']) ? $info['basename'] : uniqid()); $filename = '_preview/' . $filename; if ($filename == '') throw new Exception (self::ERROR_BAD_REQUEST_FILENAME, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $destination .= $filename; if (file_exists(MOTO_ROOT_DIR . '/' . $destination)) { $info = pathinfo($destination); $destination = $info['dirname'] . '/' . $info['filename'] . '_' . uniqid() . '.' . $info['extension']; } $params = array(); $objVO->thumbnail = MotoUtil::downloadFile($url, $destination, $params); $objVO->name = $_filename; $objVO->modificationDate = substr(time() . '0000000', 0, 13); } if ($source != '') { $url = $source; $filename = ''; $info = parse_url($url); if (!isset($info['scheme']) || !in_array(strtolower($info['scheme']), array('http', 'https')) || !isset($info['path']) || $info['path'] == '' ) throw new Exception (self::ERROR_BAD_REQUEST_URL, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $info = $this->_getInfo($info['path']); if ($info == null) throw new Exception (self::ERROR_BAD_REQUEST_FILENAME, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $objVO->type = $info['type']; $destination = ( isset($info['folder']) ? $info['folder'] : 'media') . '/' . ( $type != '' ? $type . '/' : ''); $_filename = $filename = (isset($info['basename']) ? $info['basename'] : uniqid()); if ($filename == '') throw new Exception (self::ERROR_BAD_REQUEST_FILENAME, StatusEnum::ERROR_WHILE_WORKING_WITH_MEDIALIBRARY); $destination .= $filename; if (file_exists(MOTO_ROOT_DIR . '/' . $destination)) { $info = pathinfo($destination); $destination = $info['dirname'] . '/' . $info['filename'] . '_' . uniqid() . '.' . $info['extension']; } $params = array(); $objVO->source = MotoUtil::downloadFile($url, $destination, $params); $objVO->size = filesize(MOTO_ROOT_DIR . '/' . $objVO->source); $objVO->modificationDate = substr(time() . '0000000', 0, 13); if ($name == '') $name = $_filename; $objVO->name = $name; if ($objVO->type == 'image') { $objVO->parameters['width'] = $objVO->parameters['height'] = 0; if (function_exists('getimagesize')) { $size = getimagesize(MOTO_ROOT_DIR . '/' . $objVO->source); if ($size) { $objVO->parameters['width'] = $size[0]; $objVO->parameters['height'] = $size[1]; } } if ($objVO->thumbnail == '' || !file_exists(MOTO_ROOT_DIR . '/' . $objVO->thumbnail) || !is_file(MOTO_ROOT_DIR . '/' . $objVO->thumbnail)) { if (defined('THUMBNAILS_ENABLED') && THUMBNAILS_ENABLED == 'true' && ($objVO->parameters['width'] > THUMBNAIL_MAX_WIDTH || $objVO->parameters['height'] > THUMBNAIL_MAX_HEIGHT)) { try { $objVO->thumbnail = MotoImgUtil::makeAutoThumbnail($objVO->source); if ($objVO->thumbnail === false) $objVO->thumbnail = ''; } catch(Exception $e) { $objVO->thumbnail = ''; } } } } } } catch (Exception $e) { throw $e; } return $objVO; } }