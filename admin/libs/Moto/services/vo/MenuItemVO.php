<?php
 class MenuItemVO extends AbstractVO { public $id; public $parent; public $click; public $order; public $properties; protected $_node; protected $_childs = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->id = (integer) $parent->getAttribute('id'); $this->parent = (integer) $parent->getAttribute('parent'); $this->click = (string) $parent->getAttribute('click'); $this->order = (integer) $parent->getAttribute('order'); if (!is_null($node = MotoXML::findOneByXPath('.//properties', $parent))) { $this->properties = PropertyVO::findAll($node); } return $this; } public function saveDomElement(DOMNode $parent) { $this->_node = $parent; $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('parent', (integer) $this->parent); $parent->setAttribute('click', (string) $this->click); $parent->setAttribute('order', (integer) $this->order); $properties = $parent->appendChild(new DOMElement('properties')); foreach ($this->properties as $property) { $property->saveDomElement($properties->appendChild(new DOMElement('item'))); } return $parent; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//data/item[@id='{$id}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//data/item", $context, get_class()); } function childExists() { return ( $this->_childs != null); } function getChilds() { return $this->_childs; } function addChild(MenuItemVO $item) { if ($this->_childs == null) $this->_childs = array(); $this->_childs[] = $item; } function xxxinit(MenuTypeVO $menuType) { $properties = array(); $typeById = array(); $byName = array(); foreach($menuType->properties as $i => $property) { $typeById[$property->id] = $property; } foreach($this->properties as $i => $property) { $value = $property->parameters; $value['value'] = $property->value; $type = ( isset($typeById[$property->propertyType]) ? $typeById[$property->propertyType]->type : ''); switch($type) { case 'htmlText': $value['value'] = Moto_Html_Render_HtmlText::getInstance()->parse($value['value']); break; case 'plainText': $value['value'] = strip_tags( $value['value'] ); break; } if ($property->propertyType == $menuType->labelPropertyID) { $this->label = $value['value']; } $itemType = ( isset($typeById[$property->propertyType]) ? $typeById[$property->propertyType] : null); $keyName = $i; if ($itemType != null) { $keyName = ($itemType != null ? $itemType->keyName : $i); if ($itemType->type == 'color') $value['value'] = str_replace ('0x', '', $value['value']); } $properties[$keyName] = $value; } $this->properties = $properties; } }