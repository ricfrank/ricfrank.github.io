<?php
 class LoginFormVO implements MotoDomObjectInterface { public $properties = array(); public $loginFormType; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->loadProperties($parent); return $this; } public function saveDomElement(DOMNode $parent) { $propertiesNode = $parent->appendChild(new DOMElement('properties')); foreach ($this->properties as $item) { $item->saveDomElement($propertiesNode->appendChild(new DOMElement('item'))); } return $parent; } function getType() { if ( !isset($this->type) || $this->type == null) { if (!is_null($node = MotoXML::findOneByXPath('..//website/elements/loginForm', MotoXML::create(STRUCTURE_RESOURSE_PATH)))) $this->type = new LoginFormTypeVO($node); } return $this->type; } function loadProperties($parent) { $this->properties = PropertyVO::findAllByExpression( $parent, './properties/item'); if ( AbstractVO::getDefaultOption('jsEnabled', false) && $this->getType() != null) { $typeVO = $this->getType(); $typeById = $typeVO->getPropertiesMapById(); $this->properties = Moto_Html_Util::itemPropertiesFill($this->properties, $typeById); } } function getTemplate($name = 'main') { $type = $this->getType(); $template = ''; if ( $type != null && isset($type->htmlTemplates) ) { if ( isset($type->htmlTemplates[$name]) ) $template = $type->htmlTemplates[$name]; } return $template; } }