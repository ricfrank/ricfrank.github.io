<?php
 class ConfigurationVO implements MotoDomObjectInterface { public $name; public $value; public $description; private $_node = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->name = (string) $parent->getAttribute('name'); $this->value = (string) $parent->nodeValue; $this->description = (string) $parent->getAttribute('description'); return $this; } public function saveDomElement(DOMNode $parent) { $this->_node = $parent; $parent->setAttribute('name', (string) $this->name); $parent->setAttribute('description', (string) $this->description); $parent->appendChild($parent->ownerDocument->createCDATASection($this->value)); return $parent; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } public static function findByName($name, DOMNode $context) { return MotoXML::findOneByXPath(".//option[@name='{$name}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//option", $context, get_class()); } }