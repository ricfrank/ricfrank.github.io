<?php
 class ModuleTypeVO extends ObjectTypeVO { public $type; public $isContent; public $moduleTemplate; public $dataProviderType; public function loadDomElement(DOMNode $parent) { parent::loadDomElement($parent); $this->type = (string) $parent->getAttribute('type'); $this->dataProviderType = (string) $parent->getAttribute('dataProviderType'); $this->isContent = (boolean) MotoUtil::toBoolean($parent->getAttribute('isContent')); if ( self::getDefaultOption('ModuleTypeVO.loadTemplate', true) ) { $node = MotoXML::findOneByXPath('.//template', $parent); if (!is_null($node)) $this->moduleTemplate = new ModuleVO($node); } if ($this->external) $this->preload = AssetsService::checkItem($this->url, AssetsService::MODULE, $this->id); if ( self::getDefaultOption('jsEnabled', false)) { $this->_loadRequirements($parent); $this->loadExtraData($parent); } return $this; } public function saveDomElement(DOMNode $parent) { return $parent; } public function updateTemplate(DOMNode $parent, ModuleVO $moduleVO) { $newNode = new DOMElement('template'); $oldNode = MotoXML::findOneByXPath("./template", $parent); if (!is_null($oldNode)) { if ((boolean) MotoUtil::toBoolean($oldNode->getAttribute('resizable')) == false) { $width = ($oldNode->hasAttribute('width') ? $oldNode->getAttribute('width') : null); $height = ($oldNode->hasAttribute('height') ? $oldNode->getAttribute('height') : null); } $parent->replaceChild($newNode, $oldNode); if ((boolean) MotoUtil::toBoolean($newNode->getAttribute('resizable')) == false) { if ($width != null) $newNode->getAttribute('width', $width); if ($height != null) $newNode->getAttribute('height', $height); } } else { $parent->appendChild($newNode); } if (isset($moduleVO->parameters)) { if (isset($moduleVO->parameters["externalData"])) $moduleVO->parameters["externalData"] = "false"; if (isset($moduleVO->parameters["externalFile"])) $moduleVO->parameters["externalFile"] = ""; } $moduleVO->saveDomElement($newNode); $toRemove = array("id" , "holder" , "moduleType", "x", "y", "depth", "scaleX", "scaleY", "externalData", "externalFile" ); if (isset($toRemove)) foreach($toRemove as $attribute) $newNode->removeAttribute($attribute); $ids = MotoXML::findByXPath(".//*[@id>0]", $newNode); if (!is_null($ids)) { foreach($ids as $id) { $id->removeAttribute("id"); } } $datas = MotoXML::findByXPath(".//*[@isDataProvider='true']", $newNode); if (!is_null($datas)) { foreach($datas as $data) { $data->nodeValue = ""; } } $this->loadDomElement($parent); return $this; } public static function findById($id, DOMNode $context) { $typeVO = null; if ( self::getDefaultOption('TypeVO.factory', false) ) { $typeVO = parent::getTypeVOById($id, get_class()); } if ($typeVO == null) { $typeVO = MotoXML::findOneByXPath(".//module[@id='{$id}']", $context, get_class()); if ($typeVO != null) { parent::setTypeVO($typeVO); } } return $typeVO; } public static function findAll(DOMNode $context) { return MotoXML::findByXPath("./module", $context, get_class()); } static protected $_services = array(); protected function _getPhpLoader() { if (!isset(self::$_services[$this->id])) { $phpLoaderClass = $this->getExtraData('phpLoaderClass'); if ($phpLoaderClass == null) return null; if (!class_exists($phpLoaderClass, false)) { $phpLoaderFile = $this->getExtraData('phpLoaderFile'); if ($phpLoaderFile == null) return null; $phpLoaderFile = MOTO_ADMIN_DIR . '/' . $phpLoaderFile; if (!file_exists($phpLoaderFile)) return null; include_once $phpLoaderFile; } self::$_services[$this->id] = new $phpLoaderClass(); } return self::$_services[$this->id]; } function loadContent(ModuleVO $module, DOMNode $parent) { if ( !self::getDefaultOption('jsEnabled', false) ) return; $loader = $this->_getPhpLoader(); if ($loader != null && method_exists($loader, 'getModule')) { $module->data = $loader->getModule($module->data); $module = $this->_postInitModuleData($module); } } protected function _postInitModuleData($module) { if ( $module->data == null ) return $module; if ( isset($module->data->configuration) && $module->data->configuration != null) { if ( isset($module->data->configuration->options) ) { $options = $module->data->configuration->options; $module->data->configuration->options = array(); foreach($options as $option) { $module->data->configuration->options[ $option->id ] = $option->value; } } } $typeById = null; $defaultProperties = null; if ( isset($module->data->structure) && $module->data->structure != null ) { $properiesTemplate = array(); $typeById = array(); $defaultProperties = array(); if (isset($module->data->structure->template) && isset($module->data->structure->template->properties)) foreach ( $module->data->structure->template->properties as $property) { $properiesTemplate[$property->propertyType] = $property; } foreach($module->data->structure->properties as $i => $property) { $typeById[$property->id] = $property; if (isset($properiesTemplate[ $property->id ])) { $value = array_merge($properiesTemplate[ $property->id ]->parameters, array('value' => $properiesTemplate[ $property->id ]->value)); } else { $value = array_merge($property->parameters, array('value' => (isset($property->defaultValue) ? $property->defaultValue : ''))); } $keyName = ( (isset($property->keyName) && $property->keyName != null) ? $property->keyName : $i); $value = Moto_Html_Util::propertyRender($value, $property->type); $defaultProperties[$keyName] = $value; } } if ( isset($module->data->items) && $module->data->items != null && $typeById != null) { foreach ($module->data->items as &$item) { $item->properties = Moto_Html_Util::itemPropertiesFill($item->properties, $typeById, $defaultProperties); } } return $module; } protected function compareByOrder($a, $b) { if ($a->order == $b->order) return 0; return ($a->order < $b->order) ? -1 : 1; } } 