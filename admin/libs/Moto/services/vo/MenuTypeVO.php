<?php
 class MenuTypeVO extends AbstractVO { public $id; public $name; public $labelPropertyID; public $properties; public $itemTemplate; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->id = (integer) $parent->getAttribute('id'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $this->labelPropertyID =(integer) $parent->getAttribute('labelPropertyID'); $this->properties = PropertyTypeVO::findAll($parent); if ( self::getDefaultOption('MenuTypeVO.loadTemplate', true) ) $this->itemTemplate = new MenuItemVO(MotoXML::findOneByXPath('.//template', $parent)); return $this; } public function saveDomElement(DOMNode $parent) { return $parent; } public function updateTemplate(DOMNode $parent, MenuItemVO $menuItemVO) { $newNode = new DOMElement('template'); $oldNode = MotoXML::findOneByXPath("./template", $parent); if (!is_null($oldNode)) { $parent->replaceChild($newNode, $oldNode); } else { $parent->appendChild($newNode); } $menuItemVO->id = 0; $menuItemVO->parent = 0; $menuItemVO->order = 0; $menuItemVO->saveDomElement($newNode); $this->loadDomElement($parent); return $this; } public static function findById($id, DOMNode $context) { $typeVO = null; if ( self::getDefaultOption('TypeVO.factory', false) ) { $typeVO = parent::getTypeVOById($id, get_class()); } if ($typeVO == null) { $typeVO = MotoXML::findOneByXPath(".//menuType[@id='{$id}']", $context, get_class()); if ($typeVO != null) { parent::setTypeVO($typeVO); } } return $typeVO; } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//menuType", $context, get_class()); } }