<?php
 class MotoFilterVO implements MotoDomObjectInterface { public $filterType; public $order; public $properties; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->filterType = (string) $parent->getAttribute('filterType'); $this->order = (integer) $parent->getAttribute('order'); $this->properties = array(); $exclude = array_keys(get_object_vars($this)); foreach ($parent->attributes as $attrName => $attrNode) { if (in_array($attrName, $exclude)) continue; $this->properties[$attrName] = $attrNode->nodeValue; } return $this; } public function saveDomElement(DOMNode $parent) { $filter = $parent->appendChild(new DOMElement('filter')); $filter->setAttribute('filterType', (string) $this->filterType); $filter->setAttribute('order', (string) $this->order); foreach ($this->properties as $key => $value) { if (is_bool($value)) $filter->setAttribute($key, MotoUtil::boolToString($value)); else $filter->setAttribute($key, $value); } } public static function findAll(DOMNode $context) { return MotoXML::findByXPath("filters/filter", $context, get_class()); } } ?>