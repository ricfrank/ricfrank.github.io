<?php
 class ModuleVO extends MotoObjectVO { public static $doms = null; public $data; public $properties = array(); public $moduleTypeId; public $moduleType; protected $_moduleType; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { parent::loadDomElement($parent); if (self::$_structure == null) self::$_structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); $this->moduleTypeId = (integer) $parent->getAttribute('moduleType'); $this->_moduleType = ModuleTypeVO::findById($this->moduleTypeId, parent::$_structure); $loadType = !defined('IS_SMART_GETCONTENT'); $loadType = self::getDefaultOption('ModuleVO.loadType', $loadType); if ($loadType) { $this->moduleType = ( $this->_moduleType != null ? $this->_moduleType : ModuleTypeVO::findById($this->moduleTypeId, parent::$_structure) ); } if (!isset($this->parameters["externalData"]) || $this->parameters["externalData"] == "") { $this->parameters["externalData"] = "false"; $this->parameters["externalFile"] = ""; } if (!isset($this->parameters["externalFile"])) { $this->parameters["externalFile"] = ""; } $richContentModule = false; $richContentModuleExternal = false; if ($parent->nodeName == "template") { $this->loadProperties($parent, 'template'); if ($parent->parentNode->getAttribute('type') == SystemModuleTypesEnum::RICH_CONTENT) { $richContentModule = true; if ($parent->parentNode->getAttribute('externalData') == "true") $richContentModuleExternal = true; } } else { $this->loadProperties($parent, 'module'); if ($this->_moduleType && $this->_moduleType->type == SystemModuleTypesEnum::RICH_CONTENT) { $richContentModule = true; if ( isset($this->_moduleType->externalData) && $this->_moduleType->externalData == "true") { $richContentModuleExternal = true; } } } if (isset($this->parameters["externalData"]) && $this->parameters["externalData"] == "true") { $richContentModuleExternal = true; } if ($richContentModule) { if ($richContentModuleExternal) { $this->data = null; } else { $objectsHolder = new MotoObjectsHolderVO(); $_data = MotoXML::findOneByXPath('./data', $parent); if (!is_null($_data)) $this->data = $objectsHolder->loadDomElement($_data); } } else { if (isset($this->parameters["externalData"])) unset($this->parameters["externalData"]); if (isset($this->parameters["externalFile"])) unset($this->parameters["externalFile"]); $_data = MotoXML::findOneByXPath('./data', $parent); if (!is_null($_data)) $this->data = (string) $parent->ownerDocument->saveXML($_data); $this->loadContent($parent); } return $this; } function loadContent($parent) { $type = $this->getType(); if ($type == null) return; if ($type->type == 'dynamicMenu') return; $type->loadContent($this, $parent); } public function saveDomElement(DOMNode $parent) { parent::saveDomElement($parent); $richContentModuleExternal = false; foreach ($this->parameters as $key => $value) { if (is_bool($value)) $parent->setAttribute($key, MotoUtil::boolToString($value)); else $parent->setAttribute($key, $value); if ($key == "externalData" && $value == "true") $richContentModuleExternal = true; } $parent->setAttribute('moduleType', (string) isset($this->moduleType) ? $this->moduleType->id : null); if (!empty($this->data)) { if ($this->moduleType->type == SystemModuleTypesEnum::RICH_CONTENT) { if ($richContentModuleExternal) { $this->data = "<data/>"; $data = $parent->ownerDocument->createDocumentFragment(); $data->appendXML($this->data); } else { if ( isset($this->parameters["externalFile"]) && $this->parameters["externalFile"] != "" && file_exists(MOTO_ROOT_DIR . "/" . $this->parameters["externalFile"])) { @unlink(MOTO_ROOT_DIR . "/" . $this->parameters["externalFile"]); } $this->parameters["externalFile"] = ""; $parent->setAttribute("externalFile", ""); $data = $parent->appendChild(new DOMElement('data')); $this->data->saveDomElement($data); } } else { $data = $parent->ownerDocument->createDocumentFragment(); $data->appendXML($this->data); } $parent->appendChild($data); } $propertiesNode = $parent->appendChild(new DOMElement('properties')); foreach ($this->properties as $item) { $item->saveDomElement($propertiesNode->appendChild(new DOMElement('item'))); } return $parent; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//module[@id='{$id}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath("./module", $context, get_class()); } public static function findAllByExpression(DOMNode $context, $expression) { return MotoXML::findByXPath($expression, $context, get_class()); } public function remove() { parent::remove(); $toDel = array(); if (isset($this->parameters["externalData"]) && isset($this->parameters["externalFile"]) && $this->parameters["externalData"] == "true" && file_exists(MOTO_ROOT_DIR . "/" . $this->parameters["externalFile"])) { $extDom = new MotoXML(MOTO_ROOT_DIR . "/" . $this->parameters["externalFile"]); $this->deleteDataProviders($extDom); @unlink(MOTO_ROOT_DIR . "/" . $this->parameters["externalFile"]); } return true; } public function deleteDataProviders(MotoXML $miniDom, $mode = "auto") { $result = true; if (preg_match("/(auto|scan)/i", $mode)) $result = array(); $query = "//*[@isDataProvider='true']"; $nodes = MotoXML::findByXPath($query , $miniDom); if (!is_null($nodes)) { if (self::$doms == null) { $xmls = scandir(MOTO_ROOT_DIR . "/xml/modules"); self::$doms = array(); foreach($xmls as $xml) if (preg_match("/^richContent/i", $xml)) { self::$doms[md5(MOTO_ROOT_DIR . "/xml/modules/" . $xml)] = new MotoXML(MOTO_ROOT_DIR . "/xml/modules/" . $xml); } self::$doms[md5(CONTENT_RESOURSE_PATH)] = new MotoXML(CONTENT_RESOURSE_PATH); } foreach($nodes as $node) { $query = "//modules/module[@id!='" . $this->id . "']" . "//data[" . $node->nodeName . "='" . $node->nodeValue . "']" . "/" . $node->nodeName . "[@isDataProvider='true']"; $del = true; foreach(self::$doms as $md5 => $dom) { $no = MotoXML::findOneByXPath($query, $dom); if (!is_null($no)) $del = false; } if ($del) { if (preg_match("/(auto|scan)/i", $mode)) $result[] = $node->nodeValue; if (preg_match("/(auto|delete)/i", $mode) && $node->nodeValue != "" && file_exists(MOTO_ROOT_DIR . "/" . $node->nodeValue) ) @unlink(MOTO_ROOT_DIR . "/" . $node->nodeValue); } } } return $result; } function getType() { return ( $this->_moduleType != null ? $this->_moduleType : $this->moduleType); } function xxxinit() { if ($this->moduleType == null || $this->moduleType->properties == null) return; $this->jsFile = $this->getType()->getExtraData('jsFile'); $this->jsClass = $this->getType()->getExtraData('jsClass'); $this->cssFile = $this->getType()->getExtraData('cssFile'); } function loadProperties($parent, $template) { $this->properties = PropertyVO::findAllByExpression( $parent, './properties[parent::' . $template . ']/item'); if ( AbstractVO::getDefaultOption('jsEnabled', false) && $this->getType() != null) { $typeVO = $this->getType(); $defaults = $typeVO->getDefaultProperties(); $typeById = $typeVO->getPropertiesMapById(); $this->properties = Moto_Html_Util::itemPropertiesFill($this->properties, $typeById, $defaults); $this->_moduleType = $this->moduleType; $this->moduleType = null; $this->widgetType = 'module'; $this->type = $this->getType()->getExtraData('jsClass'); } } function getCssClass() { return ($this->getType() != null ? $this->getType()->getCssClass() : ''); } function getTemplate($name = 'main') { $template = ''; if ( $this->getType() != null && isset($this->getType()->htmlTemplates) ) { if ( isset($this->getType()->htmlTemplates[$name]) ) $template = $this->getType()->htmlTemplates[$name]; } return $template; } function getJsObj() { $obj = new stdClass(); $exclude = array( ); foreach ($this as $name => $value) { if (in_array($name, $exclude)) continue; $value = $this->$name; if (substr($name, 0, 1) != '_') { if (is_object($value) && method_exists($value, 'getJsObj')) { $value = $value->getJsObj(); } elseif (is_array($value)) { $_value = array(); foreach($value as $_k => $_v) { if (is_object($_v) && method_exists($_v, 'getJsObj')) { $_v= $_v->getJsObj(); } $_value[$_k] = $_v; } $value = $_value; } $obj->$name = $value; } } return $obj; } }