<?php
 class ModuleDataProviderVO implements MotoDomObjectInterface { public $id; public $name; public $sources; public $moduleType; public $modificationDate; public $dataProviderType; private $_node = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->id = (integer) $parent->getAttribute('id'); $this->dataProviderType = (string) $parent->getAttribute('dataProviderType'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) $node->nodeValue; $nodes = MotoXML::findByXPath("./sources/source", $parent); if (!is_null($nodes)) { $this->sources = array(); foreach($nodes as $node) { $source = new stdClass(); $source->value = $node->nodeValue; $source->id = $node->getAttribute('id'); $this->sources[] = $source; } } $this->moduleType = (integer) $parent->getAttribute('moduleType'); $this->modificationDate = (string) $parent->getAttribute('modificationDate'); return $this; } public function saveDomElement(DOMNode $parent) { $this->_node = $parent; $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('dataProviderType', (string) $this->dataProviderType); $parent->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); $sources = new DOMElement('sources'); $parent->appendChild($sources); $stamp = array(); if ($this->sources != null) { foreach($this->sources as $i => $source) if (isset($source->value) && isset($source->id)) { $sourceNode = new DOMElement('source'); $sources->appendChild($sourceNode); $sourceNode->appendChild($sources->ownerDocument->createCDATASection($source->value)); $sourceNode->setAttribute('id', $source->id); $stamp[$source->id] = $source->value; } } ksort($stamp); $sources->setAttribute('stamp', md5(serialize($stamp))); $parent->setAttribute('moduleType', (integer) $this->moduleType); if ($this->modificationDate*1 <= 0) $this->modificationDate = time(); $parent->setAttribute('modificationDate', (string) $this->modificationDate); return $parent; } public function updateDomElement(DOMNode $parent) { $newNode = new DOMElement('dataProvider'); $oldNode = MotoXML::findOneByXPath("./dataProvider[@id='{$this->id}']", $parent); if (!is_null($oldNode)) { $parent->replaceChild($newNode, $oldNode); } else { $parent->appendChild($newNode); } $this->_node = $parent; return $this->saveDomElement($newNode); } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//dataProvider[@id='{$id}']", $context, get_class()); } public static function findAllByModuleType($moduleType, DOMNode $context) { return MotoXML::findByXPath(".//dataProvider[@moduleType='{$moduleType}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//dataProvider", $context, get_class()); } }