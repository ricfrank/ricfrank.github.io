<?php
class AbstractModuleType { static protected $_instance = null; protected $_extraData = array(); protected $_extraList = array( 'phpRenderFile', 'phpRenderClass', 'phpLoaderFile', 'phpLoaderClass', 'jsFile', 'jsClass', 'cssFile', 'cssClass' ); static public function getInstance() { if (self::$_instance == null) { self::$_instance = new self(); } return self::$_instance; } public function load($filename) { if (!file_exists($filename)) throw new Exception('File ' . $filename . ' not found'); $dom = new MotoXML($filename); $this->loadDomElement($dom); } public function loadDomElement(DOMNode $parent) { $root = MotoXML::findOneByXPath('.', $parent); $nodes = MotoXML::findByXPath('./module', $root); if ($nodes != null) { foreach($nodes as $node) { $id = $node->getAttribute('id'); if (empty ($id)) continue; $this->_extraData[$id] = array( 'id' => $id, 'url' => $node->getAttribute('url'), ); $this->_extraData[$id]['jsClass'] = ucfirst($id); foreach($this->_extraList as $extra) { if ($node->hasAttribute($extra) && trim($node->getAttribute($extra)) != '' ) $this->_extraData[$id][$extra] = trim($node->getAttribute($extra)); } } } } function getExtraDataByType($type) { return (isset($this->_extraData[$type]) ? $this->_extraData[$type] : null); } public function saveDomElement(DOMNode $parent) { } }