<?php
 class MotoFolderVO implements MotoDomObjectInterface { public $name; public $id; public $order; public $parent; private $_node = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->id = (integer) $parent->getAttribute('id'); $this->order = (integer) $parent->getAttribute('order'); $this->parent = (integer) $parent->getAttribute('parent'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) $node->nodeValue; return $this; } public function saveDomElement(DOMNode $parent) { $parent->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('order', (integer) $this->order); $parent->setAttribute('parent', (integer) $this->parent); $this->_node = $parent; return $parent; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } } public static function findByName($name, DOMNode $context) { return MotoXML::findOneByXPath(".//folder[name='{$name}']", $context, get_class()); } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//folder[@id='{$id}']", $context, get_class()); } public static function findByParent($parent, DOMNode $context) { return MotoXML::findByXPath(".//folder[@parent='{$parent}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//folder", $context, get_class()); } public static function findMaxId(DOMNode $context) { $query = './/folder[not(@id <= preceding-sibling::folder/@id) and not(@id <= following-sibling::folder/@id)]'; $maxIdNode = MotoXML::findOneByXPath($query, $context); if ($maxIdNode != null) return $maxIdNode->getAttribute('id')*1; return 0; } } ?>