<?php
 class ContentHolderTypeVO extends AbstractVO { public $id; public $name; public $isDynamic; public $properties = array(); public $holderTemplate; protected $_propertiesDefault; protected $_propertiesMap; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->id = (integer) $parent->getAttribute('id'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $this->isDynamic = (boolean) MotoUtil::toBoolean($parent->getAttribute('isDynamic')); $this->properties = PropertyTypeVO::findAll($parent); if ( self::getDefaultOption('ContentHolderTypeVO.loadTemplate', true) ) { $node = MotoXML::findOneByXPath('.//template', $parent); if (!is_null($node)) $this->holderTemplate = new ContentHolderVO($node); } return $this; } public function saveDomElement(DOMNode $parent) { return $parent; } public static function findById($id, DOMNode $context) { $typeVO = null; if ( self::getDefaultOption('TypeVO.factory', false) ) { $typeVO = parent::getTypeVOById($id, get_class()); } if ($typeVO == null) { $typeVO = MotoXML::findOneByXPath(".//holder[@id='{$id}']", $context, get_class()); if ($typeVO != null) { parent::setTypeVO($typeVO); } } return $typeVO; } public static function findAll(DOMNode $context) { $result = MotoXML::findByXPath(".//holder", $context, get_class()); return $result; } function getDefaultProperties() { if ($this->_propertiesDefault == null) { $this->createPropertiesMap(); } return $this->_propertiesDefault; } function createPropertiesMap() { $keyTemplate = 'holderTemplate'; if ($this->_propertiesMap != null) { return; } $properiesTemplate = array(); foreach($this->{$keyTemplate}->properties as $property) { $properiesTemplate[$property->propertyType] = $property; } $this->{$keyTemplate}->properties = null; $this->_propertiesMap = array( 'byId' => array(), 'byName' => array(), ); $typeById = array(); $defaultProperties = array(); foreach($this->properties as $i => $property) { $typeById[$property->id] = $property; if (isset($properiesTemplate[ $property->id ])) { $value = array_merge($properiesTemplate[ $property->id ]->parameters, array('value' => $properiesTemplate[ $property->id ]->value)); } else { $value = array_merge($property->parameters, array('value' => (isset($property->defaultValue) ? $property->defaultValue : ''))); } $keyName = ( (isset($property->keyName) && $property->keyName != null) ? $property->keyName : $i); $value = Moto_Html_Util::propertyRender($value, $property->type); $defaultProperties[$keyName] = $value; } $this->_propertiesMap['byId'] = $typeById; $this->_propertiesDefault = $defaultProperties; } function getPropertiesMapById() { if ($this->_propertiesMap == null) { $this->createPropertiesMap(); } return $this->_propertiesMap['byId']; } }