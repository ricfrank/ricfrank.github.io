<?php
 class PropertyVO implements MotoDomObjectInterface { public $propertyType; public $value; public $parameters = array(); public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->propertyType = (integer) $parent->getAttribute('propertyType'); $this->value = (string) $parent->nodeValue; $this->parameters = array(); $exclude = array_keys(get_object_vars($this)); foreach ($parent->attributes as $attrName => $attrNode) { if (in_array($attrName, $exclude)) continue; $this->parameters[$attrName] = MotoUtil::trim($attrNode->nodeValue); } return $this; } public function saveDomElement(DOMNode $parent) { $parent->setAttribute('propertyType', (integer) $this->propertyType); $parent->appendChild($parent->ownerDocument->createCDATASection((string) $this->value)); foreach ($this->parameters as $key => $value) { if ( ($key == 'antiAliasType' && $value == 'normal') || ($key == 'backgroundColor' && $value == '0x565656') ) continue; if (is_bool($value)) $parent->setAttribute($key, MotoUtil::boolToString($value)); else $parent->setAttribute($key, $value); } return $parent; } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//item", $context, get_class()); } public static function findAllByExpression(DOMNode $context, $expression) { return MotoXML::findByXPath($expression, $context, get_class()); } function toArray() { $data = array( 'typeId' => $this->propertyType, 'value' => $this->value, 'parameters' => $this->parameters, ); return $data; } }