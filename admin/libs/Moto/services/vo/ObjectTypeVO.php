<?php
 class ObjectTypeVO extends AbstractVO { public $id; public $name; public $librarySymbolLinkage; public $resizable; public $properties; public $locked; public $minWidth; public $minHeight; public $maxWidth; public $maxHeight; public $url; public $external; public $preload; public $setSizeOnMouseUp; public $applicationDomain; public $enabled = true; public $icon; public $category; protected $_extra = array(); protected $_propertiesMap = null; protected $_propertiesDefault = null; protected $_requirements = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); if (parent::getDefaultOption('TypeVO.factory', false)) parent::setTypeVO($this); } } public function loadDomElement(DOMNode $parent) { $this->id = (integer) $parent->getAttribute('id'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $this->librarySymbolLinkage = (string) $parent->getAttribute('librarySymbolLinkage'); $this->resizable = (boolean) MotoUtil::toBoolean($parent->getAttribute('resizable')); $this->properties = PropertyTypeVO::findAll($parent); $this->locked = (boolean) MotoUtil::toBoolean($parent->getAttribute('locked')); $this->minWidth = (integer) $parent->getAttribute('minWidth'); $this->minHeight = (integer) $parent->getAttribute('minHeight'); $this->maxWidth = (integer) $parent->getAttribute('maxWidth'); $this->maxHeight = (integer) $parent->getAttribute('maxHeight'); $this->url = (string) $parent->getAttribute('url'); $this->external = (boolean) MotoUtil::toBoolean($parent->getAttribute('external')); $this->setSizeOnMouseUp = (boolean) MotoUtil::toBoolean($parent->getAttribute('setSizeOnMouseUp')); $this->applicationDomain = (string) $parent->getAttribute('applicationDomain'); $this->category = (string) $parent->getAttribute('category'); $this->icon = (string) $parent->getAttribute('icon'); if ($parent->hasAttribute('enabled')) $this->enabled = (boolean) MotoUtil::toBoolean($parent->getAttribute('enabled')); if (self::getDefaultOption(get_class($this) . '.loadHtmlTemplates', false)) { $templates = array( 'main' => '<div id="{%id%}" class="{%class%}" style="{%style%}">{%content%}</div>' ); $node = MotoXML::findOneByXPath('./htmlTemplates', $parent); if ($node != null) { $nodes = MotoXML::findByXPath('./item', $node); if ($nodes != null) { foreach($nodes as $node) { $name = ($node->hasAttribute('name') ? $node->getAttribute('name') : 'main'); $templates[$name] = $node->nodeValue; } } } $this->htmlTemplates = $templates; } } function loadExtraData(DOMNode $parent) { $extraList = array( 'phpRenderFile', 'phpRenderClass', 'phpLoaderFile', 'phpLoaderClass', 'jsFile', 'jsClass', 'cssFile', 'cssClass' ); $extraData = null; if (isset($this->type) && !empty ($this->type)) { $extraData = AbstractModuleType::getInstance()->getExtraDataByType($this->type); } if ($extraData == null) $extraData = array(); $icount = count($extraList); for($i = 0; $i < $icount; $i++) { if ($parent->hasAttribute( $extraList[$i] ) && trim($parent->getAttribute( $extraList[$i] )) != '') $extraData[$extraList[$i]] = trim($parent->getAttribute( $extraList[$i] )); } $this->_extra = $extraData; } function setExtraData($name, $value) { if ($value != '') $this->_extra[$name] = $value; return $this; } function removeExtraData($name) { if ( isset($this->_extra[$name]) ) unset($this->_extra[$name]); return $this; } function getExtraData($name, $default = '') { return ( isset($this->_extra[$name]) ? $this->_extra[$name] : $default); } public function saveDomElement(DOMNode $parent) { return $parent; } function createPropertiesMap() { $keyTemplate = 'slotTemplate'; if (get_class($this) == 'ModuleTypeVO') $keyTemplate = 'moduleTemplate'; if ($this->_propertiesMap != null || $this->$keyTemplate == null) { return; } $properiesTemplate = array(); foreach($this->{$keyTemplate}->properties as $property) { $properiesTemplate[$property->propertyType] = $property; } $this->{$keyTemplate}->properties = null; $this->_propertiesMap = array( 'byId' => array(), 'byName' => array(), ); $typeById = array(); $defaultProperties = array(); foreach($this->properties as $i => $property) { $typeById[$property->id] = $property; if (isset($properiesTemplate[ $property->id ])) { $value = array_merge($properiesTemplate[ $property->id ]->parameters, array('value' => $properiesTemplate[ $property->id ]->value)); } else { $value = array_merge($property->parameters, array('value' => (isset($property->defaultValue) ? $property->defaultValue : ''))); } $keyName = ( (isset($property->keyName) && $property->keyName != null) ? $property->keyName : $i); $value = Moto_Html_Util::propertyRender($value, $property->type); $defaultProperties[$keyName] = $value; } $this->_propertiesMap['byId'] = $typeById; $this->_propertiesDefault = $defaultProperties; } function getPropertiesMapById() { if ($this->_propertiesMap == null) { $this->createPropertiesMap(); } return $this->_propertiesMap['byId']; } function getPropertyById($id) { if ($this->_propertiesMap == null) { $this->createPropertiesMap(); } return (isset($this->_propertiesMap['byId'][$id]) ? $this->_propertiesMap['byId'][$id] : null); } function getDefaultProperties() { if ($this->_propertiesDefault == null) { $this->createPropertiesMap(); } return $this->_propertiesDefault; } function getPhpRender() { $class = $this->getExtraData('phpRenderClass'); $file = $this->getExtraData('phpRenderFile'); $method = 'render'; if ($file != '' && $class != '') { if (preg_match('/^([^\.]+)\.([^\.]+)$/i', $class, $m)) { $class = $m[1]; $method = $m[2]; } } if (empty($class)) { $class = 'Moto_Html_Render_' . get_class($this); if (preg_match('/^(.*)TypeVO$/i', get_class($this), $m)) $class = 'Moto_Html_Render_' . $m[1]; $class = 'Moto_Html_Render_Widget'; } $method = 'proccess'; $result = array( 'file' => $file, 'class' => $class, 'method' => $method, ); return $result; } function getCssClass() { $cssPref = 'mjs-'; $cssClass = $cssPref . 'widget '; if ($this->getExtraData('cssClass') != '') $cssClass .= $this->getExtraData('cssClass'); else $cssClass .= (isset($this->type) && $this->type != null ? ' ' . $cssPref . 'widget-' . $this->type : ''); $cssClass = trim($cssClass); return $cssClass; } function _loadRequirements($parent) { $nodes = MotoXML::findByXPath('./requirements/item', $parent); if ($nodes == null) return; $this->_requirements = array( '_all' => array(), ); foreach($nodes as $node) { $item = array( 'type' => $node->getAttribute('type'), 'file' => trim($node->nodeValue), 'defer' => MotoUtil::toBoolean($node->getAttribute('defer')), ); $this->_requirements['_all'][] = $item; if (!isset($this->_requirements[$item['type']])) $this->_requirements[$item['type']] = array(); $this->_requirements[$item['type']][] = $item; Moto_Html_HelpRender::addRequirements($item); } } function getRequirements($type) { $type = strtolower($type); if ($type == null) return $this->_requirements; return (isset($this->_requirements[$type]) ? $this->_requirements[$type] : null); } }