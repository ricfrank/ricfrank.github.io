<?php
 class MotoObjectsHolderVO extends AbstractVO { public $objects = array(); public $slots = array(); public $modules = array(); public $holders = array(); private $_node = null; static protected $_fullVO = true; protected static $_structure = null; protected $_contentLoaded; public function __construct(DOMNode $parent = null) { if (self::$_structure == null) self::$_structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; if (self::getDefaultOption(get_class($this) . '.loaderElements', true)) { $this->loadContentElements(); } return $this; } public function loadContentElements() { if ($this->_node == null) return false; if ($this->_contentLoaded) return true; $this->_contentLoaded = true; if (!is_null($node = MotoXML::findOneByXPath("./objects", $this->_node))) $this->objects = ObjectVO::findAll($node); if (!is_null($node = MotoXML::findOneByXPath("./slots", $this->_node))) $this->slots = SlotVO::findAll($node); if (!is_null($node = MotoXML::findOneByXPath("./modules", $this->_node))) $this->modules = ModuleVO::findAll($node); if (!is_null($node = MotoXML::findOneByXPath("./contentHolders", $this->_node))) $this->holders = ContentHolderVO::findAll($node); return true; } public function saveDomElement(DOMNode $parent) { $result = MotoXML::findOneByXPath("./objects", $parent); if (!is_null($result)) { $parent->removeChild($result); } $result = MotoXML::findOneByXPath("./slots", $parent); if (!is_null($result)) { $parent->removeChild($result); } $result = MotoXML::findOneByXPath("./modules", $parent); if (!is_null($result)) { $parent->removeChild($result); } $result = MotoXML::findOneByXPath("./contentHolders", $parent); if (!is_null($result)) { $parent->removeChild($result); } $objectsNode = $parent->appendChild(new DOMElement('objects')); foreach ($this->objects as $object) { $object->saveDomElement($objectsNode->appendChild(new DOMElement('object'))); } $slotsNode = $parent->appendChild(new DOMElement('slots')); foreach ($this->slots as $slot) { $slot->saveDomElement($slotsNode->appendChild(new DOMElement('slot'))); } $modulesNode = $parent->appendChild(new DOMElement('modules')); foreach ($this->modules as $module) { $module->saveDomElement($modulesNode->appendChild(new DOMElement('module'))); } $holdersNode = $parent->appendChild(new DOMElement('contentHolders')); foreach ($this->holders as $holder) { $holder->saveDomElement($holdersNode->appendChild(new DOMElement('holder'))); } $this->_node = $parent; return $parent; } public function remove() { if (isset($this->modules)) { foreach($this->modules as $moduleVO) { $moduleVO->remove(); } } if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } static function fullVO($mode) { self::$_fullVO = $mode; } function getNode() { return $this->_node; } }