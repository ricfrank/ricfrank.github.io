<?php
if (!defined('MOTO_WIDGETS_DIR') && defined('MOTO_ROOT_DIR')) define('MOTO_WIDGETS_DIR', MOTO_ROOT_DIR . '/widgets/'); class WidgetVO implements MotoDomObjectInterface { public $name; public $description; public $icon; public $version; public $build; public $minCompatibleVersion; public $authorName; public $authorLink; public $authorOrganization; public $type; public $uid; public $nameSpace; public $installed = false; public $compatible; public $category; public $enabled = false; public $updateAvailable; protected $activate; public $typeVOs = array(); public $customModuleVOs = array(); protected $_structure = ''; protected $_module = ''; protected $_menus = ''; protected $_install; protected $_uninstall; protected $_actions = array(); protected $_types = array(); public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->type = $parent->getAttribute('type'); $this->uid = $parent->getAttribute('uid'); $this->nameSpace = $parent->getAttribute('nameSpace'); $nodes = array('name', 'description', 'icon', 'version', 'minCompatibleVersion', 'category'); foreach($nodes as $nodename) { $node = MotoXML::findOneByXPath('./' . $nodename, $parent); if (!is_null($node)) $this->$nodename = (string) MotoUtil::trim($node->nodeValue); } $node = MotoXML::findOneByXPath('./build', $parent); if (!is_null($node)) $this->build = (integer) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath('./author/name', $parent); if (!is_null($node)) $this->authorName = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath('./author/link', $parent); if (!is_null($node)) $this->authorLink = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath('./author/organization', $parent); if (!is_null($node)) $this->authorOrganization = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath('./structure', $parent); if (!is_null($node)) { $this->_structure = $parent->ownerDocument->saveXML($node); } $node = MotoXML::findOneByXPath('./modules', $parent); if (!is_null($node)) { $this->_module = $parent->ownerDocument->saveXML($node); } $node = MotoXML::findOneByXPath('./menus', $parent); if (!is_null($node)) { $this->_menus = $parent->ownerDocument->saveXML($node); } $node = MotoXML::findOneByXPath('./install', $parent); if (!is_null($node)) { $this->_install = $node->nodeValue; } $node = MotoXML::findOneByXPath('./uninstall', $parent); if (!is_null($node)) { $this->_uninstall = $node->nodeValue; } return $this; } function renderRefNames($data) { $data['uid'] = $this->uid; $data['nameSpace'] = $this->nameSpace; $this->icon = $this->renderTemplate($this->icon, $data); $this->_menus = $this->renderTemplate($this->_menus, $data); $this->_module = $this->renderTemplate($this->_module, $data); $this->_structure = $this->renderTemplate($this->_structure, $data); $this->_install = $this->renderTemplate($this->_install, $data); $this->_uninstall = $this->renderTemplate($this->_uninstall, $data); } function createModulesFromXML() { $result = false; if ($this->_module != '') { $moduleDom = new MotoXML(); $moduleDom->loadXML($this->_module); $root = MotoXML::findOneByXPath('.', $moduleDom); $query = './module'; $nodes = MotoXML::findByXPath($query, $root); if (!is_null($nodes)) { $this->customModuleVOs = array(); foreach($nodes as $node) { $vo = new CustomModuleVO($node); $this->customModuleVOs[] = $vo; $result = true; } } } return $result; } function getData($source) { if (!isset($this->$source)) return ''; return $this->$source; } function setData($source, $value) { if (isset($this->$source)) $this->$source = $value; } public function saveDomElement(DOMNode $parent) { return $parent; } public function reload() { $filename = rtrim(MOTO_WIDGETS_DIR, '/') . '/' . $this->nameSpace . '/' . $this->uid . '/widget.xml'; if (!file_exists($filename)) { throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); } $dom = MotoXML::create($filename, MotoXML::NO_CACHE); $root = MotoXML::findOneByXPath('.', $dom); if (!is_null($root)) { $this->loadDomElement($root); } else return false; return true; } public function isFilled() { $result = true; $required = array('uid', 'type', 'nameSpace', 'build'); foreach($required as $key) { $result = $result && (isset($this->$key) && $this->$key != ''); } return $result; } public function install() { $filename = MOTO_WIDGETS_DIR . '/' . $this->nameSpace . '/' . $this->uid . '/install.php'; if (file_exists($filename)) include($filename); if (!isset($this->_actions['install'])) { } return true; } public function unInstall() { $filename = MOTO_WIDGETS_DIR . '/' . $this->nameSpace . '/' . $this->uid . '/uninstall.php'; if (file_exists($filename)) include($filename); if (!isset($this->_actions['uninstall'])) { } return true; } protected function renderTemplate($tmpl, $data) { if (!is_array($data)) return $tmpl; $vars = explode(',', '{' . implode('},{', array_keys($data)) . '}'); $values = array_values($data); return str_replace($vars, $values, $tmpl); } } 