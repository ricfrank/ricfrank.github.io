<?php
 class AbstractVO implements MotoDomObjectInterface { static protected $_options = array(); static protected $_defaultValues = array(); static protected $_typeVOcontainer = array(); protected static $_structure = null; public function loadDomElement(DOMNode $parent) { } public function saveDomElement(DOMNode $parent) { } static function getTypeVOById($id, $section, $default = null) { return ( isset(self::$_typeVOcontainer[$section][$id]) ? self::$_typeVOcontainer[$section][$id] : $default ); } static function getAllTypeVO() { return self::$_typeVOcontainer; } static function setTypeVO($typeVO) { $section = get_class($typeVO); if (!isset(self::$_typeVOcontainer[$section])) self::$_typeVOcontainer[$section] = array(); self::$_typeVOcontainer[$section][$typeVO->id] = $typeVO; } static function setDefaultOptions($options) { foreach($options as $name => $value) self::$_options[$name] = $value; } static function setDefaultOption($name, $value) { self::$_options[$name] = $value; } static function getDefaultOption($name, $value = null) { return ( isset(self::$_options[$name]) ? self::$_options[$name] : $value ); } static function setDefaultValues($values) { foreach($values as $name => $value) self::$_defaultValues[$name] = $value; } static function getDefaultValue($name, $value = null) { return ( isset(self::$_defaultValues[$name]) ? self::$_defaultValues[$name] : $value ); } function getJsObj() { $obj = new stdClass(); foreach ($this as $name => $value) { if (substr($name, 0, 1) != '_') { if (is_object($value) && method_exists($value, 'getJsObj')) { $value = $value->getJsObj(); } elseif (is_array($value)) { $_value = array(); foreach($value as $_k => $_v) { if (is_object($_v) && method_exists($_v, 'getJsObj')) { $_v= $_v->getJsObj(); } $_value[$_k] = $_v; } $value = $_value; } $obj->$name = $value; } } return $obj; } }