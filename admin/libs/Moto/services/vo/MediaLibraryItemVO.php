<?php
 class MediaLibraryItemVO implements MotoDomObjectInterface { private static $MAP_TYPE = array( "image" => array( "width" => 0, "height" => 0 ), "music" => array( "album" => "", "artist" => "", "length" => 0, ), "video" => array( "length" => 0, ), ); private static $_autoMakeThumbnail = true; public $name; public $type; public $source; private $_node = null; public $size; public $alt = ""; public $title = ""; public $parameters = array(); public $thumbnail = ""; public $parent = 0; public $modificationDate = '0'; public $metatags = ''; public $order; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->parent = (integer) $parent->getAttribute('parent'); $this->modificationDate = (string) $parent->getAttribute('modificationDate'); if (is_null($this->modificationDate) || $this->modificationDate * 1 < 0 ) $this->modificationDate = substr(filemtime(MOTO_ROOT_DIR . '/' . $this->source) . '0000000', 0, 13); if ($parent->hasAttribute('type')) $this->type = (string) MotoUtil::trim($parent->getAttribute('type')); else $this->type = (string) MotoUtil::trim($parent->getElementsByTagName('type')->item(0)->nodeValue); if ($parent->hasAttribute('size')) $this->size = (integer) MotoUtil::trim($parent->getAttribute('size')); elseif (isset($parent->getElementsByTagName('size')->item(0)->nodeValue)) $this->size = (integer) $parent->getElementsByTagName('size')->item(0)->nodeValue; else $this->size = 0; $this->order = (integer) $parent->getAttribute('order'); $this->name = (string) MotoUtil::trim($parent->getElementsByTagName('name')->item(0)->nodeValue); $this->source = (string) MotoUtil::trim($parent->getElementsByTagName('source')->item(0)->nodeValue); if (isset($parent->getElementsByTagName('metatags')->item(0)->nodeValue)) $this->metatags = (string) MotoUtil::trim($parent->getElementsByTagName('metatags')->item(0)->nodeValue); if (isset($parent->getElementsByTagName('alt')->item(0)->nodeValue)) $this->alt = (string) MotoUtil::trim($parent->getElementsByTagName('alt')->item(0)->nodeValue); if (isset($parent->getElementsByTagName('title')->item(0)->nodeValue)) $this->title = (string) MotoUtil::trim($parent->getElementsByTagName('title')->item(0)->nodeValue); if (isset($parent->getElementsByTagName('thumbnail')->item(0)->nodeValue)) $this->thumbnail = (string) MotoUtil::trim($parent->getElementsByTagName('thumbnail')->item(0)->nodeValue); $node = MotoXML::findOneByXPath("./parameters", $parent); if (!is_null($node)) { $this->parameters = MotoUtil::nodeToArray($node); } if ($this->type != 'youtube') { if (!is_file(MOTO_ROOT_DIR . '/' . $this->source)) { return new self(); } if (isset(self::$MAP_TYPE[$this->type])) { foreach(self::$MAP_TYPE[$this->type] as $key => $value) { if (!isset($this->parameters[$key])) $this->parameters[$key] = $value; } } if ($this->size == 0 && file_exists(MOTO_ROOT_DIR . '/' . $this->source)) { $this->size = filesize(MOTO_ROOT_DIR . '/' . $this->source); } if ($this->type == "image" && $this->size > 0 && ($this->thumbnail == "" || $this->thumbnail == $this->source || !file_exists(MOTO_ROOT_DIR . '/' . $this->thumbnail)) && file_exists(MOTO_ROOT_DIR . '/' . $this->source)) { if (function_exists("getimagesize") && ($this->parameters["width"]*1 <= 0 || $this->parameters["height"]*1 == 0)) { $size = getimagesize(MOTO_ROOT_DIR . '/' . $this->source); if ($size) { $this->parameters["width"] = $size[0]; $this->parameters["height"] = $size[1]; } } if (self::$_autoMakeThumbnail && defined("THUMBNAILS_ENABLED") && THUMBNAILS_ENABLED == "true" && ($this->parameters["width"] > THUMBNAIL_MAX_WIDTH || $this->parameters["height"] > THUMBNAIL_MAX_HEIGHT)) { try { $this->thumbnail = MotoImgUtil::makeAutoThumbnail($this->source); } catch(Exception $e) { $this->thumbnail = ''; if ($e->getCode() == MotoImgUtil::E_SERVER_TIMEOUT_CODE) self::$_autoMakeThumbnail = false; } } } if ($this->thumbnail == "" || $this->thumbnail === false) $this->thumbnail = $this->source; } return $this; } public function saveDomElement(DOMNode $parent) { if ($this->type == "image" && !is_null($this->source) && ( $this->size == 0 || !isset($this->parameters["width"]) || !isset($this->parameters["height"]) || $this->parameters["width"]*1 < 1 || $this->parameters["height"]*1 < 1 ) && file_exists(MOTO_ROOT_DIR . '/' . $this->source)) { $this->size = filesize(MOTO_ROOT_DIR . '/' . $this->source); if ( function_exists("getimagesize") ) { $size = getimagesize(MOTO_ROOT_DIR . '/' . $this->source); $this->parameters["width"] = $size[0]; $this->parameters["height"] = $size[1]; } } elseif (!is_null($this->source) && $this->size == 0 && file_exists(MOTO_ROOT_DIR . '/' . $this->source)) { $this->size = filesize(MOTO_ROOT_DIR . '/' . $this->source); } $item = new DOMElement('item'); $parent->parentNode->replaceChild($item, $parent); $item->setAttribute('type', (string) $this->type); $item->setAttribute('size', (integer) $this->size); if ($this->parent*1 > 0 ) $item->setAttribute('parent', (integer) $this->parent); $item->setAttribute('order', (integer) $this->order); if (is_null($this->modificationDate) || $this->modificationDate * 1 < 0 ) $this->modificationDate = substr(filemtime(MOTO_ROOT_DIR . '/' . $this->source) . '0000000', 0, 13); $item->setAttribute('modificationDate', (string) $this->modificationDate); $this->metatags = trim($this->metatags); if ($this->metatags != '') $item->appendChild(new DOMElement('metatags')) ->appendChild($parent->ownerDocument->createCDATASection($this->metatags)); $item->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); $item->appendChild(new DOMElement('source', (string) $this->source)); if ( $this->type == "image" || $this->type == "youtube") $item->appendChild(new DOMElement('thumbnail', (string) $this->thumbnail)); $this->alt = trim($this->alt); if ($this->alt != '') $item->appendChild(new DOMElement('alt')) ->appendChild($parent->ownerDocument->createCDATASection($this->alt)); $this->title = trim($this->title); if ($this->title != '') $item->appendChild(new DOMElement('title')) ->appendChild($parent->ownerDocument->createCDATASection($this->title)); if (isset($this->parameters) && is_array($this->parameters)) MotoUtil::arrayToNode($this->parameters, $item->appendChild(new DOMElement('parameters'))); $this->_node = $item; return $item; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } if ($this->source == '' || $this->type == 'youtube') return true; $file = MOTO_ROOT_DIR . '/' . $this->source; $thumbnail = MotoImgUtil::generateFilenameThumbnail($this->source); if (file_exists(MOTO_ROOT_DIR . '/' . $thumbnail)) @unlink(MOTO_ROOT_DIR . '/' . $thumbnail); return unlink($file); } public static function findBySource($source, DOMNode $context) { return MotoXML::findOneByXPath(".//item[source='{$source}']", $context, get_class()); } public static function findByName($name, DOMNode $context) { return MotoXML::findOneByXPath(".//item[name='{$name}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//item", $context, get_class()); } }