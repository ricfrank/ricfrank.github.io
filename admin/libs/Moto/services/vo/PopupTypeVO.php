<?php
 class PopupTypeVO extends HoldersStackVO { public $id; public $name; public $preview; public $popupTemplate; public $properties; public function __construct(DOMNode $parent = null) { parent::__construct($parent); if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { parent::loadDomElement($parent); $this->id = (integer) $parent->getAttribute('id'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) $node->nodeValue; $this->preview = (string) $parent->getAttribute('preview'); $this->properties = PropertyTypeVO::findAll($parent); $this->popupTemplate = new PopupVO(MotoXML::findOneByXPath('.//template', $parent)); return $this; } public function saveDomElement(DOMNode $parent) { return $parent; } public function updateTemplate(DOMNode $parent, PopupVO $popupVO) { $newNode = new DOMElement('template'); $oldNode = MotoXML::findOneByXPath("./template", $parent); if (!is_null($oldNode)) { $parent->replaceChild($newNode, $oldNode); } else { $parent->appendChild($newNode); } foreach($popupVO->modules as $object) { if (isset($object->parameters)) { if (isset($object->parameters["externalData"])) $object->parameters["externalData"] = "false"; if (isset($object->parameters["externalFile"])) $object->parameters["externalFile"] = ""; } } $needs = array("objects", "slots", "modules"); foreach($needs as $need) { $objs = new DOMElement($need); $newNode->appendChild($objs); foreach($popupVO->$need as $object) { $obj = new DOMElement(substr($need, 0 , strlen($need)-1)); $objs->appendChild($obj); $object->saveDomElement($obj); } } $ids = MotoXML::findByXPath(".//*[@id>0]", $newNode); if (!is_null($ids)) { foreach($ids as $id) { $id->removeAttribute("id"); } } $this->loadDomElement($parent); return $this; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//popup[@id='{$id}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//popup", $context, get_class()); } }