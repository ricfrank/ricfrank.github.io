<?php
 class MotoObjectVO extends AbstractVO { const OBJECT_MAX_WIDTH = 99999; const OBJECT_MAX_HEIGHT = 99999; const OBJECT_MAX_X_COORD = 99999; const OBJECT_MAX_Y_COORD = 99999; const OBJECT_MIN_X_COORD = -99999; const OBJECT_MIN_Y_COORD = -99999; public $id; public $name = ""; public $holder; public $x = 0; public $y = 0; public $width; public $height; public $rotation = 0; public $alpha = 1; public $blendMode = 'normal'; public $scaleX = 1; public $scaleY = 1; public $depth = 0; public $locked = false; public $lockEffects = false; public $lockPosition = false; public $parameters = array(); public $filters; public $snapping = false; public $top; public $bottom; public $left; public $right; public $forceTop = false; public $forceBottom = false; public $style; private $_node = null; protected static $_structure = null; public function __construct(DOMNode $parent = null) { if (self::$_structure == null) self::$_structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->id = (integer) $parent->getAttribute('id'); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) $node->nodeValue; $this->holder = (integer) $parent->getAttribute('holder'); $this->x = (integer) $parent->getAttribute('x'); $this->y = (integer) $parent->getAttribute('y'); $this->width = (integer) $parent->getAttribute('width'); $this->height = (integer) $parent->getAttribute('height'); if ($this->x < self::OBJECT_MIN_X_COORD || $this->x > self::OBJECT_MAX_X_COORD) $this->x = 0; if ($this->y < self::OBJECT_MIN_Y_COORD || $this->y > self::OBJECT_MAX_Y_COORD) $this->y = 0; if ($this->width < 0) $this->width = 0; if ($this->width > self::OBJECT_MAX_WIDTH) $this->width = self::OBJECT_MAX_WIDTH; if ($this->height < 0) $this->height = 0; if ($this->height > self::OBJECT_MAX_HEIGHT) $this->height = self::OBJECT_MAX_HEIGHT; if ($parent->hasAttribute('snapping')) $this->snapping = (boolean) MotoUtil::toBoolean($parent->getAttribute('snapping')); if ($parent->hasAttribute('top')) $this->top = (integer) $parent->getAttribute('top'); if ($parent->hasAttribute('right')) $this->right = (integer) $parent->getAttribute('right'); if ($parent->hasAttribute('bottom')) $this->bottom = (integer) $parent->getAttribute('bottom'); if ($parent->hasAttribute('left')) $this->left = (integer) $parent->getAttribute('left'); if ($parent->hasAttribute('forceTop')) $this->forceTop =(boolean) MotoUtil::toBoolean($parent->getAttribute('forceTop')); if ($parent->hasAttribute('forceBottom')) $this->forceBottom =(boolean) MotoUtil::toBoolean($parent->getAttribute('forceBottom')); if ($parent->hasAttribute('rotation')) $this->rotation = (float) $parent->getAttribute('rotation'); if ($parent->hasAttribute('alpha')) $this->alpha = (string) $parent->getAttribute('alpha'); if ($parent->hasAttribute('blendMode')) $this->blendMode = (string) $parent->getAttribute('blendMode'); if ($parent->hasAttribute('scaleX')) $this->scaleX = (float) MotoUtil::getValue($parent->getAttribute('scaleX'), 1); if ($parent->hasAttribute('scaleY')) $this->scaleY = (float) MotoUtil::getValue($parent->getAttribute('scaleY'), 1); $this->depth = (integer) $parent->getAttribute('depth'); if ($parent->hasAttribute('locked')) $this->locked = (boolean) MotoUtil::toBoolean($parent->getAttribute('locked')); if ($parent->hasAttribute('lockEffects')) $this->lockEffects =(boolean) MotoUtil::toBoolean($parent->getAttribute('lockEffects')); if ($parent->hasAttribute('lockPosition')) $this->lockPosition =(boolean) MotoUtil::toBoolean($parent->getAttribute('lockPosition')); $this->filters = MotoFilterVO::findAll($parent); $this->parameters = array(); $exclude = array_keys(get_object_vars($this)); if (isset($parent->attributes)) { foreach ($parent->attributes as $attrName => $attrNode) { if ($attrName != 'style' && in_array($attrName, $exclude)) continue; $this->parameters[$attrName] = MotoUtil::trim($attrNode->nodeValue); } } $this->style = new StyleVO(MotoXML::findOneByXPath("./style", $parent)); if (self::getDefaultOption('jsEnabled', false)) { if ($this->rotation != 0) { $this->_rotateMe(); } } return $this; } public function saveDomElement(DOMNode $parent) { if ($this->x < self::OBJECT_MIN_X_COORD || $this->x > self::OBJECT_MAX_X_COORD) $this->x = 0; if ($this->y < self::OBJECT_MIN_Y_COORD || $this->y > self::OBJECT_MAX_Y_COORD) $this->y = 0; if ($this->width < 0) $this->width = 0; if ($this->width > self::OBJECT_MAX_WIDTH) $this->width = self::OBJECT_MAX_WIDTH; if ($this->height < 0) $this->height = 0; if ($this->height > self::OBJECT_MAX_HEIGHT) $this->height = self::OBJECT_MAX_HEIGHT; $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('holder', (integer) $this->holder); $parent->setAttribute('x', (integer) $this->x); $parent->setAttribute('y', (integer) $this->y); $parent->setAttribute('width', (integer) $this->width); $parent->setAttribute('height', (integer) $this->height); if ((integer) $this->rotation != 0) $parent->setAttribute('rotation', sprintf('%.2f', $this->rotation)); if ((string)$this->alpha != '1') $parent->setAttribute('alpha', (string) $this->alpha); if ((string)$this->blendMode != '' && (string)$this->blendMode != 'normal' ) $parent->setAttribute('blendMode', (string) $this->blendMode); if ((string)$this->scaleX != '1') $parent->setAttribute('scaleX', (string) $this->scaleX); if ((string)$this->scaleY != '1') $parent->setAttribute('scaleY', (string) $this->scaleY); if ((integer) $this->depth != 0) $parent->setAttribute('depth', (integer) $this->depth); if ((string) MotoUtil::boolToString($this->locked) != 'false') $parent->setAttribute('locked', (string) MotoUtil::boolToString($this->locked)); if ((string) MotoUtil::boolToString($this->lockEffects) != 'false') $parent->setAttribute('lockEffects',(string) MotoUtil::boolToString($this->lockEffects)); if ((string) MotoUtil::boolToString($this->lockPosition) != 'false') $parent->setAttribute('lockPosition',(string) MotoUtil::boolToString($this->lockPosition)); if ((integer) $this->rotation != 0) $parent->setAttribute('rotation', sprintf('%.2f', $this->rotation)); if (!empty($this->name)) $parent->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); if (!empty($this->filters)) { $filtersNode = $parent->appendChild(new DOMElement('filters')); foreach ($this->filters as $filter) { $filter->saveDomElement($filtersNode); } } if ((string) MotoUtil::boolToString($this->snapping) != 'false') { $parent->setAttribute('snapping', (string) MotoUtil::boolToString($this->snapping)); if (!is_null($this->top)) $parent->setAttribute('top', (integer) $this->top); if (!is_null($this->right)) $parent->setAttribute('right', (integer) $this->right); if (!is_null($this->bottom)) $parent->setAttribute('bottom', (integer) $this->bottom); if (!is_null($this->left)) $parent->setAttribute('left', (integer) $this->left); } if ((string) MotoUtil::boolToString($this->forceTop) != 'false') $parent->setAttribute('forceTop',(string) MotoUtil::boolToString($this->forceTop)); if ((string) MotoUtil::boolToString($this->forceBottom) != 'false') $parent->setAttribute('forceBottom',(string) MotoUtil::boolToString($this->forceBottom)); if (isset($this->style) && $this->style != null) $this->style->saveDomElement($parent); $this->_node = $parent; return $parent; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//object[@id='{$id}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath("./object", $context, get_class()); } function getNode() { return $this->_node; } protected function _rotateMe( ) { if ($this->rotation == 0) return; $pi = pi(); $center = (object) $this->_getCenter(); $a0 = - $this->rotation * $pi / 180; $s0 = sin($a0); $c0 = cos($a0); $dX0 = $this->x - $center->x; $dY0 = $this->y - $center->y; $this->x = round($center->x + $dX0 * $c0 - $dY0 * $s0); $this->y = round($center->y + $dX0 * $s0 + $dY0 * $c0); } protected function _getCenter() { $pi = pi(); $r = $pi * $this->rotation / 180; $radius = $this->width / 2; $x1 = $x0 = $this->x + $radius * cos( $r ); $y1 = $y0 = $this->y + $radius * sin( $r ); $r1 = $pi * ($this->rotation + 90) / 180; $x1 = $x0 + ($this->height / 2) * cos( $r1 ) ; $y1 = $y0 + ($this->height / 2) * sin( $r1 ) ; return array('x' => $x1, 'y' => $y1 ); } }