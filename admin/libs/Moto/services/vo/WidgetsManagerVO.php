<?php
if (!defined('MOTO_WIDGETS_DIR')) define('MOTO_WIDGETS_DIR', MOTO_ROOT_DIR . '/widgets/'); class WidgetsManagerVO { const WIDGET_ACTIVATED = 'active'; public $widgets = array(); public $parameters = array(); protected $_installed; protected $error = null; protected $_params = array( 'storage' => MOTO_WIDGETS_DIR ); protected $_map = array(); protected $_system = null; protected $_structure = null; public function __construct($params = array()) { if (is_array($params)) $this->_params = array_merge($this->_params, $params); $this->getParameters(); } public function getParameters() { $this->parameters['zipEnabled'] = class_exists('ZipArchive', false); $post_max_size = MotoUtil::toBytes(ini_get('post_max_size')); $upload_max_filesize = MotoUtil::toBytes(ini_get('upload_max_filesize')); $min = $post_max_size; if ($post_max_size > $upload_max_filesize) $min = $upload_max_filesize; $this->parameters['maxUploadSize'] = $min; } function getWidget($uid, $nameSpace = 'motocms') { return (isset($this->_map[$nameSpace][$uid]) ? $this->_map[$nameSpace][$uid] : null); } function setWidget(WidgetVO $widgetVO) { if (!isset($this->_map[$widgetVO->nameSpace][$widgetVO->uid])) $this->widgets[] = $widgetVO; $this->_map[$widgetVO->nameSpace][$widgetVO->uid] = $widgetVO; } function addWidget(WidgetVO $widgetVO) { $this->getWidgetSystemInfo($widgetVO); $this->setWidget($widgetVO); } public function isInstalled(WidgetVO $widgetVO) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $query = './widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); return !is_null($node); } public function setInstalled(WidgetVO $widgetVO) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $widgetVO->installed = true; $query = './widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); if ($node == null) { $root = MotoXML::findOneByXPath('./widgets', $this->_system); if ($root == null) { $root = new DOMElement('widgets'); $this->_system->appendChild($root); } $node = new DOMElement('widget'); $root->appendChild($node); $node->setAttribute('uid', $widgetVO->uid); $node->setAttribute('nameSpace', $widgetVO->nameSpace); $node->setAttribute('type', $widgetVO->type); } $node->setAttribute('enabled', (string) MotoUtil::boolToString($widgetVO->enabled)); MotoSystem::save(); return true; } public function uninstall(WidgetVO $widgetVO) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $widgetVO->installed = false; $query = './widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); if ($node != null) { $node->parentNode->removeChild($node); MotoSystem::save(); return true; } return true; } public function isActivated(WidgetVO $widgetVO) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $query = './widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '" and @enabled="true"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); return !is_null($node); return (isset($this->_installed[$widgetVO->nameSpace][$widgetVO->uid]) && $this->_installed[$widgetVO->nameSpace][$widgetVO->uid]['status'] == WidgetsManagerVO::WIDGET_ACTIVATED); } public function setActivated(WidgetVO $widgetVO, $value = true) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $query = './widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); if ($node == null) { $root = MotoXML::findOneByXPath('./widgets', $this->_system); if ($root == null) { $root = new DOMElement('widgets'); $this->_system->appendChild($root); } $node = new DOMElement('widget'); $root->appendChild($node); $node->setAttribute('uid', $widgetVO->uid); $node->setAttribute('nameSpace', $widgetVO->nameSpace); $node->setAttribute('type', $widgetVO->type); } $widgetVO->enabled = $value; $node->setAttribute('enabled', (string) MotoUtil::boolToString($widgetVO->enabled)); MotoSystem::save(); } function getWidgetSystemInfo(WidgetVO $widgetVO) { if ($this->_system == null) { $this->_system = MotoSystem::getAccess(MotoSystem::WIDGET_SECTION); if (is_null($this->_system)) throw new Exception('Cant get access to system.xml'); } $query ='./widgets/widget[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]' ; $node = MotoXML::findOneByXPath($query, $this->_system); if ($node != null) { $widgetVO->installed = true; $widgetVO->enabled = ($node->hasAttribute('enabled') ? (boolean) MotoUtil::toBoolean($node->getAttribute('enabled')) : false); } else { $widgetVO->installed = false; $widgetVO->enabled = false; } } function getStructureTypes(WidgetVO $widgetVO, $refresh = false) { if ( count($widgetVO->getData('_types')) > 0 && $refresh == false) return $widgetVO->getData('_types'); if ($this->_structure == null) $this->_structure = MotoXML::create (STRUCTURE_RESOURSE_PATH); $result = array(); $root = MotoXML::findOneByXPath('.', $this->_structure); if ($root == null) return ; $query = './/' . $widgetVO->type . '[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) { foreach($nodes as $node) { $result[strtolower($node->nodeName)][] = $node->getAttribute('id'); } } $widgetVO->setData('_types', $result); return $result; } } 