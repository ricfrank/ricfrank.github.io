<?php
 class PopupVO extends MotoObjectsHolderVO { public $id; public $name; public $parent; public $title; public $url; public $data; public $popupType; public $popupTypeId; public $description = ''; public $keywords = ''; public $noIndex = false; public $noFollow = false; public $order; public $properties; public $isProtected; public function __construct(DOMNode $parent = null) { parent::__construct($parent); $this->noFollow = self::getDefaultValue('PopupVO.noFollow', $this->noFollow); $this->noIndex = self::getDefaultValue('PopupVO.noIndex', $this->noIndex); if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { parent::loadDomElement($parent); $this->id = (integer) $parent->getAttribute('id'); $this->parent = (integer) $parent->getAttribute('parent'); $this->order = (integer) $parent->getAttribute('order'); $this->properties = PropertyVO::findAllByExpression( $parent, "./properties/item"); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./title", $parent); if (!is_null($node)) $this->title = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./url", $parent); if (!is_null($node)) $this->url = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./description", $parent); if (!is_null($node)) $this->description = (string) MotoUtil::trim($node->nodeValue); $node = MotoXML::findOneByXPath("./keywords", $parent); if (!is_null($node)) $this->keywords = (string) MotoUtil::trim($node->nodeValue); if ($parent->hasAttribute('noIndex')) $this->noIndex = (boolean) MotoUtil::toBoolean($parent->getAttribute('noIndex')); if ($parent->hasAttribute('noFollow')) $this->noFollow = (boolean) MotoUtil::toBoolean($parent->getAttribute('noFollow')); if ($parent->hasAttribute('isProtected')) $this->isProtected = (boolean) MotoUtil::toBoolean($parent->getAttribute('isProtected')); $this->popupTypeId = (integer) $parent->getAttribute('popupType'); if (!defined('IS_SMART_GETCONTENT')) { $this->popupType = PopupTypeVO::findById($parent->getAttribute('popupType'), parent::$_structure); } return $this; } public function saveDomElement(DOMNode $parent) { $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('parent', (integer) $this->parent); if (!is_null($this->order)) $parent->setAttribute('order', (integer) $this->order); if (!is_null($this->properties)) { $properties = $parent->appendChild(new DOMElement('properties')); foreach ($this->properties as $property) { $property->saveDomElement($properties->appendChild(new DOMElement('item'))); } } $parent->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); $parent->appendChild(new DOMElement('title')) ->appendChild($parent->ownerDocument->createCDATASection($this->title)); $parent->appendChild(new DOMElement('url')) ->appendChild($parent->ownerDocument->createCDATASection($this->url)); if (!empty($this->description)) $parent->appendChild(new DOMElement('description')) ->appendChild($parent->ownerDocument->createCDATASection($this->description)); if (!empty($this->keywords)) $parent->appendChild(new DOMElement('keywords')) ->appendChild($parent->ownerDocument->createCDATASection($this->keywords)); if ((string) MotoUtil::boolToString($this->noIndex) != 'false') $parent->setAttribute('noIndex',(string) MotoUtil::boolToString($this->noIndex)); if ((string) MotoUtil::boolToString($this->noFollow) != 'false') $parent->setAttribute('noFollow',(string) MotoUtil::boolToString($this->noFollow)); if ((string) MotoUtil::boolToString($this->isProtected) != 'false') $parent->setAttribute('isProtected',(string) MotoUtil::boolToString($this->isProtected)); $parent->setAttribute('popupType', (string) isset($this->popupType) ? $this->popupType->id : null); parent::saveDomElement($parent); return $parent; } public function updateDomElement(DOMNode $parent) { $newNode = new DOMElement('popup'); $oldNode = MotoXML::findOneByXPath(".//popup[@id='{$this->id}']", $parent); if (!is_null($oldNode)) { $parent->replaceChild($newNode, $oldNode); } else { $parent->appendChild($newNode); } return $this->saveDomElement($newNode); } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//popup[@id='{$id}']", $context, get_class()); } public static function findByUrl($url, DOMNode $context) { return MotoXML::findOneByXPath(".//popup[url='{$url}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//popup", $context, get_class()); } }