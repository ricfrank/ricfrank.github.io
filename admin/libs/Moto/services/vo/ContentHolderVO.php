<?php
 class ContentHolderVO extends AbstractVO { public $id; public $name; public $x; public $y; public $width; public $height; public $locked; public $depth; public $type; public $isStatic; public $hAlign; public $vAlign; public $deltaX; public $deltaY; public $stretched; public $top; public $left; public $bottom; public $right; public $masked; public $isDynamic; public $holderTypeId; public $properties = array(); protected static $_structure = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->id = (integer) $parent->getAttribute('id'); $this->x = (integer) $parent->getAttribute('x'); $this->y = (integer) $parent->getAttribute('y'); $this->width = (integer) $parent->getAttribute('width'); $this->height = (integer) $parent->getAttribute('height'); $this->depth = (integer) $parent->getAttribute('depth'); $this->type = (string) $parent->getAttribute('type'); $this->locked = (boolean) MotoUtil::toBoolean($parent->getAttribute('locked')); $this->isStatic = (boolean) MotoUtil::toBoolean($parent->getAttribute('isStatic')); $node = MotoXML::findOneByXPath("./name", $parent); if (!is_null($node)) $this->name = (string) MotoUtil::trim($node->nodeValue); $_hAlign = (string) $parent->getAttribute('hAlign'); if ($_hAlign == "left" || $_hAlign == "center" || $_hAlign == "right") { $this->hAlign = $_hAlign; } $_vAlign = (string) $parent->getAttribute('vAlign'); if ($_vAlign == "top" || $_vAlign == "middle" || $_vAlign == "bottom") $this->vAlign = $_vAlign; $this->deltaX = (integer) $parent->getAttribute('deltaX'); $this->deltaY = (integer) $parent->getAttribute('deltaY'); $this->stretched = (boolean) MotoUtil::toBoolean($parent->getAttribute('stretched')); $this->top = (integer) $parent->getAttribute('top'); $this->left = (integer) $parent->getAttribute('left'); $this->bottom = (integer) $parent->getAttribute('bottom'); $this->right = (integer) $parent->getAttribute('right'); $this->masked = (boolean) MotoUtil::toBoolean($parent->getAttribute('masked')); $this->isDynamic = (boolean) MotoUtil::toBoolean($parent->getAttribute('isDynamic')); $this->holderTypeId = (integer) $parent->getAttribute('holderTypeId'); if (self::getDefaultOption('ContentHolderVO.loadType', false)) { if (self::$_structure == null) self::$_structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); $this->holderType = ContentHolderTypeVO::findById($parent->getAttribute('holderTypeId'), self::$_structure); } $this->loadProperties($parent); return $this; } public function saveDomElement(DOMNode $parent) { $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('x', (integer) $this->x); $parent->setAttribute('y', (integer) $this->y); $parent->setAttribute('width', (integer) $this->width); $parent->setAttribute('height', (integer) $this->height); $parent->setAttribute('depth', (integer) $this->depth); $parent->setAttribute('type', (string) $this->type); $parent->setAttribute('locked', (string) MotoUtil::boolToString($this->locked)); $parent->setAttribute('isStatic', (string) MotoUtil::boolToString($this->isStatic)); $parent->setAttribute('hAlign', (string) $this->hAlign); $parent->setAttribute('vAlign', (string) $this->vAlign); $parent->setAttribute('deltaX', (integer) $this->deltaX); $parent->setAttribute('deltaY', (integer) $this->deltaY); $parent->setAttribute('stretched', (string) MotoUtil::boolToString($this->stretched)); $parent->setAttribute('top', (integer) $this->top); $parent->setAttribute('left', (integer) $this->left); $parent->setAttribute('bottom', (integer) $this->bottom); $parent->setAttribute('right', (integer) $this->right); $parent->setAttribute('masked', (string) MotoUtil::boolToString($this->masked)); $parent->setAttribute('isDynamic', (string) MotoUtil::boolToString($this->isDynamic)); if ($this->isDynamic) $parent->setAttribute('holderTypeId', (integer) $this->holderTypeId); $propertiesNode = $parent->appendChild(new DOMElement('properties')); foreach ($this->properties as $item) { $item->saveDomElement($propertiesNode->appendChild(new DOMElement('item'))); } if (!empty($this->name)) $parent->appendChild(new DOMElement('name')) ->appendChild($parent->ownerDocument->createCDATASection($this->name)); return $parent; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//holder[@id='{$id}']", $context, get_class()); } public static function findAll(DOMNode $context) { $result = MotoXML::findByXPath(".//holder", $context, get_class()); return $result; } public static function findAllByExpression(DOMNode $context, $expression) { return MotoXML::findByXPath($expression, $context, get_class()); } function getType() { return ( isset($this->holderType) && $this->holderType != null ? $this->holderType : null); } function loadProperties($parent) { $this->properties = PropertyVO::findAll($parent); if ( AbstractVO::getDefaultOption('jsEnabled', false) && $this->getType() != null) { $typeVO = $this->getType(); $properties = $typeVO->getDefaultProperties(); $typeById = $typeVO->getPropertiesMapById(); $this->properties = Moto_Html_Util::itemPropertiesFill($this->properties, $typeById, $properties); $this->widgetType = 'holder'; } } }