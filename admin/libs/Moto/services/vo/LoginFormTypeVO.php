<?php
 class LoginFormTypeVO implements MotoDomObjectInterface { public $url; public $librarySymbolLinkage; public $external; public $properties; protected $_propertiesMap; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } } public function loadDomElement(DOMNode $parent) { $this->librarySymbolLinkage = (string) $parent->getAttribute('librarySymbolLinkage'); $this->external = (boolean) MotoUtil::toBoolean($parent->getAttribute('external')); $this->url = (string) $parent->getAttribute('url'); $this->properties = PropertyTypeVO::findAll($parent); if (AbstractVO::getDefaultOption('jsEnabled', false)) { $templates = array(); $node = MotoXML::findOneByXPath('./htmlTemplates', $parent); if ($node != null) { $nodes = MotoXML::findByXPath('./item', $node); if ($nodes != null) { foreach($nodes as $node) { $name = ($node->hasAttribute('name') ? $node->getAttribute('name') : 'main'); $templates[$name] = $node->nodeValue; } } } $this->htmlTemplates = $templates; } return $this; } public function saveDomElement(DOMNode $parent) { return $parent; } function createPropertiesMap() { $typeById = array(); $defaultProperties = array(); $properiesTemplate = array(); foreach($this->properties as $i => $property) { $typeById[$property->id] = $property; if (isset($properiesTemplate[ $property->id ])) { $value = array_merge($properiesTemplate[ $property->id ]->parameters, array('value' => $properiesTemplate[ $property->id ]->value)); } else { $value = array_merge($property->parameters, array('value' => (isset($property->defaultValue) ? $property->defaultValue : ''))); } $keyName = ( (isset($property->keyName) && $property->keyName != null) ? $property->keyName : $i); $value = Moto_Html_Util::propertyRender($value, $property->type); $defaultProperties[$keyName] = $value; } $this->_propertiesMap['byId'] = $typeById; } function getPropertiesMapById() { if ($this->_propertiesMap == null) { $this->createPropertiesMap(); } return $this->_propertiesMap['byId']; } }