<?php
 class UserVO implements MotoDomObjectInterface { public $id; public $name; public $email; public $password; public $session; private $_node = null; public function __construct(DOMNode $parent = null) { if (!empty($parent)) { $this->loadDomElement($parent); } $this->session = session_id(); } public function loadDomElement(DOMNode $parent) { $this->_node = $parent; $this->id = (integer) $parent->getAttribute('id'); $this->name = (string) $parent->getAttribute('name'); $this->email = (string) $parent->getAttribute('email'); $this->password = (string) $parent->getAttribute('password'); if (strlen($this->password) == 40) $this->decrypt(); return $this; } public function saveDomElement(DOMNode $parent) { $this->_node = $parent; $this->encrypt(); $parent->setAttribute('id', (integer) $this->id); $parent->setAttribute('name', (string) $this->name); $parent->setAttribute('email', (string) $this->email); $parent->setAttribute('password', (string) $this->password); return $parent; } private function encrypt() { $pass = $this->password; $pass = strrev(substr($pass, 0, 8)) . chr(rand(97, 102)) . rand(0,9) . substr($pass, 8, 8) . rand(0,9) . chr(rand(97, 102)) . strrev(substr($pass, 16, 8)) . chr(rand(97, 102)) . rand(0,9) . substr($pass, 24) . chr(rand(97, 102)). rand(0,9); $pass = substr($pass, 6) . substr($pass, 0, 6); $this->password = $pass; } private function decrypt() { $pass = $this->password; $pass = substr($pass, 34) . substr($pass, 0, 34); $pass = strrev(substr($pass, 0, 8)) . substr($pass, 10, 8) . strrev(substr($pass, 20, 8)) . substr($pass, 30, 8); $this->password = $pass; } public function remove() { if (!is_null($this->_node)) { $this->_node->parentNode->removeChild($this->_node); $this->_node = null; } return true; } public static function findById($id, DOMNode $context) { return MotoXML::findOneByXPath(".//user[@id='{$id}']", $context, get_class()); } public static function findByEmail($email, DOMNode $context) { return MotoXML::findOneByXPath(".//user[@email='{$email}']", $context, get_class()); } public static function findByName($name, DOMNode $context) { return MotoXML::findOneByXPath(".//user[@name='{$name}']", $context, get_class()); } public static function findAll(DOMNode $context) { return MotoXML::findByXPath(".//user", $context, get_class()); } }