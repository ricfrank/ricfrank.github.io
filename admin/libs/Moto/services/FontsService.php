<?php
 class FontsService { public function getFonts() { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); try { $responseVO->result = MotoFontVO::findAll(new MotoXML(FONTS_RESOURSE_PATH)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveFonts($items, $exclude) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = new MotoXML(FONTS_RESOURSE_PATH); foreach ($exclude as $item) { $itemVO = MotoFontVO::findBySource($item->file, $dom); if ($itemVO) $itemVO->remove(); else $item->remove(); } $motoFonts = new DOMElement('motoFonts'); $dom->replaceChild($motoFonts, MotoXML::findOneByXPath('//motoFonts', $dom)); foreach ($items as $font) { $font->saveDomElement($motoFonts->appendChild(new DOMElement('font'))); } MotoXML::putXML($dom, FONTS_RESOURSE_PATH); MotoCache::getInstance()->clean(MotoCache::CLEANING_MODE_ALL); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function removeFont($fontName) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); try { $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function addExternalFont($fontVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $result = null; try { $user = new UserService(); if (!$user->isAuthenticated()->status->status) { MotoLog::getInstance()->err('Access denied.'); throw new Exception('Access denied.', StatusEnum::ERROR_ACCESS_DENIED); } $url = $fontVO->file; if (strpos($url, 'http://') === false) { $url = 'http://' . $url; } $info = parse_url($url); $motoFontVO = new MotoFontVO(); $motoFontVO->name = $fontVO->name; $motoFontVO->characters = $fontVO->characters; $motoFontVO->file = basename($url); $motoFontVO->isGoogle = $fontVO->isGoogle; $motoFontVO->isGoogle = true; $motoFontVO->enabled = $fontVO->enabled; $motoFontVO->enabled = true; $motoFontVO->regular = $fontVO->regular; $motoFontVO->italic = $fontVO->italic; $motoFontVO->bold = $fontVO->bold; $motoFontVO->boldItalic = $fontVO->boldItalic; $destination = FONTS_FOLDER . '/' . uniqid() . '.tmp'; $tempFilename = MotoUtil::downloadFile($url, $destination); $pathTempFilename = MOTO_ROOT_DIR . '/' . $tempFilename; if (!file_exists( $pathTempFilename )) { throw new Exception('File not downloaded'); } if (md5_file( $pathTempFilename ) !== $fontVO->md5) { unlink($pathTempFilename); throw new Exception('Md5 File not equal'); } if (filesize( $pathTempFilename ) !== $fontVO->filesize) { unlink($pathTempFilename); throw new Exception('Filesize not equal'); } $pathFilename = MOTO_ROOT_DIR . '/' . FONTS_FOLDER . '/' . $motoFontVO->file; if (file_exists($pathFilename)) { unlink($pathFilename); } if (!rename($pathTempFilename, $pathFilename)) { unlink($pathTempFilename); throw new Exception('Cant rename temp file'); } MotoUtil::fixFilePermission( $pathFilename ); $result = $motoFontVO; } catch (Exception $e) { $result = null; $responseVO->status->status = $e->getCode(); $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } } 