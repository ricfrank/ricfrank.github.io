<?php
if (!defined('CONTROL_PANEL_SYSTEM')) define('CONTROL_PANEL_SYSTEM', MOTO_ADMIN_DIR . '/xml/system.xml'); class ModulesService { protected static $_dom; protected static $_root; public function getDataProviders() { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { self::$_root = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null(self::$_root)) throw new Exception('Cant get access to system.xml'); $result = ModuleDataProviderVO::findAll(self::$_root); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function getDataProvidersByModuleType($moduleType) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { self::$_root = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null(self::$_root)) throw new Exception('Cant get access to system.xml'); $result = ModuleDataProviderVO::findAllByModuleType($moduleType, self::$_root); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function saveDataProviders($itemsVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { self::$_root = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null(self::$_root)) throw new Exception('Cant get access to system.xml'); $parent = self::$_root->parentNode; $parent->removeChild(self::$_root); self::$_root = new DOMElement(MotoSystem::MODULES_DATAPROVIDERS); $parent->appendChild(self::$_root); $maxId = 0; foreach($itemsVO as $i=>$itemVO) if ($itemVO instanceof ModuleDataProviderVO) { if ($maxId < $itemVO->id) $maxId = $itemVO->id; $itemVO->saveDomElement(self::$_root->appendChild(new DOMElement('dataProvider'))); } self::$_root->setAttribute('maxId', $maxId ); self::$_root->setAttribute('modificationDate', time()); MotoSystem::save(); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function saveDataProvider(ModuleDataProviderVO $itemVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { self::$_root = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null(self::$_root)) throw new Exception('Cant get access to system.xml'); $itemVO->updateDomElement(self::$_root); MotoSystem::save(); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public function removeDataProvider($itemVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { self::$_root = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null(self::$_root)) throw new Exception('Cant get access to system.xml'); $itemVO = ModuleDataProviderVO::findById($itemVO->id, self::$_root ); if ($itemVO) { $itemVO->remove(); MotoSystem::save(); } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } }