<?php
if (!defined('USERS_RESOURCE_PATH')) define('USERS_RESOURCE_PATH', MOTO_ADMIN_DIR . '/data/users.xml'); if (!defined('MAIL_TEMPLATES_PATH')) { $lang = 'eng'; $dom = MotoXML::create(MOTO_ADMIN_DIR . '/' . CONTROL_PANEL_CONFIGURATION); $result = MotoXML::findOneByXPath(".//item[@name='language']", $dom); if (!is_null($result)) { $lang = $result->nodeValue; $dir = MOTO_ADMIN_DIR . '/language/' . $lang . '/templates/'; if (!is_dir($dir)) $lang = 'eng'; } $dir = MOTO_ADMIN_DIR . '/language/' . $lang . '/templates/'; if (!is_dir($dir)) $dir = MOTO_ADMIN_DIR . '/templates/mail/'; define('MAIL_TEMPLATES_PATH', $dir); } class UserService { const AUTH_NAMESPACE = 'moto/user/authenticated'; const IDENTITY_NAMESPACE = 'moto/user/identity'; private $authenticated = false; private $identity = ''; public function __construct() { $this->authenticated = (boolean) !empty($_SESSION[self::AUTH_NAMESPACE]) ? $_SESSION[self::AUTH_NAMESPACE] : false; $this->identity = !empty($_SESSION[self::IDENTITY_NAMESPACE]) ? $_SESSION[self::IDENTITY_NAMESPACE] : ''; } public function isAuthenticated() { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); if ($this->authenticated) { try { $dom = new MotoXML(USERS_RESOURCE_PATH); $user = UserVO::findById($this->identity, $dom); $newUser = new UserVO(); $newUser->name = $user->name; $newUser->id = $user->id; $newUser->session = MotoUtil::createUserToken(); $responseVO->result = $newUser; $responseVO->status->status = true; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } } else { $responseVO->result = null; $responseVO->status->status = false; } return $responseVO; } public function login($username, $password) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); try { $dom = new MotoXML(USERS_RESOURCE_PATH); if ($this->authenticated) { $user_authenticated = UserVO::findById($this->identity, $dom); if (!is_null($user_authenticated)) { $user_authenticated->password = ''; $user_authenticated->session = MotoUtil::createUserToken(); $responseVO->result = $user_authenticated; $responseVO->status->status = StatusEnum::SUCCESS; $responseVO->status->message = StatusMessagesEnum::LOGIN_SUCCESSFUL; return $responseVO; } } $user = UserVO::findByName($username, $dom); if (is_null($user)) { $responseVO->status->status = StatusEnum::INVALID_USERNAME_PASSWORD; $responseVO->status->message = StatusMessagesEnum::INVALID_USERNAME; return $responseVO; } if (md5($password) != $user->password) { $responseVO->status->status = StatusEnum::INVALID_USERNAME_PASSWORD; $responseVO->status->message = StatusMessagesEnum::INVALID_PASSWORD; return $responseVO; } $this->authenticated = true; $this->identity = $user->id; $_SESSION[self::AUTH_NAMESPACE] = $this->authenticated; $_SESSION[self::IDENTITY_NAMESPACE] = $this->identity; $user->password = ''; $user->session = MotoUtil::createUserToken(); $responseVO->result = $user; $responseVO->status->status = StatusEnum::SUCCESS; $responseVO->status->message = StatusMessagesEnum::LOGIN_SUCCESSFUL; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function logoutApplication() { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::SUCCESS; if ($this->authenticated) { $this->authenticated = false; $this->identity = ''; unset($_SESSION[self::AUTH_NAMESPACE]); unset($_SESSION[self::IDENTITY_NAMESPACE]); } return $responseVO; } public function forgot($email) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); try { $dom = new MotoXML(USERS_RESOURCE_PATH); $user = UserVO::findByEmail(md5($email), $dom); if (is_null($user)) { $responseVO->result = null; $responseVO->status->status = StatusEnum::INVALID_EMAIL; $responseVO->status->message = StatusMessagesEnum::INVALID_EMAIL; return $responseVO; } $password = self::generatePassword(6); $user->password = md5($password); $user->saveDomElement(MotoXML::findOneByXPath(".//user[@id='{$user->id}']", $dom)); $dom->save(USERS_RESOURCE_PATH); $mailVars = array( 'name' => $user->name, 'password' => $password ); $mail = new MotoMail(); $mail->loadBodyHtmlFromTemplate(MAIL_TEMPLATES_PATH . '/user_forgot_password.tpl', $mailVars); $mail->setFrom(CONTROL_PANEL_COMPANY_EMAIL_NOREPLY, CONTROL_PANEL_COMPANY_NAME); $mail->addTo($email); $mail->setSubject(CONTROL_PANEL_COMPANY_NAME . ' / Your new password'); $mail->send(); $user->password = ''; $responseVO->result = $user; $responseVO->status->status = StatusEnum::SUCCESS; $responseVO->status->message = StatusMessagesEnum::MAIL_SUCCESSFULLY_SENT; } catch (Exception $e) { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function register($name, $email, $password) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); try { if (!file_exists(USERS_RESOURCE_PATH)) { $dom = new MotoXML(); $dom->appendChild(new DOMElement('users')); MotoXML::putXML($dom, USERS_RESOURCE_PATH); } $dom = new MotoXML(USERS_RESOURCE_PATH); if (UserVO::findAll($dom) != null) { $responseVO->result = null; $responseVO->status->status = StatusEnum::INVALID_OPERATION; $responseVO->status->message = StatusMessagesEnum::AUTHORIZATION_FAILED; return $responseVO; } if (!is_null(UserVO::findByName($name, $dom))) { $responseVO->result = null; $responseVO->status->status = 0; $responseVO->status->message = 'Username already exist'; return $responseVO; } if (!is_null(UserVO::findByEmail(md5($email), $dom))) { $responseVO->result = null; $responseVO->status->status = 0; $responseVO->status->message = 'E-Mail already exist'; return $responseVO; } $user = new UserVO(); $user->id = time(); $user->name = $name; $user->email = md5($email); $password = empty($password) ? self::generatePassword(6) : $password; $user->password = md5($password); $user->saveDomElement($dom->documentElement->appendChild(new DOMElement('user'))); $dom->save(USERS_RESOURCE_PATH); $this->authenticated = true; $this->identity = $user->id; $_SESSION[self::AUTH_NAMESPACE] = $this->authenticated; $_SESSION[self::IDENTITY_NAMESPACE] = $this->identity; $user->password = ''; $user->session = MotoUtil::createUserToken(); $responseVO->result = $user; $responseVO->status->status = StatusEnum::SUCCESS; $mailVars = array( 'name' => $name, 'password' => $password ); $mail = new MotoMail(); $mail->loadBodyHtmlFromTemplate(MAIL_TEMPLATES_PATH . '/user_register.tpl', $mailVars); $mail->setFrom(CONTROL_PANEL_COMPANY_EMAIL_NOREPLY, CONTROL_PANEL_COMPANY_NAME); $mail->addTo($email); $mail->setSubject(CONTROL_PANEL_COMPANY_NAME . ': registration successful'); try { $mail->send(); } catch (Exception $e) { $responseVO->status->status = StatusEnum::ERROR_WHILE_SENDING_MAIL; $responseVO->status->message = StatusMessagesEnum::ERROR_WHILE_SENDING_MAIL; } } catch (Exception $e) { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function changePassword($userId, $oldPassword, $newPassword) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); try { $dom = new MotoXML(USERS_RESOURCE_PATH); $user = UserVO::findById($userId, $dom); if (is_null($user)) { $responseVO->result = null; $responseVO->status->status = 0; $responseVO->status->message = 'User not found'; return $responseVO; } if (md5($oldPassword) != $user->password) { $responseVO->status->status = StatusEnum::INVALID_USERNAME_PASSWORD; $responseVO->status->message = StatusMessagesEnum::INVALID_PASSWORD; return $responseVO; } $user->password = md5($newPassword); $user->saveDomElement(MotoXML::findOneByXPath(".//user[@id='{$user->id}']", $dom)); MotoXML::putXML($dom, USERS_RESOURCE_PATH); $responseVO->result = $user; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function sendFeedback($userName, $message) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); try { $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; $responseVO->status->message = StatusMessagesEnum::MAIL_SUCCESSFULLY_SENT; } catch (Exception $e) { $responseVO->status->status = StatusEnum::ERROR_WHILE_SENDING_MAIL; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public static function generatePassword($length = 5) { $salt = 'abcdefghijklmnopqrstuvwxyz'; $salt .= strtoupper($salt); $salt .= '0123456789'; $salt_len = strlen($salt); $password = ''; for ($i = 0; $i < $length; $i++) { $password .= substr($salt, mt_rand() % $salt_len, 1); } return $password; } }