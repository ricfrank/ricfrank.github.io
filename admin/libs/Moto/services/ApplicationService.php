<?php
 class ApplicationService { const CONFIGURATION_ITEM = "item"; const CONFIGURATION_ITEM_NAME = "name"; const CONFIGURATION_ITEM_VALUE = "value"; const PARAMETERS_DILIMITER = '@data:'; const DETAILS_DILIMITER = '@details:'; const MOBILE_BLANK_DIR = 'blank'; const MOBILE_TEMPLATE_DIR = 'template'; const MOBILE_WEBSITE_WIDTH = 480; const MOBILE_WEBSITE_HEIGHT = 800; protected $_mobileTemplateFolder = ''; protected function _initMobileServices() { $this->_mobileTemplateFolder = MOTO_ROOT_DIR . '/' . MOBILE_TEMPLATES_FOLDER; $this->_mobileTemplateFolder = rtrim($this->_mobileTemplateFolder, '/') . '/'; $user = new UserService(); if (!$user->isAuthenticated()->status->status) { throw new Exception('Access denied.', StatusEnum::ERROR_ACCESS_DENIED); } } protected function _getMobileFolderPath() { return MOTO_ROOT_DIR . '/' . $this->_getMobileFolderDir() . '/'; } protected function _getMobileFolderDir() { if (!defined('MOBILE_WEBSITE_FOLDER')) throw new Exception('MOBILE_SERVICES_WEBSITE_FOLDER_NOT_SETTED', StatusEnum::ERROR_WHILE_WORKING_WITH_FILE); return MOBILE_WEBSITE_FOLDER; } protected function _preCheckMobileServices() { $mobilePath = $this->_getMobileFolderPath(); $mobileFolder = $this->_getMobileFolderDir(); $requirements = new MotoRequirements(); $requirements->addValidator('file_writable', array( 'file' => $mobilePath . '/xml/', 'fail_message' => 'Error: SERVER_TEST_DIRECTORY_WRITE_ERROR' . self::PARAMETERS_DILIMITER . '"/' . $mobileFolder . '/xml/"
						 SERVER_TEST_DIRECTORY_WRITE_ERROR_DETAILS' )); $requirements->addValidator('file_writable', array( 'file' => $mobilePath . '/xml/modules/', 'fail_message' => 'Error: SERVER_TEST_DIRECTORY_WRITE_ERROR' . self::PARAMETERS_DILIMITER . '"/' . $mobileFolder . '/xml/modules/"
						 SERVER_TEST_DIRECTORY_WRITE_ERROR_DETAILS' )); $requirements->check(); if (!$requirements->isValid()) { $xml = $this->_generateErrorMessage($requirements->getMessages()); throw new Exception($xml); } } protected function _copyFile($from, $to, $rewrite = false) { if ($rewrite && file_exists($to)) { if (!@unlink($to)) { $errorMessage = $this->_generateErrorMessage('SERVER_TEST_DIRECTORY_WRITE_ERROR' . self::PARAMETERS_DILIMITER . MotoUtil::getClippedPath($to, MOTO_ROOT_DIR), 'MOBILE_SERVICES_CANT_DELETE_FILE'); throw new Exception($errorMessage); } } if (file_exists($to)) { return false; } $dir = dirname($to); MotoUtil::createDir($dir); if (!is_writable($dir)) { $errorMessage = $this->_generateErrorMessage('SERVER_TEST_DIRECTORY_WRITE_ERROR' . self::PARAMETERS_DILIMITER . MotoUtil::getClippedPath($to, MOTO_ROOT_DIR), 'SERVER_TEST_DIRECTORY_WRITE_ERROR_DETAILS'); throw new Exception($errorMessage); } return @copy($from, $to); } protected function _installMobileContentFromSource($sourceDir, $systemPrefix = '') { if (!is_dir($sourceDir)) { $errorMessage = $this->_generateErrorMessage('SERVER_TEST_DIRECTORY_READ_ERROR' . self::PARAMETERS_DILIMITER . MotoUtil::getClippedPath($sourceDir, MOTO_ROOT_DIR), 'SERVER_TEST_DIRECTORY_READ_ERROR_DETAILS'); throw new Exception($errorMessage); } $mobileDestinationPath = $this->_getMobileFolderPath(); $mobileFolder = $this->_getMobileFolderDir(); MotoUtil::recurse_clean($mobileDestinationPath . '/xml'); $options = array( 'path.exclude' => '.svn' ); $files = MotoUtil::scanDir($sourceDir, 'xml/modules', $options); $files[] = 'xml/content.xml'; $files[] = 'xml/settings.xml'; foreach($files as $file) { $this->_copyFile($sourceDir . $file, $mobileDestinationPath . $file, true); } $this->_copyFile($sourceDir . $systemPrefix . 'xml/system.xml', $mobileDestinationPath . 'xml/system.xml', true); $this->_updateMobileSystemDataProviders($mobileDestinationPath . 'xml/system.xml', $mobileFolder); $this->_updateMobileContentDataProviders($mobileDestinationPath . 'xml/content.xml', $mobileFolder); $this->_updateMobileSettings($mobileDestinationPath . 'xml/settings.xml'); return true; } protected function _updateMobileContentDataProviders($filename, $mobileFolder) { if (!file_exists($filename)) return false; $dom = new MotoXML($filename); $root = MotoXML::findOneByXPath('.', $dom); $nodes = MotoXML::findByXPath('//*[@isDataProvider="true"]', $root); if ($nodes == null) return; foreach($nodes as $node) { if (preg_match('/^[\/]?([a-z]+)\/(.*)$/', $node->nodeValue, $match)) { if ($match[1] == 'xml') $node->nodeValue = $mobileFolder . '/' . ltrim($node->nodeValue, '/'); else $node->nodeValue = $mobileFolder . '/' . ltrim($match[2], '/'); } } MotoXML::putXML($dom, $filename); } protected function _updateMobileSystemDataProviders($filename, $mobileFolder) { if (!file_exists($filename)) return false; $dom = new MotoXML($filename); $root = MotoXML::findOneByXPath('.', $dom); $node = MotoXML::findOneByXPath('./modulesSection/modulesDataProviders', $root); if (!$node) return false; $dataProviders = ModuleDataProviderVO::findAll($node); if (empty($dataProviders) || !is_array($dataProviders)) return false; $parent = $node->parentNode; $parent->removeChild($node); $node = new DOMElement(MotoSystem::MODULES_DATAPROVIDERS); $parent->appendChild($node); $maxId = 0; foreach($dataProviders as $i => $dataProvider) { $maxId ++; $dataProvider->id = $maxId; if (is_array($dataProvider->sources)) { for($i = 0, $icount = count($dataProvider->sources); $i < $icount; $i++) { $source = $dataProvider->sources[$i]; if (preg_match('/^[\/]?([a-z]+)\/(.*)$/', $source->value, $match)) { if ($match[1] == 'xml') $source->value = $mobileFolder . '/' . ltrim($source->value, '/'); else $source->value = $mobileFolder . '/' . ltrim($match[2], '/'); } } } $dataProvider->saveDomElement($node->appendChild(new DOMElement('dataProvider'))); } $node->setAttribute('maxId', $maxId ); $node->setAttribute('modificationDate', time()); MotoXML::putXML($dom, $filename); } protected function _generateErrorMessage($messages = array(), $details = '') { if (!is_array($messages)) { $messages = array( array('error', $messages, $details) ); } ob_start(); echo '<?xml version="1.0" encoding="utf-8"?>'; ?>
<response>
  <serverIsValid>false</serverIsValid>
  <errors>
    <?php foreach ($messages as $message): ?>
      <error>
        <type><?php echo $message[0]; ?></type>
        <message><?php echo $message[1]; ?></message>
        <details><?php echo $message[2]; ?></details>
      </error>
    <?php endforeach; ?>
  </errors>
</response><?php
 $xml = ob_get_clean(); return $xml; } public function mobileIsActive() { $responseVO = new ResponseVO(); try { $this->_initMobileServices(); $mobilePath = $this->_getMobileFolderPath(); $responseVO->result = file_exists($mobilePath . '/xml/content.xml') && filesize($mobilePath . '/xml/content.xml'); } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function createMobileFromBlank() { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $this->_initMobileServices(); $this->_preCheckMobileServices(); $sourceDir = $this->_mobileTemplateFolder . self::MOBILE_BLANK_DIR . '/'; $this->_installMobileContentFromSource($sourceDir); } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function createMobileFromTemplate() { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $this->_initMobileServices(); $this->_preCheckMobileServices(); $sourceDir = $this->_mobileTemplateFolder . self::MOBILE_TEMPLATE_DIR . '/'; $this->_installMobileContentFromSource($sourceDir); } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function createMobileFromWebsite() { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $this->_initMobileServices(); $this->_preCheckMobileServices(); $sourceDir = MOTO_ROOT_DIR . '/'; $this->_installMobileContentFromSource($sourceDir, 'admin/'); $this->_changeMobileWebsiteDimension(self::MOBILE_WEBSITE_WIDTH, self::MOBILE_WEBSITE_HEIGHT); } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } protected function _changeMobileWebsiteDimension($width, $height) { $mobilePath = $this->_getMobileFolderPath(); $contentFilename = $mobilePath . '/xml/content.xml'; if (!file_exists($contentFilename)) { $errorMessage = $this->_generateErrorMessage('SERVER_TEST_DIRECTORY_READ_ERROR' . self::PARAMETERS_DILIMITER . MotoUtil::getClippedPath($contentFilename, MOTO_ROOT_DIR), 'SERVER_TEST_DIRECTORY_READ_ERROR_DETAILS'); throw new Exception($errorMessage); } $dom = new MotoXML($contentFilename); $root = MotoXML::findOneByXPath('.', $dom); $websiteNode = MotoXML::findOneByXPath('./website', $root); if ($websiteNode == null) { return false; } $websiteNode->setAttribute('width', $width); $websiteNode->setAttribute('height', $height); MotoXML::putXML($dom, $contentFilename); return true; } protected function _updateMobileSettings() { $mobilePath = $this->_getMobileFolderPath(); $settingsFilename = $mobilePath . '/xml/settings.xml'; if (!file_exists($settingsFilename)) { $errorMessage = $this->_generateErrorMessage('SERVER_TEST_DIRECTORY_READ_ERROR' . self::PARAMETERS_DILIMITER . MotoUtil::getClippedPath($settingsFilename, MOTO_ROOT_DIR), 'SERVER_TEST_DIRECTORY_READ_ERROR_DETAILS'); throw new Exception($errorMessage); } $dom = new MotoXML($settingsFilename); $root = MotoXML::findOneByXPath('.', $dom); $optionNodes = MotoXML::findByXPath('./configuration/option', $root); if ($optionNodes == null) { return false; } foreach($optionNodes as $optionNode) { $name = $optionNode->getAttribute('name'); switch($optionNode->getAttribute('name')) { case 'redirectToMobile': case 'mobileVersionIsCreated': case 'showCustomBlockForNonFans': case 'nonFansCustomBlockType': case 'nonFansCustomBlockCode': case 'facebookAppId': case 'facebookAppSecret': $optionNode->parentNode->removeChild($optionNode); break; case 'underConstruction': $optionNode->nodeValue = ''; $optionNode->appendChild($root->ownerDocument->createCDATASection('false')); break; case 'underConstructionTheme': case 'underConstructionMessage': $optionNode->nodeValue = ''; $optionNode->appendChild($root->ownerDocument->createCDATASection('')); break; } } MotoXML::putXML($dom, $settingsFilename); return true; } public function saveControlPanelConfiguration($configuration) { $responseVO = new ResponseVO(); $statusVO = new StatusVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $dom = MotoXML::getXML(CONTROL_PANEL_CONFIGURATION); } catch (Exception $e) { $statusVO->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $statusVO->message = $e->getMessage(); $responseVO->result = NULL; $responseVO->status = $statusVO; return $responseVO; } $itemsList = $dom->getElementsByTagName(self::CONFIGURATION_ITEM); foreach ($itemsList as $item) { $itemName = $item->getAttribute(self::CONFIGURATION_ITEM_NAME); if (isset($configuration->$itemName)) { $item->nodeValue = ''; $item->appendChild($item->ownerDocument->createCDATASection( (string) $configuration->$itemName)); if (strtolower($itemName) == 'welcomescreen') { try { $value = $configuration->$itemName; $assetsDom = MotoXML::getXML(CONTROL_PANEL_ASSETS); $nodes = MotoXML::findByXPath('.//asset[@id="contentIcon" or @id="helpIcon" or @id="preferencesIcon" or @id="structureIcon" or @id="wizardIcon"]', $assetsDom); if ($nodes != null) { foreach($nodes as $node) $node->setAttribute('enabled', $value); } MotoXML::putXML($assetsDom, CONTROL_PANEL_ASSETS, false); } catch (Exception $e){} } } } try { MotoXML::putXML($dom, CONTROL_PANEL_CONFIGURATION, false); } catch (Exception $e) { $statusVO->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $statusVO->message = $e->getMessage(); $responseVO->result = NULL; $responseVO->status = $statusVO; return $responseVO; } $statusVO->status = StatusEnum::SUCCESS; $responseVO->result = NULL; $responseVO->status = $statusVO; return $responseVO; } public function sendFeedback($userName, $message) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; $responseVO->status->message = StatusMessagesEnum::MAIL_SUCCESSFULLY_SENT; return $responseVO; } public function generateSiteMap($options = array()) { AbstractVO::setDefaultOption('PageVO.loaderElements', true); AbstractVO::setDefaultOption('PopupVO.loaderElements', true); $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } try { $timer = array(microtime(1)); if (isset($options["url"]) && $options["url"] != "") { if (preg_match("/^(.*[\/])([^\.]*)\.swf/i", $options["url"], $match)) { $options["url"] = dirname($match[1]); } } else { $protocol = "http"; if (isset($_SERVER["SERVER_PROTOCOL"]) && $_SERVER["SERVER_PROTOCOL"] !="" ) { if (preg_match("/^([^\/]*)\//i", $_SERVER["SERVER_PROTOCOL"], $regs)) { $protocol = strtolower($regs[1]); } } $protocol .= "://"; $server = ( ( isset($_SERVER["SERVER_NAME"])&& $_SERVER["SERVER_NAME"] != "") && preg_match("/[a-z]+/i", $_SERVER["SERVER_NAME"]) ? $_SERVER["SERVER_NAME"] : ( isset($_SERVER["HTTP_HOST"])&& $_SERVER["HTTP_HOST"] != "") && preg_match("/[a-z]+/i", $_SERVER["HTTP_HOST"]) ? $_SERVER["HTTP_HOST"] : null ); $options["url"] = $protocol . MotoUtil::replaceSlashes($server . "/" . MOTO_ROOT_URL); } $options["url"] = rtrim($options["url"], '/'); $content = MotoXML::create(CONTENT_RESOURSE_PATH); $sitemap = array(); $clicks = new Moto_Html_ClicksVO($content); foreach($clicks->mapUrl as $url => $page) { if (!$page->noIndex && !$page->noFollow) { $sitemap[md5($page->url)] = $options["url"] . '/' . (defined("URL_BASED_SEO_KEY") && URL_BASED_SEO_KEY == "page" ? 'index.php?page=' : '') . $page->url; } } $timer[] = microtime(1) - $timer[0]; $dom = new MotoXML(); $urlset = new DOMElement("urlset"); $dom->appendChild($urlset); $urlset->setAttribute("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9"); $urlset->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance"); $urlset->setAttribute("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"); foreach($sitemap as $link) { $url = new DOMElement("url"); $urlset->appendchild($url); $url->appendChild(new DOMElement('loc'))->nodeValue = str_replace ( array ( '&', '"', "'", '<', '>' ), array ( '&amp;' , '&quot;', '&apos;' , '&lt;' , '&gt;' ), $link ); } MotoXML::putXML($dom, MOTO_ROOT_DIR . "/sitemap.xml"); $result = array(); $result["timer"] = microtime(1) - $timer[0]; $result["numberLinks"] = count($sitemap); $result["filesize"] = filesize(MOTO_ROOT_DIR . "/sitemap.xml"); $result["filename"] = "./../sitemap.xml"; $responseVO->result = $result; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveCompressedXML($xmlResourcePath, $encodedData) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->status = new StatusVO(); $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { if ( !defined('ENCODED_CONTENT_RESOURSE_PATH') || strpos(ENCODED_CONTENT_RESOURSE_PATH, '.gz') > 0 || !defined('ENCODED_STRUCTURE_RESOURSE_PATH') || strpos(ENCODED_STRUCTURE_RESOURSE_PATH, '.gz') > 0 ) { $filename = MOTO_ROOT_DIR . '/config.xml'; $dom = new MotoXML($filename); $root = MotoXML::findOneByXPath('.', $dom); if ($root != null) { $nodes = array( 'ENCODED_CONTENT_RESOURSE_PATH' => 'xml/content.xmlz', 'ENCODED_STRUCTURE_RESOURSE_PATH' => 'xml/structure.xmlz', ); foreach($nodes as $name => $value) { $node = MotoXML::findOneByXPath('./item[@name="'.$name.'"]', $root); if ($node == null) { $node = new DOMElement('item'); $root->appendChild($node); $node->setAttribute('name', $name); } $node->nodeValue = ''; $node->appendChild($root->ownerDocument->createCDATASection($value)); } } $dom->save($filename); } $user = new UserService(); if (!$user->isAuthenticated()->status->status) { MotoLog::getInstance()->err('Access denied.'); throw new Exception('Access denied.'); } if ($xmlResourcePath && $encodedData) { if ($xmlResourcePath == 'xml/content.xml.gz') $xmlResourcePath = 'xml/content.xmlz'; if ($xmlResourcePath == 'xml/structure.xml.gz') $xmlResourcePath = 'xml/structure.xmlz'; $file = MOTO_ROOT_DIR . '/' . $xmlResourcePath; $dir = dirname($file); MotoUtil::createDir($dir); if (!is_dir($dir) || !is_writable($dir)) throw new Exception('Directory is not writable.'); file_put_contents($file, $encodedData); MotoUtil::fixFilePermission($file); ConfigurationService::changeKey('loadEncodedData', 'true'); $responseVO->result = true; $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } }