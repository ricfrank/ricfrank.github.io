<?php
 require_once 'Zend/Filter/Interface.php'; require_once 'MotoUtil.php'; class MotoFilterFileCategorize implements Zend_Filter_Interface { protected $_categories = array(); protected $_rootDir = ''; public function __construct($options, $rootDir = '') { $this->_rootDir = $rootDir; if ($this->_rootDir == '') $this->_rootDir = MOTO_ROOT_DIR; if ($options instanceof Zend_Config) { $options = $options->toArray(); } elseif (!is_array($options)) { require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception('Invalid options argument provided to filter'); } $this->setCategory($options); } public function filter($value) { if (!file_exists($value)) { require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception("File '$value' not found"); } $tmp = explode('.', $value); $ext = strtolower(end($tmp)); if (empty($this->_categories[$ext])) { return $value; } $file = $this->_categories[$ext]; $file['source'] = str_replace('\\', '/', $value); $file['target'] = $file['target'] . '/' . MotoUtil::basename($value); if ($file['source'] == $file['target']) { return $value; } if ($file['mkdir']) { MotoUtil::createDir( dirname($file['target']) ); } if ( isset($file['overwrite']) && $file['overwrite'] === true && file_exists($file['target']) ) { @unlink($file['target']); } if (file_exists($file['target'])) { $file['target'] = $this->_rootDir . "/" . MotoUtil::fileUniqueName( MotoUtil::getClippedPath(MotoUtil::replaceSlashes($file['target']), $this->_rootDir), '_', $this->_rootDir ); } if (file_exists($file['target'])) { require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception(sprintf("File '%s' could not be renamed. It already exists.", $value)); } $result = rename($file['source'], $file['target']); if ($result === true) { return $file['target']; } require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception(sprintf("File '%s' could not be renamed. An error occured while processing the file.", $value)); } public function setCategory($options) { $this->_category = array(); $this->addCategory($options); return $this; } public function addCategory($options) { if (!is_array($options)) { require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception ('Invalid options argument provided to filter'); } $category = array(); foreach ($options as $key => $value) { if (is_numeric($key) && is_array($value)) { $this->addCategory($value); continue; } switch ($key) { case 'type': if (is_string($value)) { $value = explode(',', $value); } else if (!is_array($value)) { require_once 'Zend/Filter/Exception.php'; throw new Zend_Filter_Exception('Invalid options argument provided to filter'); } $category['type'] = $value; break; case 'target': $category['target'] = $value; break; case 'overwrite': $category['overwrite'] = $value; break; case 'mkdir': $category['mkdir'] = $value; break; } } if (empty($category) || empty($category['type']) || empty($category['target'])) { return $this; } foreach ($category['type'] as $type) { if (empty($type) || !is_string($type)) { continue; } $this->_categories[trim($type)] = array( 'target' => (string) str_replace('\\', '/', dirname($category['target'] . '/.')), 'overwrite' => (boolean) isset($category['overwrite']) ? $category['overwrite'] : false, 'mkdir' => (boolean) isset($category['mkdir']) ? $category['mkdir'] : false ); } return $this; } }