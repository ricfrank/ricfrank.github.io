<?php
 class MotoForm { const DEFAULT_TEMPLATE_NAME = 'checkoutitem'; const ERROR_BAD_REQUEST = 'ERROR_BAD_REQUEST'; public $config = null; public $structure = null; protected $_options = array( 'templatePath' => 'templates/mailform', ); protected $_error = null; protected $_result = null; protected $_message = ''; protected $_data = null; protected $_extra = null; protected $_files = null; protected $_inp = null; protected $_moduleVO = null; function __construct($post = null) { if ($post == null) $post = $_POST; $this->_init($post); } protected function _init($post) { $this->_inp = new MotoFormData($post); $this->_error = new MotoFormData(); $this->_result = new MotoFormData(array('status'=>true,'message'=>'')); $this->config = new MotoFormData(); $this->structure = new MotoFormData(); $this->setOption('pathConfiguration', MOTO_ROOT_DIR . '/' . $this->_inp->path_configuration); $this->_loadConfiguration(); $this->_checkConfiguration(); $this->setOption('pathStructure', MOTO_ROOT_DIR . '/' . $this->_inp->path_structure); $this->_loadStructure(); $this->_checkStructure(); $this->setData($this->_inp->data); $this->setExtra($this->_inp->extra); } protected function _loadConfiguration($filename = '') { if ($filename == '') $filename = $this->getOption('pathConfiguration'); if ( !file_exists( $filename )) { throw new Exception('FILE_CONFIGURATION_NOT_EXISTS', 10); } $dom = new MotoXML( $filename ); $nodes = MotoXML::findByXPath('./*', $dom); $data = array(); if ($nodes != null) { foreach($nodes as $node) { if ($node->childNodes->length < 2 ) { $data[$node->nodeName] = $node->nodeValue; } } } $this->config->setFromArray($data); } protected function _checkConfiguration() { if ($this->config->emailTo == '' || $this->config->emailFromSource == '') { throw new Exception('BAD_CONFIGURATION', 11); } } protected function _loadStructure() { $widget_id = $this->_inp->widget_id; if (preg_match('/_([0-9]+)$/', $widget_id, $m)) { $widget_id = $m[1]; } $widget_id = intval($widget_id); if ($widget_id < 1) { throw new Exception(self::ERROR_BAD_REQUEST, 30); } $xml = MotoXML::create(CONTENT_RESOURSE_PATH); $query = './/modules/module[@id=' . $widget_id . ']'; $node = MotoXML::findOneByXPath($query, $xml); if ($node == null) { throw new Exception(self::ERROR_BAD_REQUEST, 31); } $options = array( 'jsEnabled' => true, ); AbstractVO::setDefaultOptions($options); AbstractModuleType::getInstance()->load(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY); $this->_moduleVO = new ModuleVO($node); if (!isset($this->_moduleVO->data->items->formItems) || $this->_moduleVO->data->items->formItems == null) { throw new Exception(self::ERROR_BAD_REQUEST, 32); } usort($this->_moduleVO->data->items->formItems, array($this, '_sortMailOrder')); } protected function _sortMailOrder($a, $b) { if ($a->mailOrder == $b->mailOrder) return 0; return ($a->mailOrder < $b->mailOrder) ? -1 : 1; } protected function _checkStructure() { } function setData($data) { if (!is_array($data)) { throw new Exception(self::ERROR_BAD_REQUEST, 20); } foreach($this->_moduleVO->data->items->formItems as $i => $item) { if (!empty($this->_data[$item->label])) continue; $value = ''; switch($item->type) { case 'checkBox': if (isset($data[$item->label])) $value = $this->config->get('checkBoxSelected'); else $value = $this->config->get('checkBoxUnselected'); break; case 'radioButton': if (isset($data[$item->label])) $value = $data[$item->label]; else $value = $this->config->get('radioButtonUnselected'); break; case 'select': $value = (isset($data[$item->label]) ? $data[$item->label] : $item->textToShow); break; default: $value = (isset($data[$item->label]) ? $data[$item->label] : ''); break; } $this->_data[$item->label] = $value; } } function setData0($data) { if (!is_array($data)) { throw new Exception(self::ERROR_BAD_REQUEST, 20); } ksort($data); $files = array(); foreach ($data as $key => $value) { if (preg_match('/^file:(.*)$/', $key, $match)) { if (!preg_match('/^[a-z0-9\-\_]+$/i', $match[1])) { continue; } $filename = MOTO_ADMIN_DIR . '/_tmp/' . $match[1]; if (file_exists($filename)) { $files[$match[1]] = array('path' => $filename, 'filename' => $value); } continue; } $key = preg_replace('/^([0-9]*:)/i', '', $key); $this->_data[$key] = $value; } foreach($this->_inp->toArray() as $key => $value) { if (preg_match('/^file:(.*)$/', $key, $match)) { if (!preg_match('/^[a-z0-9\-\_]+$/i', $match[1])) { continue; } $filename = MOTO_ADMIN_DIR . '/_tmp/' . $match[1]; if (file_exists($filename)) { $files[$match[1]] = array('path' => $filename, 'filename' => $value); } continue; } } $this->_files = $files; } function setExtra($data) { if (is_string($data)) { if (strlen($data) < 3) { return null; } if (!preg_match('/^\{\\"(.*)\}$/', $data)) $data = stripslashes($data); $this->_extra = @json_decode($data, true); if ($this->_extra == null) { throw new Exception('EXTRA_BAD_JSON', 30); } } elseif (is_array($data)) { $this->_extra = $data; } else { throw new Exception('EXTRA_BAD_FORMAT', 31); } $template = strtolower(( isset($this->_extra['chekoutTemplate']) ? $this->_extra['chekoutTemplate'] : self::DEFAULT_TEMPLATE_NAME)); if (!preg_match('/^[a-z0-9\-\_]+$/i', $template) || !file_exists( $this->_getTemplateFileName($template) )) { $template = self::DEFAULT_TEMPLATE_NAME; } $this->_extra['chekoutTemplate'] = $template; if (!file_exists( $this->_getTemplateFileName($template) )) { throw new Exception ('FILE_TEMPLATE_NOT_EXISTS', 32); } } protected function _getTemplateFileName($template, $isPlain = false) { return MOTO_ADMIN_DIR . '/' . $this->getOption('templatePath') . '/' . $template . '.' . ($isPlain ? 'plain' : 'html') . '.php'; } function _getFrom() { $from = $this->config->emailFromSource; if ( (int) $from > 0 ) $from = (isset($_POST['mail_from']) ? $_POST['mail_from'] : ''); if ($from == '') throw new Exception('from not setted'); return $from; } function dispatch() { if (!is_array($this->_data)) throw new Exception (self::ERROR_BAD_REQUEST, 3); $mail = new Zend_Mail('UTF-8'); $from = $this->_getFrom(); $mail->setFrom( $from ); $this->config->emailTo = str_replace(array(' ', ';'), ',', $this->config->emailTo); $this->config->emailTo = trim(preg_replace('/([,]+)/', ',', $this->config->emailTo), ' ,'); $this->config->emailTo = explode(',', $this->config->emailTo); $mail->addTo( $this->config->emailTo ); $mail->setSubject( $this->config->get('subjectSource', '') ); if ($this->config->plainText == 'false') { $bodyHtml = $this->_getBodyHtml(); $mail->setBodyHtml($bodyHtml); } $bodyPlain = $this->_getBodyPlainText(); $mail->setBodyText($bodyPlain); if (count($this->_files) > 0) { foreach($this->_files as $file) { $at = new Zend_Mime_Part(file_get_contents($file['path'])); $at->filename = $file['filename']; $at->encoding = Zend_Mime::ENCODING_BASE64; $at->disposition = Zend_Mime::DISPOSITION_ATTACHMENT; $at->id = 'cid_' . md5($file['path']); $mail->addAttachment($at); } } for($i = 0; $i < 2; $i++) { try { $transport = $this->_getMailTransport($i); $mail->send($transport); break; } catch (Exception $e) { if ($transport != null) { try { $transport->getConnection()->quit(); } catch (Exception $e) {} continue; } $this->_result->status = false; $this->_result->message = $e->getMessage(); $this->_result->code = 13; break; } } if (count($this->_files) > 0) { reset($this->_files); foreach($this->_files as $file) { if (isset($file['path']) && file_exists($file['path'])) @unlink($file['path']); } } return $this->_result; } function getResult() { return $this->_result->toArray(); } function getMessage() { return $this->_result->message; } function getStatus() { return $this->_result->status; } protected function _getMailTransport($skipUseName = false) { $transport = null; if ($this->config->useSmtp == 'true') { try { $params = array(); if ( $this->config->get('smtpPort', 0) != 0 ) { $params['port'] = $this->config->get('smtpPort', 25); } if ( $this->config->get('smtpAuth', 'none') != 'none' && $this->config->get('smtpAuth', 'none') != '' ) { if (!$skipUseName) $params['name'] = $this->config->get('smtpLogin', ''); $params['auth'] = $this->config->get('smtpAuth', 'login'); $params['username'] = $this->config->get('smtpLogin', ''); $params['password'] = ''; if ( $this->config->get('smtpPassword', '') != '' ) { $c = new ContentService(); $p = $c->getProductInfo(); $params['password'] = MotoUtil::decrypt($this->config->get('smtpPassword', ''), $p['product_id']); } } if ( $this->config->get('smtpSecure', 'none') != 'none' && $this->config->get('smtpSecure', 'none') != '' ) { $params['ssl'] = $this->config->get('smtpSecure', 'none'); if ($params['ssl'] == 'tsl') $params['ssl'] = 'tls'; } $transport = new Zend_Mail_Transport_Smtp($this->config->get('smtpServer', 'localhost'), $params); } catch(Exception $e) { throw new Exception('BAD_WORK_WITH_SMTP', 40); } } return $transport; } function _getBodyHtml() { $body = ''; foreach ($this->_data as $key => $value) { $body .= '<b>'.str_replace('_',' ',$key).'</b>:<br/>'; $body .= '' . htmlspecialchars ( stripslashes($value) ) . '<br/>'; } if (is_array($this->_extra)) { $body = $this->_renderTemplate($body); } return $body; } function _getBodyPlainText() { $body = ''; foreach ($this->_data as $key => $value) { if ($this->_extra != null) $body .= '    '; $body .= str_replace('_', ' ', $key) . ' : ' . htmlspecialchars ( stripslashes($value) ) . "\n" ; } if (is_array($this->_extra)) { $body = $this->_renderTemplate($body, true); } return $body; } function _renderTemplate($mail_body, $isPlain = false) { $template = strtolower(( isset($this->_extra['chekoutTemplate']) ? $this->_extra['chekoutTemplate'] : self::DEFAULT_TEMPLATE_NAME)); $filename = $this->_getTemplateFileName($template, $isPlain); if (!file_exists($filename)) { echo "$filename not exists\n"; return $mail_body; } $level = error_reporting(); error_reporting(0); try { $websiteUrl = MOTO_ROOT_URL; extract($this->_extra, EXTR_PREFIX_ALL, 'order'); extract($this->config->toArray(), EXTR_PREFIX_ALL, 'config'); ob_start(); include $filename; $body = ob_get_clean(); } catch (Exception $e) { $this->_error->status = true; } error_reporting($level); return $body; } function setPathConfiguration($filename) { $this->setOption('pathConfiguration', $filename); $this->_loadConfiguration(); } function setPathStructure($filename) { $this->setOption('pathStructure', $filename); $this->_loadStructure(); } function isError() { return $this->_error; } function setOption($name, $value) { $this->_options[$name] = $value; } function getOption($name, $default = null) { return ( isset($this->_options[$name]) ? $this->_options[$name] : $default); } } class MotoFormData { protected $_data = array(); function __construct($data = null) { if (is_array($data)) $this->setFromArray($data); } function __set($name, $value) { $this->_data[$name] = $value; } function __get($name) { return ( isset($this->_data[$name]) ? $this->_data[$name] : ''); } function __isset($name) { return isset($this->_data[$name]); } function get($name, $default = null) { return ( isset($this->_data[$name]) ? $this->_data[$name] : $default); } function setFromArray($data) { $this->_data = (array) $data; } function toArray() { return $this->_data; } }