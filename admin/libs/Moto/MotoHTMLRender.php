<?php
class MotoHTMLRender { private $content = null; private $structure = null; private $config = null; private $holders = null; private $modules = null; private $page = null; private $isPage = null; private $section = ''; private $slots = array(); private $baseUrl = ''; private $isDetectedMobile = null; private $cache = null; private $renders = array(); public function __construct($content, $structure, $config) { $this->content = $content; $this->structure = $structure; $this->config = $config; $this->loadSlotStructure(); $this->loadModuleStructure(); $this->isDetectedMobile = MotoUtil::isDetectedMobile(); $this->cache = MotoCache::getInstance(); } function action2url($action) { $result = ''; if (preg_match("/((event):(switchPage|getURL|openPopup|closePopup|mailTo))[;]?((url|page|id|email)=([^;\"]*))?[;]?((window)=([^;\"]*))?[;]?((rel)=([^;\"]*))?[;]?([^\"]*)/i", $action, $regs)) { $link["event"] = $regs[3]; $link["url"] = $regs[6]; $link["target"] = ($regs[9] != "_self" ? $regs[9] : ""); $link["rel"] = $regs[12]; $link["title"] = ""; if ($link["event"] == "getURL") { $link["url"] = urldecode($regs[6]); } elseif ($link["event"] == "mailTo") { $link["url"] = 'mailto:' . urldecode($regs[6]); } elseif ($link["event"] == "switchPage") { $page = PageVO::findById($link["url"], $this->content); if (!is_null($page)) { $link["url"] = MOTO_ROOT_URL . "/" . $page->url; if (defined("URL_BASED_SEO_KEY") && URL_BASED_SEO_KEY == "page") $link["url"] = MOTO_ROOT_URL . "/index.php?page=" . $page->url . '#/' . $page->url . '/'; } else $link["url"] = "#"; $link["url"] = preg_replace("/[\/\\\]+/", "/", $link["url"]); } elseif ($link["event"] == "openPopup") { $page = PopupVO::findById($link["url"], $this->content); if (!is_null($page)) { $link["url"] = MOTO_ROOT_URL . "/" . $page->url; if (defined("URL_BASED_SEO_KEY") && URL_BASED_SEO_KEY == "page") $link["url"] = MOTO_ROOT_URL . "/index.php?page=" . $page->url . '#/' . $page->url . '/'; } else $link["url"] = "#"; $link["url"] = preg_replace("/[\/\\\]+/", "/", $link["url"]); } $result = $link["link"] = '<a ' . ($link["url"] != "" ? 'href="' . $link["url"].'"' : '') .($link["rel"]!=""?' rel="'.$link["rel"].'" ':"") .($link["target"]!=""?' target="'.$link["target"].'" ':"") .">"; } return $result; } function _loadMenu($page) { return array(); } function loadPageData($page) { $output = ''; $section = strtolower(get_class($page)); $this->section = $section = substr($section, 0, strlen($section)-2); $this->isPage = ($section == 'page' ? true : false); $this->page = $page; $idCache = $section . '_' . $page->id; if ($this->isDetectedMobile) $idCache .= '_mobile'; if ($result = $this->cache->load($idCache)) { return $result; } $this->holders = $holders = $this->loadHolders(); $objs0 = $this->getSlotObjectWithoutModule($holders); $objs1 = $this->getSlotObjectWithModule($holders); if (is_array($objs0) && is_array($objs1)) $objs = array_merge($objs0, $objs1); else { $objs = (is_array($objs0) ? $objs0 : (is_array($objs1) ? $objs0 : array() ) ); } $objs = $this->sortObjs($objs); unset($objs0); unset($objs1); $result = $this->renderHtml($objs); $tags = array( $section, $section . '_' . $page->id ); if ($this->isPage && isset($page->pageType) && isset($page->pageType->layoutType)) $tags[] = 'layout_' . $page->pageType->layoutType; $res = $this->cache->save($result, $idCache, $tags); return $result; } function renderHtml($objs) { $html = ''; foreach($objs as $obj) { switch($obj->type) { case 'image': $html .= $this->_renderImage($obj); break; case 'htmlText': if (isset($obj->style) && $obj->style != '') $obj->data = '<' . $obj->style . '>' . $obj->data . '</' . $obj->style . '>'; if (isset($obj->click) && $obj->click != '') $obj->data = '<A HREF="event:' . $obj->click . '">' . $obj->data . '</A>'; $html .= $this->_renderHtmlText($obj); break; case 'module': $html .= $this->_renderModule($obj); break; } } return $html; } function _renderImage($obj) { $html = ''; $html .= '<div'; $html .= ' class="image"'; $html .= '>'; $html .= $this->createImgTag($obj->data, $obj->click); $html .= '</div>'; $html .= "\n"; return $html; } function _renderHtmlText($obj) { $html = ''; if ($this->isDetectedMobile) { $html .= $this->clearHtmlTextMobile($obj->data, array('class'=>'htmlText')); } else { $html .= $this->clearHtmlTextMobile($obj->data, array( 'class' => 'htmlText', 'allow_line_height' => false, ) ); } return $html; } function _renderModule($obj) { $externalRender = null; if (isset($this->modules[$obj->moduleType])) { if (!isset($this->renders[$obj->moduleType])) { $this->renders[$obj->moduleType] = null; $file = MOTO_ADMIN_DIR . '/' . $this->modules[$obj->moduleType]['dir'] . '/' . ucfirst($this->modules[$obj->moduleType]['type']) . 'Render.php'; if (file_exists($file)) { require_once $file; $class = $this->modules[$obj->moduleType]['type'] . 'Render'; if (class_exists($class, false)) $this->renders[$obj->moduleType] = new $class($this); } else { } } $externalRender = $this->renders[$obj->moduleType]; } if (!is_null($externalRender)) { $_html = $externalRender->renderModule($obj->id); } else { $_html = $this->renderHtml($obj->data); } $html = ''; if ($_html != '') { $html = '<div class="module">' . $_html . '</div>' . "\n"; } return $html; } public function optimizeHtmlText($str, $options = array(' LETTERSPACING="0"' , ' KERNING="0"')) { for($i = 0; $i < count($options); $i++) { $str = preg_replace("/" . str_replace('"', '\\"', $options[$i]) . "/i", "" , $str); } return $str; } public function clearHtmlTextMobile($html, $param = array()) { if (!isset($param['initTag'])) $param['initTag'] = 'div'; if (!isset($param['allow_line_height'])) $param['allow_line_height'] = true; $_html = $html = $this->optimizeHtmlText($html); if ($split = preg_split("/<TEXTFORMAT/i", $html)) { $html = ''; foreach($split as $part) if ($part != '') { $add = true; $div = '<' . $param['initTag'] . ' style="'; if (preg_match("/INDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'text-indent: ' . $style[1] . 'px; '; if (!$this->isDetectedMobile) if (preg_match("/LEADING=[\"\']([0-9]+)[\"\']/i", $part, $style)) if ($style[1]>2 && $param['allow_line_height']) $div .= 'line-height: ' . ($style[1]+4) . 'px; '; if (preg_match("/BLOCKINDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'padding-left: ' . $style[1] . 'px; '; $part = preg_replace("/^[ ]?[^<>]*>/i", '', $part); $div .= '"'; if (isset($param['class'])) $div .= ' class="' . $param['class'] . '" '; $div .= '>'; if (isset($param['trim']) && $param['trim'] && strip_tags($part) == '') $add = false; if ($add) $html .= $div . $part . '</' . $param['initTag'] . '>' . "\n"; } $html = preg_replace("/<\/TEXTFORMAT>/i", '', $html); } if (preg_match_all("/(<a[^>]*>)/i", $html, $match)) { foreach($match[1] as $a) { $html = str_replace($a, MotoFrontController::_prepareDataXml2Html($a), $html); } } if ($split = preg_split("/<font/i", $html)) { $html = ''; foreach($split as $part) { $color = ''; $class = ''; if ($html != '') $html .= '<font'; $style = ' style="'; if (preg_match("/^[^>]*color=[\'\"](#[a-f0-9]+)[\'\"][^>]*>/i", $part, $match)) { $style .= 'color:' . $match[1] . ';'; $color .= 'color:' . $match[1] . ';'; } if (preg_match("/^[^>]*face=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) { if ($class != '') $class .= ' '; $class .= str_replace(' ', '_', $match[1]); } if (preg_match("/^[^>]*size=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) { if ($this->isDetectedMobile) { if ($match[1] > 24) $match[1] = 24; else if ($match[1] < 14) $match[1] = 14; } else { if ($match[1] < 10) $match[1] = 10; } $style .= 'font-size:' . $match[1] . 'px;'; } $style .= '" '; if ($class != '') $style .= ' class="' . $class . '"'; $part = preg_replace("/^ ([^>]*>)/i", $style . '>', $part); if ($color != '') { $part = preg_replace("/(<a )/i", "<a " . ' style="' . $color . '" ', $part); } $html .= $part; } } $html = str_replace( array('</A>', '<P ', '</P>', ' ALIGN="LEFT"', ' ALIGN=', ), array('</a>', '<p ', '</p>', ' align="left"', ' align='), $html); $html = preg_replace('/<font /i', '<span ', $html); $html = preg_replace('/<\/font/i', '</span', $html); $html = preg_replace('/<br>/i', '<br />', $html); return $html; } public function clearHtmlText($html, $param = array()) { $_html = $html = $this->optimizeHtmlText($html); if ($split = preg_split("/<TEXTFORMAT/i", $html)) { $html = ''; foreach($split as $part) if ($part != '') { $div = '<div style="'; if (preg_match("/INDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'text-indent: ' . $style[1] . 'px; '; if (!$this->isDetectedMobile) if (preg_match("/LEADING=[\"\']([0-9]+)[\"\']/i", $part, $style)) if ($style[1]>2) $div .= 'line-height: ' . ($style[1]+4) . 'px; '; if (preg_match("/BLOCKINDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'padding-left: ' . $style[1] . 'px; '; $part = preg_replace("/^[ ]?[^<>]*>/i", '', $part); $div .= '"'; if (isset($param['class'])) $div .= ' class="' . $param['class'] . '" '; $div .= '>'; $html .= $div . $part . '</div>'."\n"; } $html = preg_replace("/<\/TEXTFORMAT>/i", '', $html); } if (preg_match_all("/(<a[^>]*>)/i", $html, $match)) { foreach($match[1] as $a) { $html = str_replace($a, MotoFrontController::_prepareDataXml2Html($a), $html); } } if ($split = preg_split("/<font/i", $html)) { $html = ''; foreach($split as $part) { $color = ''; if ($html != '') $html .= '<font'; $style = ' style="'; if (preg_match("/^[^>]*color=[\'\"](#[a-f0-9]+)[\'\"][^>]*>/i", $part, $match)) { $style .= 'color:' . $match[1] . ';'; $color .= 'color:' . $match[1] . ';'; } if (preg_match("/^[^>]*face=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'font-family:' . $match[1] . ';'; if (preg_match("/^[^>]*size=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) { if ($this->isDetectedMobile) { if ($match[1] > 24) $match[1] = 24; else if ($match[1] < 14) $match[1] = 14; } else { if ($match[1] < 10) $match[1] = 10; } $style .= 'font-size:' . $match[1] . 'px;'; } $style .= '" '; $part = preg_replace("/^ ([^>]*>)/i", $style . '>', $part); if ($color != '') { $part = preg_replace("/(<a )/i", "<a " . ' style="' . $color . '" ', $part); } $html .= $part; } } $html = str_replace( array('</A>', '<P ', '</P>', ' ALIGN="LEFT"', ' ALIGN=', ), array('</a>', '<p ', '</p>', ' align="left"', ' align='), $html); $html = preg_replace('/<font /i', '<span ', $html); $html = preg_replace('/<\/font/i', '</span', $html); return $html; } function createImgTag($src, $action = "", $options = array()) { $_options = MotoUtil::responseVOToArray(MediaLibraryService::getStaticMediaLibraryItemInfo($src)); foreach($_options as $key=>$value) if (!isset($options[$key])) $options[$key] = $value; if (isset($options["width"]) && isset($options["height"])) { if ($options["width"] > MotoFrontController::SEO_IMG_MAX_WIDTH) { $options["height"] = round(MotoFrontController::SEO_IMG_MAX_WIDTH * $options["height"] / $options["width"]); $options["width"] = MotoFrontController::SEO_IMG_MAX_WIDTH; } if ($options["height"] > MotoFrontController::SEO_IMG_MAX_HEIGHT) { $options["width"] = round(MotoFrontController::SEO_IMG_MAX_HEIGHT * $options["width"] / $options["height"]); $options["height"] = MotoFrontController::SEO_IMG_MAX_HEIGHT; } } $out = ""; $out .= '<img src="' . rtrim(MOTO_ROOT_URL , '/') . '/' . ltrim($src, '/') . '" '; if ( isset($options["alt"]) && $options["alt"] != "" && (!isset($options["title"]) || $options["title"] == "") ) $options["title"] = $options["alt"]; elseif ( isset($options["title"]) && $options["title"] != "" && (!isset($options["alt"]) || $options["alt"] == "") ) $options["alt"] = $options["title"]; if (isset($options["alt"]) && $options["alt"] != "") $out .= ' alt="' . htmlspecialchars($options["alt"]) . '" '; else $out .= ' alt="" '; if (isset($options["title"]) && $options["title"] != "") $out .= ' title="' . htmlspecialchars($options["title"]) . '" '; if (isset($options["width"]) && $options["width"]*1 > 0) $out .= ' width="' . $options["width"] . '" '; if (isset($options["height"]) && $options["height"]*1 > 0) $out .= ' height="' . $options["height"] . '" '; $out .= '/>'; if ($action != "") { $action = "<a href=\"event:" . $action . "\">"; $out = MotoFrontController::_prepareDataXml2Html($action) . $out . "</a>"; } return $out; } function sortObjs($objs) { $index = array(); $result = array(); foreach($objs as $i => $obj) { $_index = sprintf('%04d_%04d_%04d', $obj->y, $obj->x, $obj->depth); if (!isset($index[$_index])) $index[$_index] = array(); $index[$_index][] = $i; if ($obj->name == 'module') { $obj->data = $this->sortObjs($obj->data); } } ksort($index); foreach($index as $recs) { foreach($recs as $i) { $result[] = $objs[$i]; } } unset($index); unset($objs); return $result; } function fillObj($node, $type) { $obj = new stdClass(); $obj->holder = $obj->click = $obj->parent = $obj->depth = $obj->width = $obj->height = $obj->type = $obj->id = $obj->data = $obj->y = $obj->x = $obj->name = null; $link = null; $obj->parent = 'holder'; $obj->name = $type; switch($type) { case 'item': $obj->name = 'slot'; $link = $node->parentNode->parentNode; $obj->id = $node->parentNode->parentNode->getAttribute('id'); $obj->holder = $node->parentNode->parentNode->getAttribute('holder'); $obj->x = $node->parentNode->parentNode->getAttribute('x'); $obj->y = $node->parentNode->parentNode->getAttribute('y'); $obj->click = $node->parentNode->parentNode->getAttribute('click'); $obj->height = $node->parentNode->parentNode->getAttribute('height'); $obj->click = $node->parentNode->parentNode->getAttribute('click'); $obj->depth = $node->parentNode->parentNode->getAttribute('depth'); $obj->style = $node->parentNode->parentNode->getAttribute('style'); $obj->type = $this->slots[$node->parentNode->parentNode->getAttribute('slotType')][$node->getAttribute('propertyType')]; $obj->data = $node->nodeValue; break; case 'object': $link = $node; $obj->id = $node->getAttribute('id'); $obj->holder = $node->getAttribute('holder'); $obj->x = $node->getAttribute('x'); $obj->y = $node->getAttribute('y'); $obj->data = $this->getChildValue($node, 'data'); $obj->width = $node->getAttribute('width'); $obj->height = $node->getAttribute('height'); $obj->depth = $node->getAttribute('depth'); $obj->type = $node->getAttribute('type'); $obj->style = $node->getAttribute('style'); break; case 'module': $obj->id = $node->getAttribute('id'); $obj->holder = $node->getAttribute('holder'); $obj->width = $node->getAttribute('width'); $obj->height = $node->getAttribute('height'); $obj->x = $node->getAttribute('x'); $obj->y = $node->getAttribute('y'); $obj->depth = $node->getAttribute('depth'); $obj->moduleType = $node->getAttribute('moduleType'); $obj->data = $this->_getSlotObjectWithModule($node, $this->holders); $obj->type = 'module'; $obj->style = $node->getAttribute('style'); break; } if (1==2) { $c = $this->getParent($node, 'page|popup|website|layout'); if (!is_null($c)) { echo "<br>"; echo $node->nodeName . ' ' . $node->getAttribute('id') . ' '; echo $c->nodeName . ' ' . $c->getAttribute('id') . ' '; } } return $obj; } function _getSlotObjectWithModule($moduleNode, $holders) { $query = $this->createQuery($moduleNode->getAttribute('id')); $objs = array(); $nodes = MotoXML::findByXPath( $query , $moduleNode); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { $obj = $this->fillObj($node, $node->nodeName); $obj->parent = 'module'; $objs[] = $obj; } } return $objs; } function getSlotObjectWithModule($holders) { $idQuery = ''; $nodes = MotoXML::findByXPath( '//module[@type="richContent" or @type="infoModule" or @type="simpleGallery" or @type="simpleMediaPlayer"]' , $this->structure); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { if ($idQuery != '') $idQuery .= ' or '; $idQuery .= '@moduleType = ' . $node->getAttribute('id') * 1; } } if ($idQuery == '') { return null; } $query = '//module[(' . $idQuery . ')' . ' and (' . ' (ancestor :: website)' . ($this->isPage ? ' or (ancestor :: layout[@layoutType=' . $this->page->pageType->id. '])' : '') . ' or (ancestor :: ' . $this->section . '[@id=' . $this->page->id . '])' . ')' . ']' ; $nodes = MotoXML::findByXPath( $query , $this->content); $objs = array(); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { if (MotoUtil::toBoolean($node->getAttribute('externalData'))) { $dom = MotoXML::create(MOTO_ROOT_DIR . '/' . $node->getAttribute('externalFile')); $objectsHolder = new MotoObjectsHolderVO(); $module = new ModuleVO($node); $module->data = $objectsHolder->loadDomElement( MotoXML::findOneByXPath('./data', $dom)); $module->parameters['externalData'] = false; $module->parameters['externalFile'] = ''; $module->saveDomElement($node); } $obj = $this->fillObj($node, $node->nodeName); if (!isset($holders[$obj->holder])) continue; $obj->x += $holders[$obj->holder]->x; $obj->y += $holders[$obj->holder]->y; $objs[] = $obj; } } return $objs; } function getSlotObjectWithoutModule($holders) { $query = $this->createQuery(); $objs = array(); $nodes = MotoXML::findByXPath( $query , $this->content); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { $obj = $this->fillObj($node, $node->nodeName); if (!isset($holders[$obj->holder])) continue; $obj->x += $holders[$obj->holder]->x; $obj->y += $holders[$obj->holder]->y; $objs[] = $obj; } } return $objs; } function getChildValue($dom, $nodeName) { $node = MotoXML::findOneByXPath('./' . $nodeName, $dom); if (!is_null($node)) return $node->nodeValue; return null; } function loadHolders() { $holders = array(); $nodes = MotoXML::findByXPath( '//holder' , $this->structure); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { $holders[$node->getAttribute('id')] = (object) array( 'x' => $node->getAttribute('x'), 'y' => $node->getAttribute('y'), 'depth' => $node->getAttribute('depth'), 'type' => $node->getAttribute('type'), ); } } return $holders; } function loadModuleStructure() { $nodes = MotoXML::findByXPath( '//modules/module' , $this->structure); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { $id = $node->getAttribute('id'); $type = $node->getAttribute('type'); $moduleNode = MotoXML::findOneByXPath('//module[@id="' . $type . '"]', MotoXML::create(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY)); if (!is_null($moduleNode)) { $this->modules[$id] = array( 'type' => $type, 'isContent' => $node->getAttribute('isContent'), 'dir' => dirname($moduleNode->getAttribute('url')), ); } } } } function loadSlotStructure() { $nodes = MotoXML::findByXPath( '//slot/properties/property[@type="htmlText" or @type="image"]' , $this->structure); if (!is_null($nodes) && !empty($nodes)) { foreach($nodes as $node) { $parent = $node->parentNode->parentNode; $this->slots[$parent->getAttribute('id')][$node->getAttribute('id')] = $node->getAttribute('type'); } } } function createQuery($moduleId = 0) { $querys = array(); foreach($this->slots as $id => $items) { $query = ''; $subQuery = ''; foreach($items as $iid => $type) { if ($subQuery != '') $subQuery .= ' or '; $subQuery .= ' @propertyType = ' . $iid; } if ($moduleId > 0) { $query = '//slot[@slotType = ' . $id . ' and (ancestor :: module[@id = ' . $moduleId . ']) ' . ']//item[' . $subQuery . ']'; } else { $query = '//slot[@slotType = ' . $id . ' and not(ancestor :: module/data/slots) ' . 'and (' . '(ancestor :: website)' . ($this->isPage ? ' or (ancestor :: layout[@layoutType=' . $this->page->pageType->id . '])' : '') . ' or (ancestor :: ' . $this->section . '[@id=' . $this->page->id . '])' . ')' . ']//item[' . $subQuery . ']'; } $querys[] = $query; } if ($moduleId > 0) $query = '//object[(@type="htmlText" or @type="image") ' . ' and (ancestor :: module[@id = ' . $moduleId . '])' . ']' ; else $query = '//object[(@type="htmlText" or @type="image") ' . ' and not(ancestor :: module/data/objects)' . ' and (' . ' (ancestor :: website)' . ($this->isPage ? ' or (ancestor :: layout[@layoutType=' . $this->page->pageType->id . '])' : '') . ' or (ancestor :: ' . $this->section . '[@id=' . $this->page->id . '])' . ')' . ']' ; $querys[] = $query; $query = implode(' | ', $querys); return $query; } function getParent($node, $names) { if (!isset($node->parentNode) || is_null($node->parentNode)) return null; if (preg_match('/' . $names . '/i', $node->parentNode->nodeName)) return $node->parentNode; else return $this->getParent($node->parentNode, $names); } function getContent() { return $this->content; } function getStructure() { return $this->structure; } function getConfig() { return $this->config; } }