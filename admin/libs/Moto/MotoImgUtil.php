<?php
 class MotoImg { public $resource = null; public $info = array(0, 0, 2, 'mime' => 'image/jpeg', 'bits' => '', 'channels' => '', 'filename' => '', 'ok' => false); private $mapTypeId = array( 'image/gif' => 1, 'image/jpeg' => 2, 'image/png' => 3, ); private $error = array('code' => '', 'text' => ''); public function __construct($filename = '', $width = 100, $height = 100, $type = 'image/jpeg') { if ($filename != '' && file_exists($filename)) { $this->info = getimagesize( $filename ); $this->info['width'] = $this->info[0]; $this->info['height'] = $this->info[1]; $this->info['typeId'] = $this->info[2]; $this->info['filename'] = $filename; switch ($this->info['typeId']) { case 1: $this->resource = imagecreatefromgif( $filename ); $this->info['ok'] = true; break; case 2: try { $needMemory = $this->info['width'] * $this->info['height'] * 6; $maxMemory = MotoUtil::toBytes(ini_get('memory_limit')); if ($needMemory > $maxMemory) { $this->info['ok'] = false; $this->setError('_MEMORY_LIMIT', 'Need more memory for init this image.'); break; } $this->resource = imagecreatefromjpeg( $filename ); $this->info['ok'] = true; } catch(Exception $e) { $this->info['ok'] = false; } break; case 3: $this->resource = imagecreatefrompng( $filename ); $this->info['ok'] = true; break; } } else { $this->resource = imagecreatetruecolor($width, $height); $this->info['width'] = $this->info[0] = $width; $this->info['height'] = $this->info[1] = $height; $this->info['mime'] = $type; if (isset($this->mapTypeId[$type])) $this->info['typeId'] = $this->mapTypeId[$type]; else $this->info['typeId'] = 0; } return $this; } public function setError($code = '', $text = '') { $this->_error = array('code' => $code, 'text' => $text); } public function isError() { if ($this->_error['code'] != '') return true; return false; } public function getError($type = '') { if ($type != '') { if (isset($this->_error[$type])) return $this->_error[$type]; else return null; } return $this->_error; } public function __get($key) { if (isset($this->info[$key])) return $this->info[$key]; return ''; } public function destroy() { imagedestroy($this->resource); } } class MotoImgUtil { const THUMBNAIL_DIR_NAME = '_preview'; const E_SERVER_TIMEOUT_MESSAGE = ''; const E_SERVER_TIMEOUT_CODE = 504; protected static $_maxtime = null; protected static $_baseDir = null; private static $error = array('code' => '', 'text' => ''); public static function getBaseDir() { if (self::$_baseDir == null) self::$_baseDir = MotoConfig::get('websiteBaseDir'); return self::$_baseDir; } public static function setBaseDir($baseDir) { self::$_baseDir = $baseDir; } public static function setError($code = '', $text = '') { self::$error = array('code' => $code, 'text' => $text); } public static function isError() { if (self::$error['code'] != '') return true; return false; } public static function getError() { return self::$error; } public static function checkGD() { static $checked = null; if ($checked !== null) return $checked; $checked = true; if (!function_exists('getimagesize') || !function_exists('imagecreatetruecolor') || !function_exists('imagealphablending') || !function_exists('imagesavealpha') || !function_exists('imagecolorallocatealpha') || !function_exists('imagefilledrectangle') ) { $checked = false; } return $checked; } static function checkGDSupportType($type = 'all') { $type = strtolower($type); $types = array( 'jpeg' => function_exists('imagecreatefromjpeg'), 'png' => function_exists('imagecreatefrompng'), 'gif' => function_exists('imagecreatefromgif'), ); $types['jpg'] = $types['jpeg']; $types['ok'] = $types['jpeg'] && $types['png'] && $types['gif']; if ($type != 'all') { if (isset($types[$type])) return $types[$type]; else return false; } return $types; } static function getMaxTime() { if (self::$_maxtime == null) { self::$_maxtime = abs(ini_get('max_execution_time') - 5); } return self::$_maxtime; } public static function generateFilenameThumbnail($filename) { $info = pathinfo($filename); $filenameOut = MotoUtil::replaceSlashes($info['dirname'] . '/' . (defined('THUMBNAIL_DIR_NAME') && THUMBNAIL_DIR_NAME != "" ? THUMBNAIL_DIR_NAME : self::THUMBNAIL_DIR_NAME) . '/' . $info['basename']); return $filenameOut; } public static function makeAutoThumbnail($filenameIn, $reMake = false) { return self::makeThumbnail($filenameIn, "", THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT, array('reMake' => $reMake) ); } public static function makeThumbnail($filenameIn, $filenameOut = "" , $maxWidth = THUMBNAIL_MAX_WIDTH, $maxHeight = THUMBNAIL_MAX_HEIGHT, $options = array() ) { $baseDir = self::getBaseDir(); if (time() >= $_SERVER['REQUEST_TIME'] + self::getMaxTime()) { throw new Exception(self::E_SERVER_TIMEOUT_MESSAGE, self::E_SERVER_TIMEOUT_CODE); } self::setError(''); if (!self::checkGD()) { self::setError('LIB_GD_NOT_LOADED', 'Error: Not found GD lib'); return false; } $fileInfo = pathinfo($baseDir . '/' . $filenameIn); if (!isset($fileInfo['extension']) || !self::checkGDSupportType($fileInfo['extension'])) { self::setError('LIB_GD_NOT_SUPPORT_FORMAT', 'Error: GD not support format ' . $fileInfo['extension']); return false; } $maxWidth *= 1; if ($maxWidth <= 0) $maxWidth = THUMBNAIL_MAX_WIDTH; $maxHeight *= 1; if ($maxHeight <= 0) $maxHeight = THUMBNAIL_MAX_HEIGHT; $result = true; $quality = (isset($options['quality']) ? $options['quality'] : THUMBNAIL_JPG_QUALITY); $outType = (isset($options['outType']) ? $options['outType'] : 'auto'); $reMake = (isset($options['reMake']) ? $options['reMake'] : false); if (is_bool($options)) $reMake = $options; if (!file_exists($baseDir . '/' . $filenameIn)) { self::setError('SOURCE_FILE_NOT_FOUND', "Error: $filenameIn not found"); return false; } $info = pathinfo($filenameIn); if ($filenameOut == "") { $filenameOut = self::generateFilenameThumbnail($filenameIn); } if (!$reMake && file_exists($baseDir . '/' . $filenameOut)) { return $filenameOut; } $imgIn = new MotoImg($baseDir . '/' . $filenameIn); if (!$imgIn->ok) { self::setError('IMAGE_NOT_CREATED', 'Error: Cant create image from ' . $filenameIn); return false; } $width = $maxWidth; $height = $maxHeight; if ($imgIn->width <= $maxWidth && $imgIn->height <= $maxHeight) { $width = $imgIn->width; $height = $imgIn->height; } else { $height = round($width * $imgIn->height / $imgIn->width); if ($height < 1) $height = 1; if ($height > $maxHeight) { $height = $maxHeight; $width = round($height * $imgIn->width / $imgIn->height); if ($width < 1) $width = 1; } } $imgOut = new MotoImg('', $width, $height, ($outType == "auto" ? $imgIn->mime : $outType) ); switch ($imgIn->typeId) { case 1: break; case 2: break; case 3: imagealphablending($imgOut->resource , false); imagesavealpha($imgOut->resource ,true); $transparent = imagecolorallocatealpha($imgOut->resource, 255, 255, 255, 127); imagefilledrectangle($imgOut->resource, 0, 0, $width, $height, $transparent); break; } imagecopyresampled( $imgOut->resource, $imgIn->resource, 0, 0, 0, 0, $width, $height, $imgIn->width, $imgIn->height ); MotoUtil::createDir(dirname($baseDir . '/' . $filenameOut)); switch ($imgOut->typeId) { case 1: imagegif($imgOut->resource, $baseDir . '/' . $filenameOut); break; case 2: imagejpeg($imgOut->resource, $baseDir . '/' . $filenameOut, $quality); break; case 3: imagepng($imgOut->resource, $baseDir . '/' . $filenameOut); break; } $result = $filenameOut; $imgIn->destroy(); $imgOut->destroy(); if (!file_exists($baseDir . '/' . $filenameOut)) { self::setError('OUTPUT_FILE_NOT_SAVED', "Error: Cant save image to $filenameOut"); return false; } MotoUtil::fixFilePermission($baseDir . '/' . $filenameOut); return $result; } public static function makeThumbnails($filenameIn, $params = array(), $options = array() ) { $baseDir = self::getBaseDir(); self::setError(''); if (!self::checkGD()) { self::setError('LIB_GD_NOT_LOADED', 'Error: Not found GD lib'); return false; } $fileInfo = pathinfo($filenameIn); if (!isset($fileInfo['extension']) || !self::checkGDSupportType($fileInfo['extension'])) { self::setError('LIB_GD_NOT_SUPPORT_FORMAT', 'Error: GD not support format ' . $fileInfo['extension']); return false; } $result = true; $quality = (isset($options['quality']) ? $options['quality'] : THUMBNAIL_JPG_QUALITY); $outType = (isset($options['outType']) ? $options['outType'] : 'auto'); $reMake = (isset($options['reMake']) ? $options['reMake'] : false); if (!file_exists($baseDir . '/' . $filenameIn)) { self::setError('SOURCE_FILE_NOT_FOUND', 'Error: ' . $filenameIn . ' not found'); return false; } if (!is_array($params) || count($params) < 1) { self::setError('BAD_PARAMS', 'Error: Cant create thumnails - params is empty'); return false; } $imgIn = new MotoImg($baseDir . '/' . $filenameIn); if (!$imgIn->ok) { self::setError('IMAGE_NOT_CREATED' . $imgIn->getError('code'), 'Error: Cant create image from ' . $filenameIn); return false; } $result = array(); foreach($params as $id => $param) if (isset($param['width']) && isset($param['height'])) { $param = array_merge($fileInfo, $param); if (!isset($param['filenameOut']) || $param['filenameOut'] == '') $param['filenameOut'] = '%dirname%/%commonDirectory%/%filename%_%width%_%height%.%extension%'; if (!isset($param['commonDirectory'])) $param['commonDirectory'] = ''; $filenameOut = MotoUtil::renderTemplate($param['filenameOut'], $param); $filenameOut = preg_replace('/[\/\\\]+/', '/', $filenameOut); $result[$id] = $filenameOut; if (!$reMake && file_exists($baseDir . '/' . $filenameOut)) { continue; } if ($imgIn->width <= $param['width'] && $imgIn->height <= $param['height']) { $result[$id] = $filenameIn; continue; } $imgOut = self::scaleImg($imgIn, $param['width'], $param['height'], MotoUtil::safeGet($param, 'scalingMode', 'fit') ); MotoUtil::createDir(dirname($baseDir . '/' . $filenameOut)); if (!is_dir(dirname($baseDir . '/' . $filenameOut))) { self::setError('OUTPUT_DIR_NOT_CREATED', 'Error: Cant create dir for this file ' . $filenameOut); $result[$id] = false; continue; } switch ($imgOut->typeId) { case 1: imagegif($imgOut->resource, $baseDir . '/' . $filenameOut); break; case 2: imagejpeg($imgOut->resource, $baseDir . '/' . $filenameOut, $quality); break; case 3: imagepng($imgOut->resource, $baseDir . '/' . $filenameOut); break; } $imgOut->destroy(); if (!file_exists($baseDir . '/' . $filenameOut)) { self::setError('OUTPUT_FILE_NOT_SAVED', 'Error: Cant save image to ' . $filenameOut); $result[$id] = false; } MotoUtil::fixFilePermission($baseDir . '/' . $filenameOut); } return $result; } static function scaleImg($imgIn, $_width, $_height, $mode = 'fit') { $method = __FUNCTION__ . '_' . ucfirst(strtolower($mode)); if (method_exists('MotoImgUtil', $method)) return MotoImgUtil::$method($imgIn, $_width, $_height); throw new Exception (__CLASS__ . ': Scaling mode "' . $mode . '" not exists'); } static function scaleImg_Fit($imgIn, $_width, $_height) { $width = $_width; $height = round($_width * $imgIn->height / $imgIn->width); if ($height < 1) $height = 1; if ($height > $_height) { $height = $_height; $width = round($_height * $imgIn->width / $imgIn->height); if ($width < 1) $width = 1; } $imgOut = new MotoImg('', $width, $height, $imgIn->mime ); switch ($imgIn->typeId) { case 3: imagealphablending($imgOut->resource, false); imagesavealpha($imgOut->resource, true); $transparent = imagecolorallocatealpha($imgOut->resource, 255, 255, 255, 127); imagefilledrectangle($imgOut->resource, 0, 0, $width, $height, $transparent); break; } imagecopyresampled( $imgOut->resource, $imgIn->resource, 0, 0, 0, 0, $width, $height, $imgIn->width, $imgIn->height ); return $imgOut; } static function scaleImg_Fill($imgIn, $_width, $_height) { $width = $_width; $height = round($_width * $imgIn->height / $imgIn->width); if ($height < 1) $height = 1; if ($height < $_height) { $height = $_height; $width = round($_height * $imgIn->width / $imgIn->height); if ($width < 1) $width = 1; } $imgOut = new MotoImg('', $_width, $_height, $imgIn->mime ); $imgTemp = new MotoImg('', $width, $height, $imgIn->mime ); switch ($imgIn->typeId) { case 3: imagealphablending($imgTemp->resource, false); imagesavealpha($imgTemp->resource, true); $transparent = imagecolorallocatealpha($imgOut->resource, 255, 255, 255, 127); imagefilledrectangle($imgTemp->resource, 0, 0, $width, $height, $transparent); imagealphablending($imgOut->resource, false); imagesavealpha($imgOut->resource, true); $transparent = imagecolorallocatealpha($imgOut->resource, 255, 255, 255, 127); imagefilledrectangle($imgOut->resource, 0, 0, $_width, $_height, $transparent); break; } $dx = $dy = 0; if ($width > $_width) $dx = floor(($width - $_width) / 2); if ($height > $_height) $dy = floor(($height - $_height) / 2); imagecopyresampled( $imgTemp->resource, $imgIn->resource, 0, 0, 0, 0, $width, $height, $imgIn->width, $imgIn->height ); imagecopy($imgOut->resource, $imgTemp->resource, 0,0, $dx, $dy, $_width, $_height); $imgTemp->destroy(); return $imgOut; } }