<?php
class Moto_Html_Application extends Moto_Html_Abstract { static protected $_instance = null; protected $_data = array(); protected $_page = null; protected $_popup = null; protected $_elements = null; protected $_holders = null; protected $_refererPage = null; protected $_user = null; protected $_engine = null; protected $_content = null; protected $_structure = null; protected $_cache = null; protected $_cacheId = 'page'; protected $_cacheTags = array(); function __construct($options = null) { parent::__construct($options); $this->_content = MotoXML::create(CONTENT_RESOURSE_PATH); $this->_structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); } static function getInstance() { if (self::$_instance == null) { self::$_instance = new self(); } return self::$_instance; } static function setInstance(Moto_Html_Application $instance) { self::$_instance = $instance; } function isAjax() { return (isset($_REQUEST['template']) && $_REQUEST['template'] == 'json'); } protected function _preDispatch() { MotoConfig::set('templateType', 'single'); MotoConfig::set('isFacebooktemplate', false); if (defined('TEMPLATE_TYPE')) { MotoConfig::set('templateType', TEMPLATE_TYPE); MotoConfig::set('isFacebooktemplate', (TEMPLATE_TYPE == 'facebook')); } } function dispatch() { $this->_preDispatch(); $action = (isset($_REQUEST['action']) ? $_REQUEST['action'] : 'index'); $method = '_' . $action . 'Action'; if (!method_exists($this, $method)) $method = '_indexAction'; return $this->$method(); } protected function _loginAction() { $config = MotoFrontController::loadConfig(); $user = Moto_Html_User::getInstance( $config ); $user->addPrefix(MotoConfig::get('websiteContentFolder', '')); $username = $_REQUEST['data']['username']; $password = $_REQUEST['data']['password']; $result = $user->login($username, $password); return $result; } protected function _logoutAction() { $config = MotoFrontController::loadConfig(); $user = Moto_Html_User::getInstance( $config ); $user->addPrefix(MotoConfig::get('websiteContentFolder', '')); $result = $user->logout(); return $result; } protected function _indexAction() { $options = array( 'jsEnabled' => true, 'ContentHolderVO.loadType' => true, 'ContentHolderTypeVO.loadTemplate' => true, 'PageVO.loadType' => true, 'PageTypeVO.loadTemplate' => false, 'PageVO.jsEnabled' => true, 'SlotVO.loadType' => true, 'SlotTypeVO.loadTemplate' => true, 'SlotTypeVO.loadHtmlTemplates' => true, 'MenuVO.loadType' => true, 'MenuVO.sortItems' => true, 'MenuVO.createMapItems' => true, 'MenuTypeVO.loadTemplate' => true, 'ModuleTypeVO.loadTemplate' => true, 'ModuleTypeVO.loadHtmlTemplates' => true, 'TypeVO.factory' => true, 'MotoObjectsHolderVO.loader' => true, 'PageVO.loaderElements' => false, 'PopupVO.loaderElements' => false, 'HoldersStackVO.loadHolders' => false, ); AbstractVO::setDefaultOptions($options); if (defined('MOBILE_WEBSITE_FOLDER') && MotoConfig::get('websiteContentFolder', '') == MOBILE_WEBSITE_FOLDER) { $defaultValues = array( 'PageVO.noIndex' => true, 'PageVO.noFollow' => true, 'PopupVO.noIndex' => true, 'PopupVO.noFollow' => true ); AbstractVO::setDefaultValues($defaultValues); } Moto_Html_MediaLibrary::init( MOTO_ADMIN_DIR . '/' . MEDIA_LIBRARY ); AbstractModuleType::getInstance()->load(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY); $controller = new MotoFrontController(null); $controller->initContent(); $settings = $controller->getSettings(); $clickOptions = array( 'website.url' => MotoConfig::get('websiteRootPath'), 'website.basePath' => MotoConfig::get('websiteBasePath'), 'website.rootPath' => MotoConfig::get('websiteRootPath'), 'href.prefix' => '', ); Moto_Html_Render_Click::init($clickOptions); $clicks = new Moto_Html_ClicksVO($this->_content); Moto_Html_Render_Click::setClicks($clicks); $this->_underConstruction($settings); if ( isset($_REQUEST['url']) && $_REQUEST['url'] != '') { $uri = $_REQUEST['url']; } else { $uri = $controller->getRequestURI(); } if (preg_match('/^([^\/]+)/', $uri, $match)) { $uri = $match[1]; } $prevLayoutTypeId = 0; if ( isset($_REQUEST['layoutId']) && $_REQUEST['layoutId'] != '') $prevLayoutTypeId = (integer) $_REQUEST['layoutId']; $this->_cacheId = md5(MotoConfig::get('websiteRootPath') . $uri); $page = $controller->getPage($uri); if ($page instanceof PopupVO) { $this->_popup = $this->_page; $this->_page = $controller->getPage(''); $this->_cacheTags[] = 'popup'; $this->_cacheTags[] = 'popup_' . $this->_page->id; } else { $this->_page = $page; $this->_cacheTags[] = 'page'; $this->_cacheTags[] = 'page_' . $this->_page->id; } $statusCode = 200; $options = array( 'loadContent' => false, ); $params = $controller->getParams($page, $options); $params['iframePreview'] = false; $params['templateType'] = $website['templateType'] = MotoConfig::get('templateType', 'single'); $params['isFacebookTemplate'] = MotoConfig::get('isFacebookTemplate'); $params['checkRedirectToMobile'] = 'false'; $params['redirectToMobile'] = MotoFrontController::getConfig('redirectToMobile', 'false'); if ($params['redirectToMobile'] === 'true' && defined('MOBILE_WEBSITE_FOLDER') && MotoConfig::get('websiteContentFolder', '') !== MOBILE_WEBSITE_FOLDER) { $params['checkRedirectToMobile'] = $params['redirectToMobile']; $params['mobileWebsite'] = Moto_Html_Util::getWebsiteDimension(CONTENT_RESOURSE_PATH); $params['mobileWebsite']['location'] = MotoConfig::get('websiteBasePath') . MOBILE_WEBSITE_FOLDER . '/'; if (!isset($params['mobileWebsite']) || $params['mobileWebsite']['width'] == 0 || $params['mobileWebsite']['height'] == 0) { $params['checkRedirectToMobile'] = 'false'; } $browser = (isset($_SERVER['HTTP_USER_AGENT']) ? strtolower($_SERVER['HTTP_USER_AGENT']) : null); if ($browser && strpos($browser, 'ipad') !== false) { $params['checkRedirectToMobile'] = 'false'; } } if ($this->isAjax()) { $template = 'json'; } else { $template = 'index'; } if (isset($params['linkGeneratorPrefix'])) Moto_Html_Render_Click::getInstance()->setOption('href.prefix', $params['linkGeneratorPrefix']); if ($params['isFacebookTemplate']) { if ($params['nonFanMode'] && !$this->isAjax()) { $this->_initRenderEngine(); $response = $this->_engine->render('nonfanpage', $params); return $response; } if (!$this->isAjax() && !isset($_GET['fb_request']) && !isset($_POST['signed_request'])) { $params['websiteDimension'] = Moto_Html_Util::getWebsiteDimension(CONTENT_RESOURSE_PATH); $this->_initRenderEngine(); $response = $this->_engine->render('iframe_preview', $params); return $response; } if (isset($_GET['fb_request']) && $_GET['fb_request'] == 'preview') { $params['iframePreview'] = true; } } if (empty($params['app_id'])) { $params['app_id'] = '189613811101522'; if (defined('FACEBOOK_APPLICATION_ID') && FACEBOOK_APPLICATION_ID != '') $params['app_id'] = FACEBOOK_APPLICATION_ID; } $structure = null; if (!$this->isAjax()) { $structure = $this->getStructure(); } $contentOptions = array( 'load.website' => true, 'load.layout' => true, ); $refererPage = null; if ($this->isAjax()) { $refererPage = null; } if ($page->isProtected && $params['isProtected']) { $user = Moto_Html_User::getInstance(); $user->addPrefix(MotoConfig::get('websiteContentFolder', '')); if (!$user->isAuthenticated()) { $statusCode = 401; $contentOptions['load.website'] = true; $contentOptions['load.layout'] = false; $contentOptions['load.page'] = false; $page->objects = null; $page->slots = null; $page->modules = null; $page->holders = null; } } else { } if ($this->isAjax()) { $contentOptions['load.website'] = false; if ($prevLayoutTypeId > 0 && $page instanceof PageVO && $page->layoutTypeId == $prevLayoutTypeId) { $contentOptions['load.layout'] = false; } } $this->_cacheId .= '_' . $statusCode . '_' . $prevLayoutTypeId . '_' . $template . '_' . StyleVO::isIE() . '_' . (($params['checkRedirectToMobile'] == 'true') * 1) . ($params['iframePreview'] *1) ; $this->_cache = MotoCache::getInstance(); if ($this->_cache != null && $response = $this->_cache->load( $this->_cacheId )) { return $response; } $content = new Moto_Html_Content( $contentOptions ); $content->setPage($page, $statusCode); $content->setDomContent($this->_content) ->setDomStructure($this->_structure) ->dispatch(); $startPage = $clicks->getPageById( $settings['startPage'] ); if ($startPage == null) { $startPage = $clicks->getFirstPage(); } $website = array( 'title' => $params['websiteTitlePrefix'], 'startPage' => $startPage, 'basePath' => $params['basePath'], 'rootPath' => MotoConfig::get('websiteRootPath'), 'contentFolder' => MotoConfig::get('websiteContentFolder'), 'isDetectedMobile' => $params['isDetectedMobile'], 'underConstruction' => $params['underConstruction'], 'underConstructionTheme' => $params['underConstructionTheme'], 'underConstructionMessage' => $params['underConstructionMessage'], 'bgColor' => $params['bgColor'], 'isUserBgColor' => $params['isUserBgColor'], 'websitePreloader' => $params['websitePreloader'], 'contentPreloader' => $params['contentPreloader'], 'websiteProtectionEnabled' => $params['websiteProtectionEnabled'] ); if ($content->website != null) $content->website->settings = $website; else $content->website = (object) array('settings' => $website); Moto_Html_HelpRender::getInstance()->assign('content', $content); Moto_Html_HelpRender::getInstance()->assign('statusCode', $statusCode); $this->_initRenderEngine(); $fonts = MotoFontVO::findAll(new MotoXML(FONTS_RESOURSE_PATH)); Moto_Html_HelpRender::getInstance()->addFonts($fonts); $params['page'] = $page; $params['content'] = $content; $response = $this->_engine->render($template, $params); if ($this->_cache != null) $this->_cache->save($response, $this->_cacheId, $this->_cacheTags); return $response; } function getStructure() { $structure = new stdClass(); $dom = MotoXML::create(STRUCTURE_RESOURSE_PATH); if (!is_null($node = MotoXML::findOneByXPath('./slots', $dom))) $structure->slots = SlotTypeVO::findAll($node); MotoConfig::set('startModule', true); if (!is_null($node = MotoXML::findOneByXPath('./modules', $dom))) $structure->modules = ModuleTypeVO::findAll($node); return $structure; } function getMenus() { $result = null; return $result; } function getContent() { $data = array(); return $data; } function getAllElementsOnPopup($type = 1) { $content = new stdClass(); $content->holders = array(); $content->objects = array(); $content->slots = array(); $content->modules = array(); $_queryP = './pages/page[@id=' . $this->_page->id . ']/'; $query = './website/contentHolders/holder | ' . $_queryP . 'contentHolders/holder'; $content->holders = ContentHolderVO::findAllByExpression($this->_content, $query); $query = './website/objects/object | ' . $_queryP . 'objects/object'; $content->objects = ObjectVO::findAllByExpression($this->_content, $query); $query = './website/slots/slot | ' . $_queryP . 'slots/slot'; $content->slots = SlotVO::findAllByExpression($this->_content, $query); $query = './website/modules/module | ' . $_queryP . 'modules/module'; $content->modules = ModuleVO::findAllByExpression($this->_content, $query); return $content; } function getAllElements($type = 1) { if (!isset($this->_page->layoutTypeId)) return $this->getAllElementsOnPopup ($type); $content = new stdClass(); $content->holders = array(); $content->objects = array(); $content->slots = array(); $content->modules = array(); $_queryL = './layouts/layout[@layoutType=' . $this->_page->layoutTypeId . ']/'; $_queryP = './pages/page[@id=' . $this->_page->id . ']/'; $query = './website/contentHolders/holder | ' . $_queryL . 'contentHolders/holder | ' . $_queryP . 'contentHolders/holder'; $content->holders = ContentHolderVO::findAllByExpression($this->_content, $query); $query = './website/objects/object | ' . $_queryL . 'objects/object | ' . $_queryP . 'objects/object'; $content->objects = ObjectVO::findAllByExpression($this->_content, $query); $query = './website/slots/slot | ' . $_queryL . 'slots/slot | ' . $_queryP . 'slots/slot'; $content->slots = SlotVO::findAllByExpression($this->_content, $query); $query = './website/modules/module | ' . $_queryL . 'modules/module | ' . $_queryP . 'modules/module'; $content->modules = ModuleVO::findAllByExpression($this->_content, $query); return $content; } function getElementByHolderId($section, $id) { $result = array(); $elements = $this->_elements->$section; foreach($elements as $element) { if ( isset($element->holder) && $element->holder == $id ) $result[] = $element; } return $result; } function getHolders($page, $loadObject = false) { $holders = array(); $query = './/contentHolders/holder'; $nodes = MotoXML::findByXPath($query, $this->_structure); if ($nodes != null) { foreach($nodes as $node) { $holder = MotoXmlUtil::getAttributes($node); if (!isset($holder['id']) || $holder['id'] < 1) continue; $parent = MotoXmlUtil::getParentNode($node, array('website', 'layout', 'page', 'popup')); if ($parent != null) { if (!isset($parent['__attr']['id'])) $parent['__attr']['id'] = 0; $holder['parent'] = $parent['__nodeName'] . ( $parent['__attr']['id'] > 0 ? 'Type-' . $parent['__attr']['id'] : ''); $holder['parentId'] = $parent['__attr']['id']; if (isset($parent['__attr']['layoutType'])) $holder['parentTop'] = 'layoutType-' . $parent['__attr']['layoutType']; } else { $holder['parent'] = $holder['type']; } $holderVO = new Moto_Html_HolderVO($holder); if ($loadObject) $holderVO->loadElements($this->_content, $page); else { $holderVO ->setElements ('objects', $this->getElementByHolderId('objects', $holderVO->id) ) ->setElements ('slots', $this->getElementByHolderId('slots', $holderVO->id) ) ->setElements ('modules', $this->getElementByHolderId('modules', $holderVO->id) ) ; } $holders[$holderVO->id] = $holderVO; if ($parent['__nodeName'] == 'layout') { } } } return $holders; } function getHolderContent($holder, $page) { } function _initUser() { $user = null; try { $service = new UserService(); $user = $service->isAuthenticated()->result; } catch (Exception $e) { $user = null; } if ($user == null) { $user = new UserVO(); $user->id = 0; } $this->_user = $user; } function getUser() { if ($this->_user == null) { $this->_initUser(); } return $this->_user; } function _initRenderEngine() { try { $filename = MOTO_ADMIN_DIR . '/templates/website/%name%.tpl.php'; $loader = new sfTemplateLoaderFilesystem($filename); $this->_engine = new sfTemplateEngine($loader); $helperSet = new sfTemplateHelperSet(array( new sfTemplateHelperAssets(), new sfTemplateHelperJavascripts(), new sfTemplateHelperStylesheets(), 'htmlHelpRender' => Moto_Html_HelpRender::getInstance(), )); $helperSet->get('assets')->setBasePath(MotoConfig::get('websiteBasePath')); $this->_engine->setHelperSet($helperSet); } catch (Exception $e) { } } protected function _underConstruction($settings) { if ( isset($settings['underConstruction']) && $settings['underConstruction'] == 'true' && (!isset($_GET['preview']) || $_GET['preview'] != 'true') ) { $themeName = "standard_white"; if (isset($settings["underConstructionTheme"]) && $settings["underConstructionTheme"] != "") $themeName = $settings["underConstructionTheme"]; $filename = MOTO_ADMIN_DIR . '/templates/sections/coming_soon/' . $themeName . ".tpl.php"; if (!file_exists($filename)) { echo "<h1>Under Construction</h1>"; exit; } $loader = new sfTemplateLoaderFilesystem($filename); $engine = new sfTemplateEngine($loader); $helperSet = new sfTemplateHelperSet(array( new sfTemplateHelperAssets(), new sfTemplateHelperJavascripts(), new sfTemplateHelperStylesheets() )); $helperSet->get('assets')->setBasePath(MotoConfig::get('websiteBasePath')); $engine->setHelperSet($helperSet); try { $controller = new MotoFrontController($engine); $response = $controller->dispatch( true ); echo $response; exit; } catch(Exception $e) { } } } } 