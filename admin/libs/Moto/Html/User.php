<?php
class Moto_Html_User extends Moto_Html_Abstract { static protected $_instance = null; protected $_defaultOptions = array( 'sessionNameSpace' => '__Moto_Html_User__', ); protected $_data = array(); static function getInstance($options = null) { if (self::$_instance == null) self::$_instance = new self($options); return self::$_instance; } public function __construct($options = null) { parent::__construct($options); if (isset($_SESSION) && isset($_SESSION[ $this->getOption('sessionNameSpace') ])) $this->_data = $_SESSION[ $this->getOption('sessionNameSpace') ]; } public function addPrefix($prefix) { $namespace = $this->getOption('sessionNameSpace'); $namespace .= $prefix; $this->setOption('sessionNameSpace', $namespace); } public function save() { $_SESSION[ $this->getOption('sessionNameSpace') ] = $this->_data; return $this; } public function set($name, $value) { $this->_data[$name] = $value; return $this; } public function get($name, $default = null) { return ( isset($this->_data[$name]) ? $this->_data[$name] : $default ); } public function isAuthenticated() { $namespace = $this->getOption('sessionNameSpace'); if (!isset($_SESSION[$namespace]) || $_SESSION[$namespace] == null) return false; $isAuth = true; $ses = $_SESSION[$namespace]; $isAuth = (!empty($ses['userName']) && !empty($ses['userPassword'])); return $isAuth; } public function logout() { unset($_SESSION[$this->getOption('sessionNameSpace')]); } public function login($username, $password) { $result = array( 'status' => false, ); $user['userName'] = $username; $user['userPassword'] = md5($password); if ($this->getOption('websiteProtectionKey', '') == $user['userPassword'] . ':' . strlen($password)) { $_SESSION[$this->getOption('sessionNameSpace')] = $user; $result['status'] = true; $result['user'] = $user; } else { $this->logout(); } return $result; } }