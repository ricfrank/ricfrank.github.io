<?php
class Moto_Html_Render_Object extends Moto_Html_Render_Abstract { protected function _image($obj) { $render = $this->getRender('Object_Image'); if ($render != null) return $render->proccess($obj, $this->_parent); $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'object' => $obj, 'content' => '', ); $data['src'] = MotoConfig::get('websiteBasePath') . $obj->value; $obj->itemInfo = Moto_Html_MediaLibrary::findBySource($obj->value); if (!empty($obj->itemInfo->alt)) $data['alt'] = $obj->itemInfo->alt; if (!empty($obj->itemInfo->title)) $data['title'] = $obj->itemInfo->title; $template = $this->getTemplate('image'); $html = $this->_render($template, $data); if ($obj->buttonMode && $obj->click != '' && $obj->click !== 'none;') { $link = Moto_Html_Render_Click::getInstance()->parse($obj->click); if ($link->a != '') $html = $link->a . $html . '</a>'; } return $html; } protected function _click($match) { $str = ''; return $str; } protected function _htmlText($obj) { $content = $this->getHtmlTextParser()->parse( $obj->value, $obj->parameters); $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'content' => $content, ); $template = $this->getTemplate('htmlText'); $html = $this->_render($template, $data); return $html; } protected function _default($obj) { $render = $this->getRender('Object_' . ucfirst(strtolower($obj->type))); if ($render != null) return $render->proccess($obj, $this->_parent); $content = '<b>object.' . $obj->type . ' not exists</b>'; $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'content' => $content, ); $template = $this->getTemplate('main'); $html = $this->_render($template, $data); return $html; } protected function _swf($obj) { $content = ''; $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'object' => $obj, 'content' => $content, ); $template = $this->getTemplate('swf'); $html = $this->_render($template, $data); return $html; } protected function _flv($obj) { $obj->itemInfo = Moto_Html_MediaLibrary::findBySource($obj->value); $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'object' => $obj, ); $template = $this->getTemplate('flv'); if ($obj->itemInfo != null && isset($obj->itemInfo->type)) { switch($obj->itemInfo->type) { case 'youtube': if (isset($obj->parameters['repeat'])) { if (is_string($obj->parameters['repeat'])) $obj->parameters['repeat'] = MotoUtil::toBoolean ($obj->parameters['repeat']); $obj->parameters['repeat'] *= 1; } if (isset($obj->parameters['autoPlay'])) { if (is_string($obj->parameters['autoPlay'])) $obj->parameters['autoPlay'] = MotoUtil::toBoolean ($obj->parameters['autoPlay']); $obj->parameters['autoPlay'] *= 1; } $template = $this->getTemplate('video_youtube'); if (isset($data['object']) && isset($data['object']->itemInfo) && !empty($data['object']->itemInfo->thumbnail)) { $data['object']->itemInfo->thumbnail = str_replace('http://', '//', $data['object']->itemInfo->thumbnail); } break; } } $html = $this->_render($template, $data); return $html; } protected function _shape($obj) { $html = ''; $type = ( isset($obj->parameters['shape']) ? $obj->parameters['shape'] : ''); $method_name = '_shape_' . strtolower( $type ); if ($type != '' && method_exists($this, $method_name)) { $html = $this->$method_name($obj); } else { $content = '<b>object.shape.' . $obj->type . ' not exists</b>'; $content .= "<br>$method_name<br>"; $content .= '<pre>' . print_r($obj, true) . '</pre>'; $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj) . ' ' .$this->_cssPref . 'object-default', 'style' => $this->getStyle($obj), 'content' => $content, ); $template = $this->getTemplate('main'); $html = $this->_render($template, $data); } return $html; } protected function _shape_rectangle($obj) { $html = ''; $content = ''; $data = array( 'id' => 'object_' . $obj->id, 'class' => $this->getCssClass($obj) . ' ' . $this->_cssPref . 'object-shape-rectangle', 'style' => $this->getStyle($obj), 'content' => $content, 'object' => $obj, ); if ($obj->buttonMode && $obj->click != '' && $obj->click !== 'none;') { $link = Moto_Html_Render_Click::getInstance()->parse($obj->click); $data['class'] .= ' ' . $link->class; $template = '<a id="{%id%}" class="{%class%}" style="{%style%}" href="' . $link->href . '" rel="' . $link->rel . '" data-action="' . $link->action . '" data-url="' . $link->url . '" target="' . $link->target . '"><div class="mjs-object-content">{%content%}</div></a>'; } else { $template = '<div id="{%id%}" class="{%class%}" style="{%style%}"><div class="mjs-object-content">{%content%}</div></div>'; } $html = $this->_render($template, $data); return $html; } } 