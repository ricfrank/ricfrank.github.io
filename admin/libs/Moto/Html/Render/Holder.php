<?php
class Moto_Html_Render_Holder extends Moto_Html_Render_Abstract { function proccess($obj, $parent = null) { $this->_parent = $parent; $html = ''; if (is_array($obj)) $obj = (object) $obj; if (!isset($obj->_mode)) $obj->_mode = 'full'; $method_name = '_' . $obj->type; if (method_exists($this, $method_name)) $html .= $this->$method_name($obj); else $html .= $this->_default($obj); $obj->_html = $html; return $html; } protected function _default($holder) { $content = $html = ''; if (is_array($this->_parent->objects)) foreach($this->_parent->objects as $object) if($object->holder == $holder->id) { $content .= $this->renderElement($object, $holder); } if (is_array($this->_parent->slots)) foreach($this->_parent->slots as $object) if($object->holder == $holder->id) { $content .= $this->renderElement($object, $holder); } if (is_array($this->_parent->modules)) foreach($this->_parent->modules as $object) if($object->holder == $holder->id) { $content .= $this->renderElement($object, $holder); } $class = ''; if ($holder->isDynamic) { $holder->depth *= 100; $style = 'height:{%holder.height%};'; $style = $this->getStyle($holder); $websiteContent = Moto_Html_HelpRender::getInstance()->getContent(); if ($websiteContent != null) { $pageHeight = $websiteContent->page->height; } if (!empty($holder->hAlign) && $websiteContent != null) { switch($holder->hAlign) { case 'left': $holder->x = 0; break; case 'right': case 'center': $class .= ' mjs-auto-position'; break; } $style['left'] = $holder->x . 'px'; } if (!empty($holder->vAlign) && $websiteContent != null) { switch($holder->vAlign) { case 'top': $holder->y = 0; break; case 'middle': case 'bottom': if (strpos($class, 'mjs-auto-position') === false) $class .= ' mjs-auto-position'; break; } $style['top'] = $holder->y . 'px'; } $data = array( 'id' => 'holder_' . $holder->id, 'class' => $this->_cssPref . 'holder ' . $this->_cssPref . 'holder-' . $holder->type . ($class != '' ? ' ' . $class : ''), 'style' => $style, 'content' => $content, 'holder' => $holder, ); $template = $this->getTemplate('main'); $template = '<div id="{%id%}" class="{%class%}" style="{%style%};" data-halign="{%holder.hAlign%}" data-valign="{%holder.vAlign%}" data-width="{%holder.width%}" data-height="{%holder.height%}" data-top="{%holder.y%}" data-left="{%holder.x%}" >
<div class="mjs-holder-content">
{%content%}
</div>
</div>'; $html = $this->_render($template, $data); } else { $html = $content; } return $html; } protected function _default0($obj) { $content = ''; if (is_array($obj->objects)) foreach($obj->objects as $object) { $content .= $this->renderElement($object, $obj); } if (is_array($obj->slots)) foreach($obj->slots as $slot) { $content .= $this->renderElement($slot, $obj); } if (is_array($obj->modules)) foreach($obj->modules as $module) { $content .= $this->renderElement($module, $obj); } $style = 'height:{%holder.height%};'; $data = array( 'id' => 'holder_' . $obj->id, 'class' => $this->_cssPref . 'holder ' . $this->_cssPref . $obj->type . ( $obj->parent!= '' && $obj->type != $obj->parent ? 'Type ' . $this->_cssPref . $obj->parent : '' ), 'style' => $style, 'content' => $content, 'holder' => $obj->getJsObj(), ); $template = $this->getTemplate('main'); $template = '<div id="{%id%}" class="{%class%}" style="{%style%}" data-width="{%holder.width%}" data-height="{%holder.height%}" data-top="{%holder.y%}" data-left="{%holder.x%}" >{%content%}</div>'; $html = $this->_render($template, $data); return $html; } }