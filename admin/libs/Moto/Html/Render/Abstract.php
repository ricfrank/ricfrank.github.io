<?php
class Moto_Html_Render_Abstract { protected $_cssPref = 'mjs-'; protected $_template = array( 'main' => '<div id="{%id%}" class="{%class%}" style="{%style%}">{%content%}</div>', 'image' => '<img id="{%id%}" src="{%src%}" class="{%class%}" style="{%style%}"{%alt%}{%title%}/>', 'htmlText' => '<div id="{%id%}" class="{%class%}" style="{%style%}"><div class="mjs-object-content">{%content%}</div></div>', 'swf' => '<div id="{%id%}" class="{%class%}" style="{%style%}"><div id="{%id%}_wrap"></div></div>', 'flv' => '<div id="{%id%}" class="{%class%}" style="{%style%}"><div id="{%id%}_wrap"></div></div>', 'video_youtube' => '<div id="{%id%}" class="{%class%}" style="{%style%}"><a href="//www.youtube.com/watch?v={%object.itemInfo.source%}" target="_blank"><img src="{%object.itemInfo.thumbnail%}" width="{%object.width%}" height="{%object.height%}" alt="{%object.itemInfo.name%}"/></a></div>', ); static protected $_renders = array(); static protected $_renders2 = array(); static protected $_defaultOptions = array(); protected $_c = array( ); protected $_page = null; protected $_engine = null; protected $_parent = null; function __construct($engine = null) { $this->_engine = $engine; } static function setDefaultOption($name, $value) { self::$_defaultOptions[$name] = $value; } static function getDefaultOption($name, $value = null) { return ( isset(self::$_defaultOptions[$name]) ? self::$_defaultOptions[$name] : $value ); } function get($obj, $name, $def = '') { if (is_array($obj)) return (isset($obj[$name]) ? $obj[$name] : $def); if (is_object($obj)) return (isset($obj->$name) ? $obj->$name : $def); return $def; } function proccess($obj, $parent = null) { $this->_parent = $parent; $html = ''; if (is_array($obj)) $obj = (object) $obj; if (method_exists($obj, 'xxxinit')) { $obj->xxxinit(); } $method_name = '_' . $obj->type; if (method_exists($this, $method_name)) $html .= $this->$method_name($obj); else $html .= $this->_default($obj); return $html; } protected function _default($obj) { $style = $this->getStyle($obj); $content = '<b> '.get_class($obj) . ' ' . $obj->type.'</b> not exists'; $data = array( 'id' => get_class($obj) . '_' . $obj->id, 'class' => get_class($obj) . ' ' . get_class($obj) . '-' . $obj->type, 'style' => $style, 'content' => $content, ); $template = $this->getTemplate('main'); $html = $this->_render($template, $data); return $html; } function getTemplate($name = 'main') { $template = (isset( $this->_template[$name] ) ? $this->_template[$name] : $this->_template['main']); return $template; } function _render($template, $data, $debug = false) { if (isset($data['id']) && !preg_match('/^mjs-/i', $data['id'])) { $data['id'] = 'mjs-' . $data['id']; } if (isset($data['widget.id']) && !preg_match('/^mjs-/i', $data['widget.id'])) { $data['widget.id'] = 'mjs-' . $data['widget.id']; } if (!isset( $data['website.root_url'] )) $data['website.root_url'] = MotoConfig::get('websiteBasePath'); if (!isset( $data['website.basePath'] )) $data['website.basePath'] = MotoConfig::get('websiteBasePath'); if (!isset( $data['website.rootPath'] )) $data['website.rootPath'] = MotoConfig::get('websiteRootPath'); if (!isset( $data['website.contentFolder'] )) $data['website.contentFolder'] = MotoConfig::get('websiteContentFolder'); if (isset($data['style'])) { if (1==11 && isset($data['id'])) $data['style'] = $this->prepareStyleV2($data['style'], $data['id']); else $data['style'] = $this->prepareStyle($data['style']); } $vars = array( 'alt', 'title', 'onclick'); for($i = 0; $i < count($vars); $i++) { if (!isset($data[ $vars[$i] ]) || $data[ $vars[$i] ] == '') { $data[ $vars[$i] ] = ''; } else { if (is_array($data[ $vars[$i] ])) $data[ $vars[$i] ] = implode(' ', $data[ $vars[$i] ]); $data[ $vars[$i] ] = ' ' . $vars[$i] . '="' . $data[ $vars[$i] ] . '"'; } } if (!isset($data['content'])) $data['content'] = ''; $data = Moto_Html_Util::implodeArray($data); $vars = explode(',', '{%' . implode('%},{%', array_keys($data)) . '%}'); if(isset($data['parameters'])) { $data['parameters']=''; } $values = Moto_Html_Util::implodeArray($data); return str_replace($vars, $values, $template); } function prepareStyle($data) { $style = ''; if (is_string($data)) return $data; foreach($data as $key => $value) if ($key != '_style') { $style .= $key . ':' . $value . ';'; } if (isset($data['_style'])) { $style .= $data['_style']->getBackgroundStyle(); $style .= $data['_style']->getPaddingStyle(); $style .= $data['_style']->getBorderStyle(); } return $style; } function prepareStyleV2($data, $id) { $style = ''; if (is_string($data)) return $data; $mini = ''; foreach($data as $key => $value) if ($key != '_style') { if (in_array($key, array('width', 'height', 'left', 'top', 'right', 'bottom', 'z-index'))) $mini .= $key . ':' . $value . ';'; else $style .= $key . ':' . $value . ';'; } if (isset($data['_style'])) { $style .= $data['_style']->getBackgroundStyle(); $style .= $data['_style']->getPaddingStyle(); $style .= $data['_style']->getBorderStyle(); } $style = trim($style); if (!empty($id) && $style != '') { $s = MotoConfig::get('website.style', ''); $s .="#$id { $style }\n"; MotoConfig::set('website.style', $s); } else { $mini .= $style; } return $mini; } function getClicker() { return Moto_Html_Render_Click::getInstance(); } function getHtmlTextParser() { return Moto_Html_Render_HtmlText::getInstance(); } function renderElement($obj, $parent = null) { if ( method_exists($obj, 'getType') && $obj->getType() != null ) return $this->renderWidget($obj, $parent); else return $this->renderObject($obj, $parent); } function renderObject($obj, $parent = null) { $render = $this->getRender('object'); if ($render != null) return $render->proccess($obj, $parent) ; return ''; } function renderWidget($obj, $parent = null) { if (is_array($obj)) $obj = (object) $obj; $mode = 'flex'; $typeVO = $obj->getType(); if ($typeVO == null) { if ($mode == 'flex') return ''; else throw new Exception('Object @id=' . $obj->id . ' -> TypeVO is null'); } if (!method_exists($typeVO, 'getPhpRender') ) { if ($mode == 'flex') return ''; else throw new Exception('Method getPhpRender not exists @id=' . $obj->id); } $data = $obj->getType()->getPhpRender(); $file = $data['file']; $class = $data['class']; $method = $data['method']; $render = $this->getRenderByClass($class, $file, $mode); $result = ''; if ($render == null) { if ($mode == 'flex') return ''; else throw new Exception('Render for ' . $class . ' not found'); } if ($method == '') $method = 'render'; if (!method_exists($render, $method)) { if ($mode == 'flex') return ''; else throw new Exception('Method ' . $method. ' not exists in ' . $class); } $result = $render->$method($obj, $parent); return $result; } function getRenderByClass($class, $file = '', $mode = 'exception') { if (!preg_match('/^[a-z0-9\_]+$/i', $class)) { return null; } if ( !isset(self::$_renders2[ $class ]) ) { if ( $file != '') { if ( !file_exists(MOTO_ROOT_DIR . '/' . $file) ) { if ($mode == 'flex') { self::$_renders2[ $class ] = null; return null; } else throw new Exception ('Render file ' . $file . ' not exists'); } include_once MOTO_ROOT_DIR . '/' . $file; if (!class_exists($class, false)) { if ($mode == 'flex') { self::$_renders2[ $class ] = null; return null; } else throw new Exception('Render ' . $class . ' not found in file ' . $file); } } if (!class_exists($class)) { if ($mode == 'flex') { self::$_renders2[ $class ] = null; return null; } else throw new Exception('Render ' . $class . ' not found'); } self::$_renders2[ $class ] = new $class($this->_engine); } if ( isset(self::$_renders2[ $class ]) ) return self::$_renders2[ $class ]; return null; } function getRender($name, $auto = true) { if (!preg_match('/^[a-z\_]+$/i', $name)) { return null; } if (!isset(self::$_renders[$name])) { if ($auto) $name = ucfirst($name); $filename = str_replace('_', '/', $name) . '.php'; if (!file_exists(dirname(__FILE__) . '/' . $filename)) { return null; } $class = 'Moto_Html_Render_' . $name; if (class_exists($class)) self::$_renders[$name] = new $class($this->_engine); else self::$_renders[$name] = null; } return self::$_renders[$name]; } function getClass($obj) { return $this->getCssClass($obj); } function getCssClass($obj) { $class = array(); if ( get_class($obj) == 'ObjectVO' ) { $class = $this->_cssPref . 'object ' . $this->_cssPref . 'object-' . $obj->type; } else { $class = $obj->getCssClass(); } if ($obj->snapping) { if ($obj->right !== null) { $class .= ' mjs-auto-right-window'; } if ($obj->left !== null) { $class .= ' mjs-auto-left-window'; } if ($obj->top !== null) { $class .= ' mjs-auto-top-window'; } if ($obj->bottom !== null) { $class .= ' mjs-auto-bottom-window'; } if (!(!is_null($obj->left) && !is_null($obj->right) && !is_null($obj->top) && !is_null($obj->bottom))) { if (!is_null($obj->left) && !is_null($obj->right)) { } } } return $class; } function getStyleDimensions($obj, $parent = null) { $styles = $this->getStyle($obj, $parent); $_style = ''; $keys = array('width', 'height', 'top', 'left', 'right', 'bottom', 'z-index'); foreach($keys as $key) if (isset($styles[$key])) { $_style .= $key . ':' . $styles[$key] . ';'; } return $_style; } function getStyle($obj, $parent = null, $full = true) { $useDeltaLeftFix = true; $useDeltaTopFix = true; if ($full) { if ( isset($obj->snapping) && $obj->snapping ) { $style = array(); if (!is_null($obj->top)) { $style['top'] = $obj->top; $useDeltaTopFix = false; } if (!is_null($obj->right)) $style['right'] = $obj->right; if (!is_null($obj->bottom)) $style['bottom'] = $obj->bottom; if (!is_null($obj->left)) { $style['left'] = $obj->left; $useDeltaLeftFix = false; } if (is_null($obj->left) || is_null($obj->right)) $style['width'] = $obj->width; if (is_null($obj->top) || is_null($obj->bottom)) $style['height'] = $obj->height; if (is_null($obj->top) && is_null($obj->bottom)) $style['top'] = $obj->y; if (is_null($obj->left) && is_null($obj->right)) $style['left'] = $obj->x; } else { $style = array( 'width' => $obj->width, 'height' => $obj->height, 'top' => $obj->y, 'left' => $obj->x, ); } if (isset($obj->zIndex)) $style['z-index'] = $obj->zIndex; elseif (isset($obj->depth)) $style['z-index'] = $obj->depth; if ($parent == null) $parent = $this->_parent; if ($parent != null && isset($parent->depth) && isset($parent->isDynamic) && !$parent->isDynamic) { $style['z-index'] = ($parent->depth*100) + (isset($obj->depth) ? $obj->depth : 0); } if (!isset($parent->isDynamic) || !$parent->isDynamic) { if (isset($obj->forceTop) && $obj->forceTop) { $style['z-index'] += 50000; } elseif ( isset($obj->forceBottom) && $obj->forceBottom ) { $style['z-index'] = $obj->depth; } } } if (isset($obj->rotation) && $obj->rotation != 0) { $rotation = 'rotate('.$obj->rotation.'deg)'; $style['transform'] = $rotation; $style['-webkit-transform'] = $rotation; $style['-moz-transform'] = $rotation; $style['-ms-transform'] = $rotation; $style['-o-transform'] = $rotation; $style['zoom'] = '1'; $transformPointX = $obj->width/2 + $obj->style->paddingLeft + $obj->style->borderLThickness; $transformPointY = $obj->height/2 + $obj->style->paddingTop + $obj->style->borderTThickness; $style['transform-origin'] = $style['-moz-transform-origin'] = $style['-ms-transform-origin'] = $style['-o-transform-origin'] = $style['-webkit-transform-origin'] = $transformPointX . 'px ' . $transformPointY . 'px'; $angle = $obj->rotation * pi() / 180; } if ($full) { if (isset($style['width'])) $style['width'] .= 'px'; if (isset($style['height'])) $style['height'] .= 'px'; if (isset($style['top'])) { if (isset($obj->style) && $obj->style != null && $useDeltaTopFix) $style['top'] -= $obj->style->paddingTop + $obj->style->borderTThickness; $style['top'] .= 'px'; } if (isset($style['left'])) { if (isset($obj->style) && $obj->style != null && $useDeltaLeftFix) $style['left'] -= $obj->style->paddingLeft + $obj->style->borderLThickness; $style['left'] .= 'px'; } if (isset($style['bottom'])) $style['bottom'] .= 'px'; if (isset($style['right'])) $style['right'] .= 'px'; } if (isset($obj->style)) { $style['_style'] = $obj->style; } return $style; } } 