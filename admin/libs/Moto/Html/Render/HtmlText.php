<?php
 class Moto_Html_Render_HtmlTextVO { protected $_data = array(); protected $_attributes = array( 'id' => '', ); protected $_class = array(); protected $_style = array(); protected $_parent = null; protected $_node = null; protected $_tag = null; protected $_content = array(); protected $_transparent = false; protected $_level = 0; protected $_debug = false; public $style = array(); public $class = array(); public $extra = ''; private $SPAN = "span"; function __construct($node = null, $parent = null, $class = null, $style = null) { $this->_node = $node; $this->_parent = $parent; if ($class != null) $this->_class = $class; if ($style != null) { $this->_style = $style; } if ($node != null && $node->nodeName != null) $this->_tag = strtolower($node->nodeName); } function getLevel() { if ($this->_transparent && $this->_parent != null) { return $this->_parent->getLevel(); } return $this->_level; } function setLevel($level) { $this->_level = $level; } function dispatch($debug = false) { $this->_debug = $debug; $this->_parseNode(); } function __set($name, $value) { $this->_data[$name] = $value; } function __get($name) { return ( isset($this->_data[$name]) ? $this->_data[$name] : null); } function addData($name, $value) { $this->_data[$name] = $value; return $this; } function getData($name, $default = '') { return ( isset($this->_data[$name]) ? $this->_data[$name] : $default ); } function addAttribute($name, $value) { $this->_attributes[$name] = $value; return $this; } function getAttribute($name, $default = '') { return ( isset($this->_attributes[$name]) ? $this->_attributes[$name] : $default ); } function addClass($value) { $this->_class[$value] = $value; return $this; } function addStyle($name, $value = '') { if (is_array($name)) $this->_style = array_merge($this->_style, $name); else $this->_style[$name] = $value; return $this; } function getFullStyle() { $style = $this->getStyle(); if ($this->_tag == 'b') $style['font-weight'] = 'bold'; if ($this->_tag == 'i') $style['font-style'] = 'italic'; if ($this->_tag == 'u') $style['text-decoration'] = 'underline'; foreach($this->_content as $item) { if (is_object($item) && method_exists($item, 'getFullStyle')) $style = array_merge($style, $item->getFullStyle()); } return $style; } function getStyle($name = '', $default = '') { if ($name == '') return $this->_style; return ( isset($this->_style[$name]) ? $this->_style[$name] : $default ); } function __toString() { $html = ''; $content = ''; if (count($this->_content) > 0) foreach($this->_content as $item) { $content .= $item . ''; } if ($this->_transparent) { $html = $content; } else { if ($this->_level == 1) { $tag = $this->getRoot()->getTag(); if ($tag != 'root') $this->setTag ($tag); } $html .= '<'; $html .= $this->_tag; if (count($this->_attributes) > 0) foreach($this->_attributes as $name => $value) if ($value != '') { $html .= ' ' . $name . '="' . $value . '"'; } $class = ''; if (count($this->_class) > 0) foreach($this->_class as $name => $value) if ($value != '') { $class .= ($class != '' ? ' ' : '') . $value; } if ($class != '') $html .= ' class="' . $class . '"'; $style = ''; if (count($this->_style) > 0) foreach($this->_style as $name => $value) { $style .= $name . ':' . $value . ';'; } if ($style != '') $html .= ' style="' . $style . '"'; if (count($this->_data) > 0) foreach($this->_data as $name => $value) { $html .= ' data-' . $name . '="' . $value . '"'; } $html .= '>'; $html .= $content . '</' . $this->_tag . '>'; } $html = str_replace('  ', ' &nbsp;', $html); return $html; } function setNode($node) { $this->_transparent = false; $this->_node = $node; $this->_tag = strtolower($node->nodeName); if ($this->_tag == 'root' || $this->_tag == 'textformat') { $this->_transparent = true; } switch($this->_tag) { case 'font': $this->_tag = $this->SPAN; break; } return $this; } function getNode() { return $this->_node; } function getRoot() { return ($this->_parent == null ? $this : $this->_parent->getRoot() ); } function getParagraph($parent = false) { if ($this->_tag == 'p') return $this; elseif ($this->_parent != null) return $this->_parent->getParagraph($parent); return null; } function getParent() { if ($this->_transparent) { return $this->_parent->getParent(); } return $this->_parent; } function setParent($parent) { $this->_parent = $parent; $this->_level = $parent->getLevel(); if (!$this->_transparent) $this->_level +=1; return $this; } function getParentNode() { return ( $this->_parent != null ? $this->_parent->getNode() : null); } function getTag() { return $this->_tag; } function setTag($tag) { $this->_tag = $tag; return $this; } function setStyleFromChild($style) { } function resetStyleFromChild($style) { } function _parseNode() { if ($this->_node == null) return; $style = $this->_getStyle(); if ($this->_tag == 'a') { $this->addStyle( 'color', 'inherit'); $this->addStyle( $this->_parent->getStyle() ); $attr = MotoUtil::getAttributes( $this->_node ); if (isset($attr['href'])) { $click = Moto_Html_Render_Click::getInstance()->parse($attr['href']); $this->addAttribute('href', $click->href) ->addData('url', $click->url) ->addData('action', $click->action) ->addClass($click->class) ->addAttribute('target', $click->target) ->addAttribute('rel', $click->rel) ; } } if ($this->_tag == 'fonts') { $this->_parent->addStyle($style); $this->addStyle($style); $style = null; } else { $this->addStyle($style); } if ($this->_node->childNodes->length > 0) { for ($i = 0; $i < $this->_node->childNodes->length ; $i++) { $node = $this->_node->childNodes->item($i); switch($node->nodeType) { case 3: case 4: $this->_content[] = $node->nodeValue; break; case 1: $obj = new self(); $obj->setNode($node)->setParent($this); if ($this->_tag == 'textformat' || $this->_tag == 'font') { $obj->addStyle($this->_style); $this->_style = array(); } $obj->dispatch($this->_debug); $this->_content[] = $obj; break; } } } else { $this->_content[] = '&nbsp;'; } } function _getStyle() { $result = array(); $attr = MotoUtil::getAttributes($this->_node); if ($attr == null) return $result; foreach($attr as $name => $_value) { $value = strtolower($_value); $_name = $name; switch ($name) { case 'target': case 'href': $value = ''; break; case 'face': $name = 'font-family'; $value = '\'' . $_value . '\''; break; case 'size': $name = 'font-size'; $value .= 'px'; break; case 'align': $name = 'text-align'; break; case 'leading': $name = 'line-height'; if ($this->_node->previousSibling == null) $result[ 'margin-top' ] = -($value * 0.5) . 'px' ; $value = 1 + $value * 0.1; if ($value >= 2) $value -= 0.2; break; case 'letterspacing': $name = 'letter-spacing'; $value .= 'px'; break; case 'blockindent': $name = 'padding-left'; $value .= 'px'; break; case 'indent': $name = 'text-indent'; $value .= 'px'; break; case 'kerning': $value = ''; break; } if ($value == '') continue; $result[ $name ] = $value; } return $result; } } class Moto_Html_Render_HtmlText { static protected $_instance = null; static protected $_classItemVO = 'Moto_Html_Render_HtmlTextVO'; protected $_options = array(); protected $_dom = null; protected $_hiddenTags = array( 'root' , 'textformat' ); protected $_params = null; protected $_count = 0; function __construct($options = array()) { $this->_options = $options; } static function getInstance($options = array()) { if (self::$_instance == null) self::$_instance = new self($options); return self::$_instance; } static function setInstance($instance) { if (self::$_instance == null) self::$_instance = $instance; return self::$_instance; } static function init($options = array()) { self::getInstance($options); } function parse($str, $params = array(), $debug = false) { $this->_count = 0; $this->_params = $params; $str = trim($str); $str = '<root>' . $str . '</root>'; if ($str == '') return ''; $this->_dom = new MotoXML(); $this->_dom->loadXML($str); $html = ''; $node = MotoXML::findOneByXPath('.', $this->_dom); if ($node != null) { $x = new Moto_Html_Render_HtmlTextVO(); $x->setNode($node)->dispatch($debug); if (isset($params['returnObject']) && $params['returnObject']) return $x; if (isset($params['style'])) $x->setTag($params['style']); $html = $x->__toString(); } return $html; } function implodeStyle($array) { $style = ''; foreach($array as $name => $value) { $style .= $name . ':' . $value . ';'; } return $style; } function getParams($name, $default = '') { return (isset($this->_params[$name]) ? $this->_params[$name] : $default); } } 