<?php
class Moto_Html_Render_Widget_MenuModule extends Moto_Html_Render_Widget_Abstract { protected $_page = null; function proccess($obj, $parent = null) { $this->_module = $obj; $this->_parent = $parent; $this->_page = $this->_engine->get('page'); $html = $this->_proccess($obj); return $html; } function _proccess($obj) { $html = ''; $content = ''; $obj->type = ucfirst($obj->type); if ($obj->data !== null) $content = $this->renderItems($obj->data->items); $data = array( 'id' => 'widget_' . $obj->id, 'class' => $this->getCssClass($obj), 'style' => $this->getStyle($obj), 'content' => $content, 'widget' => Moto_Html_Util::implodeArraySimple( $this->_module ), 'widget.properties' => Moto_Html_Util::implodeArray( $this->_module->properties ), 'widget.parameters' => Moto_Html_Util::implodeArray( $this->_module->parameters ), ); $buttonsDelimiterBackground = ""; $widgetProperties = $this->_module->properties; if (isset($widgetProperties['buttonsDelimiter']) && isset($widgetProperties['buttonsDelimiter']['value']) && $widgetProperties['buttonsDelimiter']['value'] != "") { $buttonsDelimiterBackground = "background:url(" . MotoConfig::get('websiteBasePath') . $widgetProperties['buttonsDelimiter']['value'] . ") center center no-repeat;"; } $data['buttonsDelimiterBackground'] = $buttonsDelimiterBackground; $template = $obj->getTemplate('main'); if ($template == '') $template = $this->getTemplate('main'); $html = $this->_render($template, $data); return $html; } function renderItems($items, $parent = 0, $level = 0) { $html = ''; $data = array( 'content' => '', 'level' => $level, ); $template = $this->_module->getTemplate('items'); if ($template == '') $template = '<ul>{%content%}</ul>'; $_items = array(); foreach($items as &$item) { if ($item->parent == $parent) $_items[] = $item; } $params = array( 'level' => $level, ); $icount = count($_items); $params['count'] = $icount; $params['position'] = 'first'; for($i = 0; $i < $icount; $i++) { $params['num'] = $i; if ($i == ($icount-1)) $params['position'] = 'last'; $data['content'] .= $this->renderItem($_items[$i], $params); $params['position'] = ''; } $html .= $this->_render($template, $data); return $html; } function renderItem(&$item, $params = null) { if ($item == null) return ''; if ($params == null) $params = array( 'level' => 0, ); $html = ''; $menuIcon = '<div class="mjs-menu-icon"><img class="mjs-menu-icon-image" /></div>'; if (isset($item->properties['icon']) && isset($item->properties['icon']['value']) && $item->properties['icon']['value'] != "") { $menuIcon = '<div class="mjs-menu-icon"><img class="mjs-menu-icon-image" src="{%website.root_url%}{%item.properties.icon.value%}" width="{%item.properties.icon.image.parameters.width%}" height="{%item.properties.icon.image.parameters.height%}"/></div>'; } $data = array( 'label' => $item->properties['label']['value'], 'href' => '#', 'item.class' => '', 'link.class' => '', 'content' => '', 'url' => '', 'action' => '', 'rel' => '', 'target' => '', 'id' => $item->id, 'order' => $item->order, 'item' => $item, 'widget.properties' => $this->_module->properties, 'position' => (isset($params['position']) ? $params['position'] : ''), ); $menuIcon = $this->_render($menuIcon, $data); $data['menuIcon'] = $menuIcon; if ( isset($item->click) && $item->click != null) { $options = array(); $click = Moto_Html_Render_Click::getInstance()->parse($item->click, $options); $data['href'] = $click->href; $data['url'] = $click->url; $data['action'] = $click->action; $data['link.class'] = $click->class; $data['rel'] = $click->rel; $data['target'] = $click->target; if ($this->_page != null && $this->_page->url == $click->url) { $data['item.class'] .= ($data['item.class'] != '' ? ' ' : '') . $this->_cssPref . 'active'; } $data['item.class'] = trim($data['item.class']); } $template = $this->_module->getTemplate('item'); if ($template == '') $template = '<li class="{%item.class%}"><a href="{%href%}" class="{%link.class%}" data-url="{%url%}" data-action="{%action%}">{%item.properties.label.value%}</a>{%content%}</li>'; if ($item->childExists()) { $data['content'] = $this->renderItems($item->getChilds(), $item->id, $params['level']+1); if (1==11) { $classSubItems = $this->_module->getTemplate('classSubItems'); if ($classSubItems == '') $classSubItems = 'sub'; $data['class'] .= ' ' .$classSubItems; } } $html .= $this->_render($template, $data); return $html; } }