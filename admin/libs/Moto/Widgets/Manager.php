<?php
class Widgets_Manager { protected $_doms = array(); protected $_manager = null; protected $_params = array( 'storage' => MOTO_WIDGETS_DIR, 'server' => '', 'widgets' => 'widgets', 'root' => MOTO_ROOT_DIR, 'widgetTempDir' => '_tmp', ); protected $_system = null; protected $_ok = true; protected $_log = array(); protected $_executeResult = null; protected $_widgetVO = null; public function setWidgetVO($widgetVO) { $this->_widgetVO = $widgetVO; } public function getWidgetVO() { return $this->_widgetVO; } function log($value) { $debug = debug_backtrace(); $pref = (isset($debug[1]) ? $debug[1]['class'] . '->' . $debug[1]['function'] . ' :: ' : ''); $this->_log[] = $pref . $value; } function __construct($params = array()) { if (!defined('REMOTE_WIDGET_SERVICE_POINT')) define ('REMOTE_WIDGET_SERVICE_POINT', 'http://components.motocms.com/xmlrpc_server.php'); $this->_params['point'] = REMOTE_WIDGET_SERVICE_POINT; $info = parse_url(REMOTE_WIDGET_SERVICE_POINT); $this->_params['server'] = $info['scheme'] . '://' . $info['host'] . '/widgets'; if (is_array($params)) $this->_params = array_merge($this->_params, $params); $user = new UserService(); if (!$user->isAuthenticated()->status->status) { throw new Exception('', StatusEnum::WM_ERROR_USER_NOT_AUTHENTICATED); } } function initManager() { if ($this->_manager == null) $this->_manager = new WidgetsManagerVO( array( 'storage' => MOTO_WIDGETS_DIR ) ); return $this->_manager; } function isCompatibled(WidgetVO $widgetVO, $version = null) { if ($version == null) $version = MotoVersion::getVersion(); $version = MotoVersion::parseVersion($version); $widgetVersion = MotoVersion::parseVersion($widgetVO->minCompatibleVersion); return ($version['version'] >= $widgetVersion['version']); } function executePhpFile($file, $vars = array()) { $this->_executeResult = new stdClass(); $this->_executeResult->result = null; $this->_executeResult->status = 1; $this->_executeResult->error = null; $this->_executeResult->data = null; try { if (!file_exists($file)) throw new Exception('File ' . $file . ' not found', 2); if (filesize($file) < 7) throw new Exception('File ' . $file . ' is empty', 3); ob_start(); if (count($vars) > 0) extract($vars); $this->_executeResult->result = include $file; $this->_executeResult->data = ob_get_clean(); } catch (Exception $e) { $this->_executeResult->status = $e->getCode(); $this->_executeResult->error = $e->getMessage(); } return $this->_executeResult; } function createWidgetVO($filename) { if (!file_exists($filename)) return null; $dom = new MotoXML($filename); $root = MotoXML::findOneByXPath('.', $dom); return new WidgetVO($root); } function getWidgetFolder($widgetVO) { if ($widgetVO->nameSpace == '' || $widgetVO->uid == '') { throw new Exception('', StatusEnum::WM_ERROR_WIDGET_VO_IS_BAD); } return $this->_params['storage'] . '/' . $widgetVO->nameSpace . '/' . $widgetVO->uid; } function clearCache($widgetVO) { $this->setWidgetVO($widgetVO); $dir = $this->getWidgetFolder($widgetVO) . '/' . $this->_params['widgetTempDir']; if (is_dir($dir)) { MotoUtil::recurse_delete($dir, true); } return is_dir($dir); } function overwriteWidget($widgetVO) { $this->setWidgetVO($widgetVO); $widgetDir = $this->getWidgetFolder($widgetVO); $tempWidgetDir = $widgetDir . '/' . $this->_params['widgetTempDir']; if (is_dir($tempWidgetDir)) { MotoUtil::recurse_copy($tempWidgetDir, $widgetDir, true); MotoUtil::recurse_delete($tempWidgetDir, true); } return true; } protected function _update($oldWidgetVO, $newWidgetVO) { $phpFile = $this->getWidgetFolder($oldWidgetVO) . '/update.php'; try { $executePhp = $this->executePhpFile($phpFile, array( 'oldWidgetVO' => $oldWidgetVO, 'newWidgetVO' => $newWidgetVO, 'manager' => $this, ) ); } catch(Exception $e) { } } function renderWidgetNames($widgetVO, $_params = array()) { if (is_object($widgetVO) && method_exists($widgetVO, 'renderRefNames')) { $params = $this->_params; $params['server'] = 'widgets'; $params = array_merge($params, $_params); $widgetVO->renderRefNames($params); } } function updateWidget($widgetVO) { $this->setWidgetVO($widgetVO); $localWidgetVO = clone $widgetVO; $localWidgetVO->reload(); $widgetDir = $this->getWidgetFolder($widgetVO); $tempWidgetDir = $widgetDir . '/' . $this->_params['widgetTempDir']; if (is_dir($tempWidgetDir)) { MotoUtil::recurse_copy($tempWidgetDir, $widgetDir, true); MotoUtil::recurse_delete($tempWidgetDir, true); } $widgetVO->reload(); if ($localWidgetVO->build < $widgetVO->build) { $this->initManager(); $this->_manager->addWidget($localWidgetVO); $this->_update($localWidgetVO, $widgetVO); } else { throw new Exception('', StatusEnum::WM_ERROR_NEW_BUILD_LESS_CURRENT); } $widgetVO->reload(); $this->renderWidgetNames($widgetVO); return $widgetVO; } }