<?php
class Widgets_Manager_Remote extends Widgets_Manager { static protected $_api = null; function getApi() { if (self::$_api == null) { self::$_api = new Widgets_Manager_Api(array( 'secret' => '8F1CBEBF4F01K', 'api_point' => 'http://components.motocms.dev/service/shopapi.do', )); } return self::$_api; } function call() { $args = func_get_args(); if (!isset($args[0]) && !is_string($args[0])) return null; $method = $args[0]; unset($args[0]); $method_name = $method; if (method_exists($this, $method_name)) { return call_user_func_array(array($this, $method_name), $args); } else { $api = $this->getApi(); return call_user_func_array(array($api, $method), $args); } } function loginUser($user, $relogin = false) { if ($this->getApi()->userIsLogged() == false || $relogin == true) { $this->getApi()->loginUser($user->login, $user->password); } else { } } function getList($request = '') { $api = $this->getApi(); $this->initManager(); $options = array(); if (is_array($request)) $options = $request; $options['minCompatibleVersion'] = '1.3'; $result = $api->searchBuilds($options); if (isset($result['list']) && is_array($result['list'])) { foreach($result['list'] as $i => $widget) { $widgetVO = new RemoteWidgetVO($widget); $this->_manager->addWidget($widgetVO); $widgetVO->renderRefNames($this->_params); } } return $this->_manager; } function addWidget(RemoteWidgetVO $widgetVO, $mode = 'add') { $widgetDir = $this->getWidgetFolder($widgetVO); $tmpFolder = $widgetDir . '/_tmp/ ' . $mode . '-' . $widgetVO->build; MotoUtil::createDir( $tmpFolder ); $filename = 'widgets/' . $widgetVO->nameSpace . '/' . $widgetVO->uid . '/_tmp/' . $mode . '-' . $widgetVO->build . '.zip'; $result = $this->_downloadFile( $widgetVO->downloadLink, MOTO_ROOT_DIR . '/' . $filename, $widgetVO->fileStamp ); if (!$result) throw new Exception('', StatusEnum::WM_ERROR_WHILE_ADD_REMOTE); $tmpFolder = $this->extractFile($filename, $tmpFolder); $check = $this->checkWidgetFolder($tmpFolder); if ($check) { MotoUtil::recurse_copy($tmpFolder, $widgetDir, true); MotoUtil::recurse_delete($tmpFolder, true); @unlink(MOTO_ROOT_DIR . '/' . $filename); $widgetVO->compatible = $this->isCompatibled($widgetVO, MotoVersion::getVersion()); } else { MotoUtil::recurse_delete($tmpFolder, true); } $widgetVO->reload(); $params = $this->_params; $params['server'] = 'widgets'; $widgetVO->renderRefNames($params); return $widgetVO; } private function _downloadFile($url, $filename, $stamp = null) { $result = 1; $url .= '?rnd=' . time(); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20); curl_setopt($ch, CURLOPT_TIMEOUT, 28); $data = curl_exec($ch); curl_close($ch); @file_put_contents($filename, $data); if (!is_null($stamp)) { $_stamp = array(md5_file($filename), sha1_file($filename)); if ($stamp[0] != md5_file($filename) || $stamp[1] != sha1_file($filename)) { $result = self::REMOTE_BAD_STAMP; } } return $result; } public function extractFile($filename, $tmpFolder = '', $rewrite = true) { if (!is_file(MOTO_ROOT_DIR . '/' . $filename)) throw new Exception($filename, StatusEnum::WM_ERROR_FILE_NOT_FOUND); if ($tmpFolder == '') { while( file_exists($tmpFolder = MOTO_WIDGETS_DIR . '/' . uniqid() )){} } MotoUtil::createDir( $tmpFolder ); $zip = new ZipArchive(); $res = $zip->open(MOTO_ROOT_DIR . '/' . $filename); if (!$res) throw new Exception('', StatusEnum::WM_ERROR_FILE_IS_NOT_ARCHIVE); $res = $zip->extractTo($tmpFolder); if (!$res) { if (is_dir($tmpFolder)) MotoUtil::recurse_delete($tmpFolder, true); throw new Exception('', StatusEnum::WM_ERROR_FILE_IS_NOT_ARCHIVE); } $zip->close(); return $tmpFolder; } function checkWidgetFolder($folder) { $result = true; $mainXml = $folder . '/widget.xml'; $result = $result && file_exists($mainXml); if ($result) { $dom = new MotoXML($mainXml); $root = MotoXML::findOneByXPath('.', $dom); $widgetVO = new WidgetVO($root); $result = $widgetVO->isFilled(); } return $result; } function addUploadedWidget($filename) { try { $tmpFolder = $this->extractFile($filename); } catch(Exception $e) { if (isset($tmpFolder) && $tmpFolder != '' && is_dir($tmpFolder)) MotoUtil::recurse_delete($tmpFolder, true); @unlink(MOTO_ROOT_DIR . '/' . $filename); throw new Exception(basename($filename), StatusEnum::WM_ERROR_FILE_IS_NOT_ARCHIVE); } $widgetVO = $this->createWidgetVO($tmpFolder . '/widget.xml'); $this->renderWidgetNames($widgetVO); $this->setWidgetVO($widgetVO); if ($widgetVO == null || $widgetVO->isFilled() != true) { MotoUtil::recurse_delete($tmpFolder, true); @unlink(MOTO_ROOT_DIR . '/' . $filename); throw new Exception(basename($filename), StatusEnum::WM_ERROR_WHILE_CREATING_WIDGET_VO); } $widgetDir = $this->getWidgetFolder($widgetVO); $tmpWidgetDir = $widgetDir . '/_tmp'; MotoUtil::createDir( $tmpWidgetDir ); if (!is_dir($tmpWidgetDir) || !is_writable($tmpWidgetDir)) { MotoUtil::recurse_delete($tmpFolder, true); @unlink(MOTO_ROOT_DIR . '/' . $filename); throw new Exception($widgetDir, StatusEnum::WM_ERROR_TEMP_FOLDER_IS_NOT_WRITABLE); } MotoUtil::recurse_copy($tmpFolder, $tmpWidgetDir, true); MotoUtil::recurse_delete($tmpFolder, true); @unlink(MOTO_ROOT_DIR . '/' . $filename); $widgetVO->compatible = $this->isCompatibled($widgetVO, MotoVersion::getVersion()); if (!$widgetVO->compatible) { MotoUtil::recurse_delete($tmpWidgetDir, true); throw new Exception('', StatusEnum::WM_ERROR_NOT_COMPATIBLE_VERSION); } if (file_exists($widgetDir . '/widget.xml')) { $localWidgetVO = clone $widgetVO; $localWidgetVO->reload(); if ($widgetVO->build < $localWidgetVO->build) throw new Exception('', StatusEnum::WM_ERROR_UPLOADED_BUILD_IS_LESS_EXISTED); if ($widgetVO->build == $localWidgetVO->build) throw new Exception('', StatusEnum::WM_ERROR_UPLOADED_BUILD_IS_EQUAL_EXISTED); if ($widgetVO->build > $localWidgetVO->build) throw new Exception('', StatusEnum::WM_ERROR_UPLOADED_BUILD_IS_MORE_EXISTED); } MotoUtil::recurse_copy($tmpWidgetDir, $widgetDir, true); MotoUtil::recurse_delete($tmpWidgetDir, true); $this->renderWidgetNames($widgetVO); return $widgetVO; } public function checkForUpdate(WidgetVO $widgetVO) { $widgetVO->reload(); $request = array(); $request['uid'] = $widgetVO->uid; $request['nameSpace'] = $widgetVO->nameSpace; $request['build'] = $widgetVO->build; $client = new MotoXmlRpc(REMOTE_WIDGET_SERVICE_POINT); $res = $client->sendRequest('WidgetsService.checkForUpdate', $request); return $res; $result = null; if ($res) { $result = new RemoteWidgetVO($res); $result = ($widgetVO->build < $result->build); } return $result; } public function checksForUpdate($widgets) { $request = array(); foreach($widgets as $widgetVO) { $request[] = array( 'uid' => $widgetVO->uid, 'nameSpace' => $widgetVO->nameSpace, 'build' => $widgetVO->build, ); } $client = new MotoXmlRpc(REMOTE_WIDGET_SERVICE_POINT); $res = $client->sendRequest('WidgetsService.checksForUpdate', $request); $result = array(); foreach($res as $widget) { $vo = new RemoteWidgetVO($widget); $this->renderWidgetNames($vo, array('server'=>$this->_params['server'])); $result[] = $vo; } return $result; } private function _getRemoteWidgetVO($uid, $nameSpace) { $request = array(); $request['uid'] = $uid; $request['nameSpace'] = $nameSpace; $client = new MotoXmlRpc(REMOTE_WIDGET_SERVICE_POINT); $res = $client->sendRequest('WidgetsService.getWidgetInfo', $request); $result = null; if ($res) { $result = new RemoteWidgetVO($res); } return $result; } public function update(WidgetVO $widgetVO) { $localWidgetVO = clone $widgetVO; if (!$localWidgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); if ($localWidgetVO->build > $widgetVO->build) throw new Exception('', StatusEnum::WM_ERROR_NEW_BUILD_LESS_CURRENT); $widgetVO = $localWidgetVO; unset($localWidgetVO); $remoteWidgetVO = $this->_getRemoteWidgetVO($widgetVO->uid, $widgetVO->nameSpace); if ($remoteWidgetVO->build <= $widgetVO->build) throw new Exception('', StatusEnum::WM_ERROR_REMOTE_BUILD_IS_NOT_HIGH); $remoteWidgetVO->compatible = $this->isCompatibled($remoteWidgetVO, MotoVersion::getVersion()); if (!$remoteWidgetVO->compatible) throw new Exception('', StatusEnum::WM_ERROR_NOT_COMPATIBLE_VERSION); $this->initManager(); $this->_manager->addWidget($widgetVO); $mode = 'skip'; if($widgetVO->installed) $mode = 'update'; $this->addWidget($remoteWidgetVO, 'update'); if ($mode == 'update') { $this->_update($widgetVO, $remoteWidgetVO); } $widgetVO->reload(); $this->renderWidgetNames($widgetVO); $widgetVO->updateAvailable = false; return $widgetVO; } function getAccessToken() { } }