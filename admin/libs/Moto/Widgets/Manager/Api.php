<?php
class Widgets_Manager_Api { const VERSION = '0.0.1'; const ERROR_POINT_NOT_SET = 'API_POINT_NOT_SET'; const ERROR_RESPONSE_JSON_BAD = 'API_RESPONSE_JSON_BAD'; const ERROR_RESPONSE_BAD = 'API_RESPONSE_BAD'; static protected $_instance = null; protected $_session = null; protected $_params = array( 'sidsource' => 'session', 'api_area' => 'MOTO_Widget_Manager_Api', 'api_point' => 'http://components.motocms.com/service/shopapi.do', 'curl' => array( CURLOPT_CONNECTTIMEOUT => 20, CURLOPT_RETURNTRANSFER => true, CURLOPT_TIMEOUT => 60, CURLOPT_USERAGENT => 'motocms-php-0.0.1', CURLOPT_HTTPHEADER => array('Expect:'), ), 'sid_cache' => 7200, ); protected $_error = null; static public $debug = ''; function __construct($params = array()) { if (is_array($params)) $this->_params = array_merge($this->_params, $params); $this->initSession(); } static function getInstance($params = array()) { if (self::$_instance == null) self::$_instance = new self($params); return self::$_instance; } function getParam($key, $default = null) { return (isset($this->_params[$key]) ? $this->_params[$key] : $default); } function setParam($key, $value) { $this->_params[$key] = $value; } function getSid() { $sid = $this->getSession('sid'); $expires = $this->getSession('sid_expires'); if ($sid != null && $expires > time()) return $sid; $this->saveSession('sid'); $this->saveSession('sid_expires', 0); return null; } function userIsLogged() { return ($this->getSid('sid') != null); } function initSession() { if ($this->_session == null) { $this->_session = (isset($_SESSION[$this->getParam('api_area', __CLASS__)]) ? $_SESSION[$this->getParam('api_area', __CLASS__)] : array()); } } function getSession($key, $default = null) { return (isset($this->_session[$key]) ? $this->_session[$key] : $default); } function setSession($key, $value = null) { $this->_session[$key] = $value; } function saveSession($key, $value) { $this->setSession($key, $value); $_SESSION[$this->getParam('api_area', __CLASS__)] = $this->_session; } function setError($msg, $code = 0) { $this->_error = array('message' => $msg, 'code' => $code); } function isError() { return ($this->_error != null); } function getError() { return $this->_error; } function resetError() { $this->_error = null; } function getErrorMessage() { return (isset($this->_error['message']) ? $this->_error['message'] : ''); } function getErrorCode() { return (isset($this->_error['code']) ? $this->_error['code'] : 0); } function loginUser($login, $password, $secret = null) { self::$debug .= "<pre>"; self::$debug .="Api is login to server\n"; if ($secret == null) $secret = $this->getParam ('secret'); $request = array( 'method' => 'loginUser', 'params' => array( 'login' => $login, 'password' => $password, 'hash' => strtoupper(md5($login . $password . $secret)), ) ); $this->setSession('sid', null); $this->saveSession('sid_expires', 0); $result = $this->makeRequest($request); self::$debug .= '<hr>'; self::$debug .= var_export($result, true); self::$debug .= '<hr>'; $data = json_decode($result, true); if ($data == null) { $this->setError(self::ERROR_RESPONSE_JSON_BAD, 1); throw new Exception(self::ERROR_RESPONSE_JSON_BAD); } if (isset($data['error'])) { if ( !isset($data['errorCode']) ) $data['errorCode'] = 1; $message = 'API_ERROR_' . $data['errorCode']; $this->setError($data['error'], $data['errorCode']); throw new Exception($message); } if (!isset($data['sid'])) { $this->setError(self::ERROR_RESPONSE_BAD, 1); throw new Exception(self::ERROR_RESPONSE_BAD); } $this->setSession('sid', $data['sid']); $this->saveSession('sid_expires', time() + $this->getParam('sid_cache', 60*60*2)); return true; } function logoutUser() { $request = array( 'method' => 'logoutUser', 'params' => array( 'sid' => $this->getSid() ) ); $this->setSession('sid', null); $this->saveSession('sid_expires', 0); $result = $this->makeRequest($request); $data = json_decode($result, true); if ($data == null) { $this->setError(self::ERROR_RESPONSE_JSON_BAD, 1); throw new Exception(self::ERROR_RESPONSE_JSON_BAD); } if (isset($data['error'])) { if ( !isset($data['errorCode']) ) $data['errorCode'] = 1; $message = 'API_ERROR_' . $data['errorCode']; $this->setError($data['error'], $data['errorCode']); throw new Exception($message); } return true; } function prepareRequest($name, $arguments) { if (is_array($arguments)) $params = $arguments; $params['sid'] = $this->getSid(); $request = array( 'method' => $name, 'params' => $params ); return $request; } function __call($name, $arguments) { $request = $this->prepareRequest($name, $arguments[0]); $result = $this->makeRequest($request); $data = json_decode($result, true); if ($data == null) { $this->setError(self::ERROR_RESPONSE_JSON_BAD, 1); throw new Exception(self::ERROR_RESPONSE_JSON_BAD); } if (isset($data['error'])) { if ( !isset($data['errorCode']) ) $data['errorCode'] = 1; $message = 'API_ERROR_' . $data['errorCode']; $this->setError($data['error'], $data['errorCode']); throw new Exception($message); } return $data; } function makeRequest($request, $params = null, $point = null) { if ($point == null) $point = $this->getParam('api_point'); if ($point == null || $point == '') throw new Exception (self::ERROR_POINT_NOT_SET, 0); $opts = $this->getParam('curl', array()); if (is_array($params)) $opts = array_merge($curlOpts, $params); if (!is_string($request)) $request = json_encode($request); $opts[CURLOPT_POSTFIELDS] = $request; $opts[CURLOPT_URL] = $point; $ch = curl_init(); curl_setopt_array($ch, $opts); $result = curl_exec($ch); if ($result === false) { $e = new Exception(curl_error($ch), curl_errno($ch)); curl_close($ch); throw $e; } curl_close($ch); return $result; } }