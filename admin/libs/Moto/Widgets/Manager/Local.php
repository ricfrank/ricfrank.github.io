<?php
class Widgets_Manager_Local extends Widgets_Manager { function __construct($params = array()) { $params['server'] = 'widgets'; parent::__construct($params); } function getList($storage = '') { $this->initManager(); if ($storage == '') $storage = $this->_params['storage']; $nameSpaces = scandir($storage); foreach($nameSpaces as $nameSpace) if ( $nameSpace != '.' && $nameSpace != '..' && is_dir($storage . '/' . $nameSpace) ) { $list = scandir($storage . '/' . $nameSpace); foreach($list as $name) if ($name != '.' && $name != '..' && is_dir($storage . '/' . $nameSpace . '/' . $name) && file_exists( $storage . '/' . $nameSpace . '/' . $name . '/widget.xml')) { $dom = new MotoXML($storage . '/' . $nameSpace . '/' . $name . '/widget.xml'); $root = MotoXML::findOneByXPath('.', $dom); if (!is_null($root)) { $widgetVO = new WidgetVO($root); $widgetVO->uid = $name; $widgetVO->compatible = $this->isCompatibled($widgetVO, MotoVersion::getVersion()); $this->_manager->addWidget($widgetVO); $params = $this->_params; $params['server'] = 'widgets'; $widgetVO->renderRefNames($params); } } } return $this->_manager; } function install(WidgetVO $widgetVO) { if (!$widgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); $this->_manager = $this->initManager(); $this->_manager->addWidget($widgetVO); $result = null; $widgetVO->renderRefNames($this->_params); if (!$widgetVO->installed || 1==1) { $method = '_install' . ucfirst(strtolower($widgetVO->type)); if (method_exists($this, $method)) { $this->$method($widgetVO); $result = $widgetVO; } } else { } $phpFile = $this->_params['storage'] . '/' . $widgetVO->nameSpace . '/' . $widgetVO->uid . '/install.php'; try { $executePhp = $this->executePhpFile($phpFile, array('widgetVO' => $widgetVO, 'manager' => $this)); } catch(Exception $e) { } $this->_manager->setInstalled($widgetVO); $this->_activate($widgetVO); $this->saveDoms(); return $result; } function uninstall(WidgetVO $widgetVO) { $this->log('init'); if (!$widgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); $this->log('manager.init'); $this->_manager = $this->initManager(); $this->log('manager.add widget'); $this->_manager->addWidget($widgetVO); $result = null; $widgetVO->renderRefNames($this->_params); if (!$widgetVO->installed) throw new Exception('', StatusEnum::WM_ERROR_NOT_INSTALLED); if ($this->_ok) { $this->_removeWidgetFromFiles($widgetVO); } if ($this->_ok) { $method = '_uninstall' . ucfirst(strtolower($widgetVO->type)); if (method_exists($this, $method)) $this->$method($widgetVO); } $dataProviders = array(); if ($this->_ok) $dataProviders = $this->_removeWidgetDataproviders($widgetVO); $phpFile = $this->_params['storage'] . '/' . $widgetVO->nameSpace . '/' . $widgetVO->uid . '/uninstall.php'; try { $executePhp = $this->executePhpFile($phpFile, array('widgetVO' => $widgetVO, 'manager' => $this)); } catch(Exception $e) { } if ($this->_ok) $this->saveDoms(); if ($this->_ok && 1==1) $this->_manager->uninstall($widgetVO); foreach($dataProviders as $dataProvider) { if (file_exists(MOTO_ROOT_DIR . '/' . $dataProvider)) { @unlink(MOTO_ROOT_DIR . '/' . $dataProvider); $this->log('unlink ' . $dataProvider); } } $result = $widgetVO; return $result; } protected function _activate(WidgetVO $widgetVO) { $widgetVO->typeVOs = array(); $type = $widgetVO->type; $types = $type . 's'; $typeVO = ucfirst(strtolower($type)) . 'TypeVO'; $dom = $this->getDom(STRUCTURE_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./' . $types, $dom); if ($root != null) { $save = false; $query = './' . $type . '[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '" ]'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) foreach($nodes as $node) { $node->setAttribute('enabled', 'true'); $widgetVO->typeVOs[] = new $typeVO($node); $save = true; } $this->setSaveDom(STRUCTURE_RESOURSE_PATH, $save); } $dom = $this->getDom(MENUS_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./menusStructure', $dom); if ($root != null) { $save = false; $query = './menuType[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) foreach($nodes as $node) { $widgetVO->typeVOs[] = new MenuTypeVO($node); $save = true; } $this->setSaveDom(MENUS_RESOURSE_PATH, $save); } $this->_manager->setActivated($widgetVO, true); } function activate(WidgetVO $widgetVO) { if (!$widgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); $this->_manager = $this->initManager(); $this->_manager->addWidget($widgetVO); $result = null; $widgetVO->renderRefNames($this->_params); if ($widgetVO->installed) { $this->_activate($widgetVO); $this->saveDoms(); $result = $widgetVO; } return $result; } function deactivate(WidgetVO $widgetVO) { if (!$widgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); $this->_manager = $this->initManager(); $this->_manager->addWidget($widgetVO); $result = null; $widgetVO->renderRefNames($this->_params); if ($widgetVO->installed) { $type = $widgetVO->type; $types = $type . 's'; $typeVO = ucfirst(strtolower($type)) . 'TypeVO'; $dom = $this->getDom(STRUCTURE_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./' . $types, $dom); if ($root != null) { $save = false; $query = './' . $type . '[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '" ]'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) foreach($nodes as $node) { $node->setAttribute('enabled', 'false'); $widgetVO->typeVOs[] = new $typeVO($node); $save = true; } $this->setSaveDom(STRUCTURE_RESOURSE_PATH, $save); } $dom = $this->getDom(MENUS_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./menusStructure', $dom); if ($root != null) { $save = false; $query = './menuType[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) foreach($nodes as $node) { $widgetVO->typeVOs[] = new MenuTypeVO($node); $save = true; } $this->setSaveDom(MENUS_RESOURSE_PATH, $save); } $this->saveDoms(); $this->_manager->setActivated($widgetVO, false); $result = $widgetVO; } return $result; } function remove(WidgetVO $widgetVO) { if (!$widgetVO->reload()) throw new Exception('', StatusEnum::WM_ERROR_CANT_RELOAD_WIDGET_XML); $this->_manager = $this->initManager(); $this->_manager->addWidget($widgetVO); if ($widgetVO->installed) { $this->error = 'Widget is installed, can not removed'; throw new Exception('', StatusEnum::WM_ERROR_CANT_BE_REMOVED_BY_INSTALLED); } $dir = $this->_params['storage'] . '/' . $widgetVO->nameSpace . '/' . $widgetVO->uid; if (is_dir($dir)) MotoUtil::recurse_delete($dir, true); else throw new Exception('', StatusEnum::WM_ERROR_DIR_NOT_EXISTS); return true; } protected function _installSlot(WidgetVO $widgetVO) { $this->log('init'); $widgetVO->typeVOs = array(); $this->_installWidgetToStructure($widgetVO); $this->log('finished'); } protected function _uninstallSlot(WidgetVO $widgetVO) { $this->log('init'); $widgetVO->typeVOs = array(); $this->_uninstallWidgetFromStructure($widgetVO); $this->log('finished'); } protected function _installModule(WidgetVO $widgetVO) { $this->log('init'); $widgetVO->typeVOs = array(); $this->_installWidgetToStructure($widgetVO); $this->_installWidgetToModules($widgetVO); $this->_installWidgetToMenus($widgetVO); $this->log('finished'); } protected function _uninstallModule(WidgetVO $widgetVO) { $this->log('init'); $widgetVO->typeVOs = array(); $this->_uninstallWidgetFromStructure($widgetVO); $this->_uninstallWidgetFromModules($widgetVO); $this->_uninstallWidgetFromMenus($widgetVO); $this->log('finished'); } function getMaxId($type, $dom = null, $parent = null) { $id = 0; if ($dom == null) $dom = MotoXML::create(STRUCTURE_RESOURSE_PATH); if ($parent == null) $parent = $type . 's'; $root = MotoXML::findOneByXPath('./' . $parent, $dom); $query = './' . $type . '[not(@id <= preceding-sibling::' . $type . '/@id) and not(@id <= following-sibling::' . $type . '/@id)]'; $maxIdNode = MotoXML::findOneByXPath($query, $root); if (!is_null($maxIdNode)) { $id = $maxIdNode->getAttribute('id')*1; } return $id; } protected function getDom($path) { $md5 = md5($path); if (!isset($this->_doms[$md5])) $this->_doms[$md5] = array('dom' => MotoXML::create($path), 'path' => $path, 'save' => false); return $this->_doms[$md5]['dom']; } protected function saveDoms() { foreach($this->_doms as &$xml) if ($xml['save']) { MotoXML::putXML($xml['dom'], $xml['path']); $xml['save'] = false; } } protected function setSaveDom($path, $save = true) { $md5 = md5($path); if (isset($this->_doms[$md5])) { $this->log(($save*1) . ' : ' .$path); $this->_doms[$md5]['save'] = $save; } } protected function _installWidgetToStructure(WidgetVO $widgetVO) { $xml = $widgetVO->getData('_structure'); if ($xml == '') return false; $type = $widgetVO->type; $structureDom = new MotoXML(); $structureDom->loadXML($xml); $structureRoot = MotoXML::findOneByXPath('.', $structureDom); $nodes = MotoXML::findByXPath('./*', $structureRoot); $save = false; if (!is_null($nodes) && $nodes) { $dom = $this->getDom(STRUCTURE_RESOURSE_PATH); foreach($nodes as $node) { $root = MotoXML::findOneByXPath('./' . $node->nodeName . 's', $dom); $typeVO = ucfirst(strtolower($node->nodeName)) . 'TypeVO'; $id = $this->getMaxId($node->nodeName, $dom) + 1; $node->setAttribute('id', $id); $node->setAttribute('nameSpace', $widgetVO->nameSpace); $node->setAttribute('uid', $widgetVO->uid); $widgetVO->typeVOs[] = new $typeVO($node); $query = './' . $node->nodeName . '[@nameSpace="' . $widgetVO->nameSpace . '"' . ' and @uid="' . $widgetVO->uid . '"' . ($node->hasAttribute('type') ? ' and @type="'.$node->getAttribute('type').'"' : '') . ($node->hasAttribute('librarySymbolLinkage') ? ' and @librarySymbolLinkage="'.$node->getAttribute('librarySymbolLinkage').'"' : '') . ']'; $nodeExists = MotoXML::findOneByXPath($query, $root); if ($nodeExists != null) { $node->setAttribute('id', $nodeExists->getAttribute('id')); $nodeExists->parentNode->removeChild($nodeExists); } $xml = $node->parentNode->ownerDocument->saveXML($node); $nodex = $root->ownerDocument->createDocumentFragment(); $nodex->appendXML($xml); $root->appendChild($nodex); $save = true; } } $this->setSaveDom(STRUCTURE_RESOURSE_PATH, $save); return ; } protected function _installWidgetToModules(WidgetVO $widgetVO) { if ($widgetVO->type != 'module') return; $widgetVO->createModulesFromXML(); if (count($widgetVO->customModuleVOs) < 1) return; $dom = $this->getDom(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY); $root = MotoXML::findOneByXPath('.', $dom); if ($root == null) return ; $save = false; foreach($widgetVO->customModuleVOs as $module) { $query = './module[@id="' . $module->id . '"' . ' and @url="' . $module->url . '"' . ' and @uid="' . $module->uid . '"' . ' and @nameSpace="' . $module->nameSpace . '"' . ']'; $node = MotoXML::findOneByXPath($query, $root); if (is_null($node)) { $node = new DOMElement('module'); $root->appendChild($node); } $node->setAttribute('id', $module->id); $node->setAttribute('url', $module->url); $node->setAttribute('uid', $widgetVO->uid); $node->setAttribute('nameSpace', $widgetVO->nameSpace); $save = true; } $this->setSaveDom(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY, $save); } protected function _installWidgetToMenus(WidgetVO $widgetVO) { if ($widgetVO->type != 'module') return; $xml = $widgetVO->getData('_menus'); if ($xml == '') return; $dom = $this->getDom(MENUS_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./menusStructure', $dom); if ($root == null) return ; $save = false; $menuDom = new MotoXML(); $menuDom->loadXML($xml); $menuRoot = MotoXML::findOneByXPath('.', $menuDom); $nodes = MotoXML::findByXPath('.//menuType', $menuRoot); if ($nodes == null) return ; foreach($nodes as $node) { $id = $this->getMaxId('menuType', $dom, 'menusStructure') + 1; $node->setAttribute('id', $id); $node->setAttribute('uid', $widgetVO->uid); $node->setAttribute('nameSpace', $widgetVO->nameSpace); $xml = $node->parentNode->ownerDocument->saveXML($node); $widgetVO->typeVOs[] = new MenuTypeVO($node); $nodeExists = MotoXML::findOneByXPath('./' . $node->nodeName . '[@nameSpace="'.$widgetVO->nameSpace.'" and @uid="'.$widgetVO->uid.'"]', $root); if ($nodeExists != null) { $node->setAttribute('id', $nodeExists->getAttribute('id')); $nodeExists->parentNode->removeChild($nodeExists); } $nodex = $root->ownerDocument->createDocumentFragment(); $nodex->appendXML($xml); $root->appendChild($nodex); $save = true; } $this->setSaveDom(MENUS_RESOURSE_PATH, $save); } protected function _uninstallWidgetFromStructure(WidgetVO $widgetVO) { $this->log('init'); $xml = $widgetVO->getData('_structure'); if ($xml == '') return $this->log('finished'); $save = false; $dom = $this->getDom(STRUCTURE_RESOURSE_PATH); $query = './/' . $widgetVO->type .'[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]'; $nodes = MotoXML::findByXPath($query, $dom); if ($nodes != null) { foreach($nodes as $node) { $this->log('remove node ' . $node->nodeName . ' @id=' . $node->getAttribute('id')); $typeVO = ucfirst(strtolower($node->nodeName)) . 'TypeVO'; $widgetVO->typeVOs[] = new $typeVO($node); $node->parentNode->removeChild($node); $save = true; } } $this->setSaveDom(STRUCTURE_RESOURSE_PATH, $save); $this->log('finished'); } protected function _uninstallWidgetFromModules(WidgetVO $widgetVO) { $this->log('init'); if ($widgetVO->createModulesFromXML()) { $dom = $this->getDom(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY); $root = MotoXML::findOneByXPath('.', $dom); if ($root == null) return $this->log('finished'); $save = false; foreach($widgetVO->customModuleVOs as $module) { $query = './module[@id="' . $module->id . '"' . ' and @url="' . $module->url . '"' . ' and @uid="' . $module->uid . '"' . ' and @nameSpace="' . $module->nameSpace . '"' . ']'; $node = MotoXML::findOneByXPath($query, $root); if ($node != null) { $node->parentNode->removeChild($node); $save = true; $this->log('remove node from modules.xml'); } } $this->setSaveDom(MOTO_ADMIN_DIR . '/' . MODULES_LIBRARY, $save); } $this->log('finished'); } protected function _uninstallWidgetFromMenus(WidgetVO $widgetVO) { $this->log('init'); $xml = $widgetVO->getData('_menus'); if ($xml == '') return ; $save = false; $dom = $this->getDom(MENUS_RESOURSE_PATH); $root = MotoXML::findOneByXPath('./menusStructure', $dom); if ($root == null) return $this->log('finished'); $query = './menuType[@nameSpace="' . $widgetVO->nameSpace . '" and @uid="' . $widgetVO->uid . '"]'; $nodes = MotoXML::findByXPath($query, $root); if (!is_null($nodes) && $nodes) { foreach($nodes as $node) { $this->log('remove menuType ' . $node->getAttribute('id')); $menus = MotoXML::findByXPath('./menusData/menu[@menuType='.$node->getAttribute('id').']', $dom); if ($menus != null) foreach($menus as $menu) { $this->log('remove menu ' . $menu->getAttribute('id')); $menu->parentNode->removeChild($menu); } $widgetVO->typeVOs[] = new MenuTypeVO($node); $node->parentNode->removeChild($node); $save = true; } } $this->setSaveDom(MENUS_RESOURSE_PATH, $save); $this->log('finished'); } protected function _removeWidgetFromFiles(WidgetVO $widgetVO) { $this->log('init'); $files = array( md5(CONTENT_RESOURSE_PATH) => CONTENT_RESOURSE_PATH ); $dom = $this->getDom(CONTENT_RESOURSE_PATH); $files = $this->getDataProvidersFromXML($dom, $files); $this->log('get files : ' . print_r($files, true)); $ids = $this->_manager->getStructureTypes($widgetVO); if (count($ids) > 0) { foreach($files as $file) { $this->log('remove nodes from file : ' . $file ); $dom = $this->getDom($file); $result = $this->_removeWidgetFromFile($widgetVO, $dom, $ids); $this->setSaveDom($file, $result); } } $this->log('finish'); } protected function _removeWidgetFromFile(WidgetVO $widgetVO, $dom, $mapOfId) { $type = $widgetVO->type; $types = $type . 's'; $typeVO = ucfirst(strtolower($type)) . 'TypeVO'; $root = MotoXML::findOneByXPath('.', $dom); if ($root == null) return false; $query = ''; foreach($mapOfId as $type => $ids) { foreach($ids as $id) { if ($query != '') $query .= ' or '; $query .= '@' . $type . 'Type=' . $id; } } $save = false; $query = './/' . $widgetVO->type . '[' . $query . ']'; $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) { foreach($nodes as $node) { $this->log('remove node : ' . $node->nodeName . ' @id=' . $node->getAttribute('id')); $node->parentNode->removeChild($node); $save = true; } } return $save; } public function getDataProvidersFromXML($dom, $files = array()) { $modules = MotoXML::findByXPath('.//module[@externalData="true" and @externalFile!=""]', $dom); if (!is_null($modules)) { foreach($modules as $module) { $filename = $module->getAttribute('externalFile'); if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { $files[md5(MOTO_ROOT_DIR . '/' . $filename)] = MOTO_ROOT_DIR . '/' . $filename; } } } return $files; } protected function _removeWidgetDataproviders(WidgetVO $widgetVO) { $result = array(); $ids = $this->_manager->getStructureTypes($widgetVO); if (!isset($ids['module']) && count($ids['module']) < 1) return; $dom = MotoSystem::getAccess(MotoSystem::MODULES_SECTION , MotoSystem::MODULES_DATAPROVIDERS); if (is_null($dom)) throw new Exception('', StatusEnum::WM_ERROR_CANT_GET_ACCESS_TO_SYSTEM); foreach($ids['module'] as $id) { $nodes = MotoXML::findByXPath('.//dataProvider[@moduleType="' . $id . '"]', $dom); if ($nodes != null) { foreach($nodes as $node) { $item = new ModuleDataProviderVO($node); if (is_array($item->sources)) foreach($item->sources as $source) $result[] = $source->value; $node->parentNode->removeChild($node); } } } return $result; } }