<?php
 class MotoUtil { const ERROR_ON_CURL_REQUEST = 'ERROR_ON_CURL_REQUEST'; const ERROR_BAD_PARAMS = 'ERROR_BAD_PARAMS'; const TOKEN_COUNT_IP_DIGIST_IGNORE = 2; public static function toBoolean($str) { return strtolower((string) $str) === 'true'; } public static function boolToString($boolean) { return ((boolean) $boolean) ? 'true' : 'false'; } public static function basename($filename) { if (stristr(PHP_OS, 'win') || stristr(PHP_OS, 'netware')) { return preg_replace('/^.*[\\\\\\/]/', '', $filename); } else { return preg_replace('/^.*[\/]/', '', $filename); } } public static function getValue($var, $default = null) { return empty($var) ? $default : $var; } public static function optimizeHtmlText($str, $options = array(' LETTERSPACING="0"' , ' KERNING="0"')) { for($i = 0; $i < count($options); $i++) { $str = preg_replace("/" . str_replace('"', '\\"', $options[$i]) . "/i", "" , $str); } return $str; } public static function responseVOToArray(ResponseVO $obj) { $ans = array(); if (isset($obj->result)) foreach($obj->result as $prop=>$value) $ans[$prop] = $value; return $ans; } public static function replaceSlashes($path) { return preg_replace("/[\/\\\]+/", "/", $path); } public static function getClippedPath($path, $subdir, $mode = "right") { $path = self::replaceSlashes( $path ); $subdir = self::replaceSlashes( $subdir ); if ($mode == "right" && $subdir != "" ) { if ($subdir != "" && strpos($path, $subdir) === 0) { $path = substr($path, strlen($subdir)); } if ($path[0]=="/") $path = substr($path, 1); } if ($mode == "left" && $subdir != "") { if ($subdir[strlen($subdir)-1] == "/") $subdir = substr($subdir, 0, strlen($subdir)-1); $pos = (strlen($path) - 1) - strpos(strrev($path), strrev($subdir)) - (strlen($subdir) - 1); if ($pos > 0) { $path = substr($path, 0, $pos); } if ($path[strlen($path)-1] == "/") $path = substr($path, 0, strlen($path)-1); } return $path; } public static function fileUniqueName($file, $add = "_", $baseDir = '') { if ($baseDir == '') $baseDir = MotoConfig::get('websiteBasePath'); $info = pathinfo($file); $info["dirname"] = preg_replace("/[\/\\\]+/", "/", $info["dirname"]); $info["filename"] = str_replace(' ', '_', $info["filename"]); if (!is_dir($baseDir . '/' . $info["dirname"])) { throw new Exception("Not found dir"); } if ( file_exists($baseDir . '/' . $filename = $info["dirname"] . '/' . $info["filename"] . '.' . $info["extension"]) ) { while(file_exists($baseDir . '/' . $filename = $info["dirname"] . '/' . $info["filename"] . $add . uniqid() . '.' . $info["extension"])) continue; } return $filename; } public static function getExternalModulesFromPagePopup(&$objVO, &$content, $mode = "compact") { $xmls = array(); $results = array(); if (preg_match("/^(Page|Popup)VO$/i", strtolower(get_class($objVO)), $match)) { $objType = $match[1]; } else return $xmls; switch($objType) { case "page": $results["website"] = MotoXML::findByXPath("//website//module[@externalData='true']", $content); $results["layout"] = MotoXML::findByXPath("//layout[@layoutType='" . $objVO->pageType->id . "']//module[@externalData='true']", $content); break; } $results[$objType] = MotoXML::findByXPath("//" . $objType . "[@id='" . $objVO->id . "']//module[@externalData='true']", $content); foreach($results as $block => $result) { if (!is_null($result)) { for($i = 0; $i < $result->length; $i++) { $filename = $result->item($i)->getAttribute("externalFile"); if ( $filename != "" ) { if ($mode == "full") { $xmls[$block][md5($filename)] = $filename; $xmls["all"][md5($filename)] = $filename; } else $xmls[md5($filename)] = $filename; } } } } return $xmls; } public static function getLinksFromXML(&$content, $links = array()) { if (!isset($links)) $links = array(); $objs = MotoXML::findByXPath(".//*[( @type='htmlText' and contains(data,'<A HREF=\"event:') ) or (@click!='') ]", $content); if (!is_null($objs)) { foreach($objs as $obj) { switch (strtolower($obj->nodeName)) { case 'slot': $click = $obj->getAttribute('click'); $links[md5($click)] = $click; break; case 'object': if ($obj->hasAttribute('click') && $obj->getAttribute('click') != '') { $click = $obj->getAttribute('click'); $links[md5($click)] = $click; } elseif (preg_match_all("/<A HREF=\"event:([^\"]*)\"/i", $obj->nodeValue, $matches)) { foreach($matches[1] as $link) { $links[md5($link)] = $link; } } break; } } } $files = MotoUtil::getDataProvidersFromXML($content); if (count($files) > 0) { foreach($files as $md5=>$file) { $links = MotoUtil::getLinksFromXML( new MotoXML($file), $links); } } return $links; } public static function getDataProvidersFromXML(&$content, $files = array(), $baseDir = null) { if ($baseDir == null) $baseDir = MotoConfig::get('websiteBaseDir'); if (!isset($files)) $files = array(); $modules = MotoXML::findByXPath(".//module[@externalData='true' and @externalFile!='']", $content); if (!is_null($modules)) { foreach($modules as $module) { $filename = $baseDir . '/' . $module->getAttribute('externalFile'); if (file_exists($filename)) { $files[md5($filename)] = $filename; } } } return $files; } public static function quickRepairXML($filename, $backUp = null) { if ($backUp == null) { if (defined("REPAIRXML_DEFAULTBACKUP") && REPAIRXML_DEFAULTBACKUP == "true") { $backUp = true; } else $backUp = false; } if (!file_exists($filename)) { return false; } $newFilename = $filename . "." . microtime(1) . "-" . rand(10,100) . ".bck"; if ($backUp) { if (@copy($filename, $newFilename)) { @chmod($newFilename, 0644); } else { return false; } } $chrs = array(); for($i = 1; $i < 32; $i++) if ($i != ord("\t") && $i != ord("\n") && $i != ord("\r")) { $chrs[] = chr($i); } if (filesize($filename) < 500*1024) { $data = file_get_contents($filename); $data = str_replace($chrs, "", $data); file_put_contents($filename, $data); } else { $ok = true; if (!$backUp) $ok = rename($filename, $newFilename); if (!$ok || !file_exists($newFilename)) { return false; } $in = fopen($newFilename, "rb"); $out = fopen($filename, "wb"); while(!feof($in)) { $data = fread($in, 256*1024); $data = str_replace($chrs, "", $data); fwrite($out, $data); } fclose($in); fclose($out); if (!$backUp) @unlink($newFilename); @chmod($filename, 0644); } return true; } public static function nodeToArray($nodes) { $result = array(); if ($nodes instanceof DOMElement) { foreach($nodes->childNodes as $node) if ($node->nodeName != "#text") { if (isset($node->childNodes) && $node->childNodes->length > 1) { $result[$node->nodeName] = self::nodeToArray($node->childNodes); } else { if (isset($result[$node->nodeName]) && !is_array($result[$node->nodeName])) $result[$node->nodeName] = array( $result[$node->nodeName] ); if (isset($result[$node->nodeName]) && is_array($result[$node->nodeName])) $result[$node->nodeName][] = $node->nodeValue; else $result[$node->nodeName] = $node->nodeValue; } } } elseif($nodes instanceof DOMNodeList) { for($i = 0; $i < $nodes->length; $i++) if ($nodes->item($i)->nodeName != "#text") { if (isset($nodes->item($i)->childNodes) && $nodes->item($i)->childNodes->length > 1) { $result[$nodes->item($i)->nodeName] = self::nodeToArray($nodes->item($i)->childNodes); } else { if (isset($result[$nodes->item($i)->nodeName]) && !is_array($result[$nodes->item($i)->nodeName])) $result[$nodes->item($i)->nodeName] = array($result[$nodes->item($i)->nodeName]); if (isset($result[$nodes->item($i)->nodeName]) && is_array($result[$nodes->item($i)->nodeName])) $result[$nodes->item($i)->nodeName][] = $nodes->item($i)->nodeValue; else $result[$nodes->item($i)->nodeName]= $nodes->item($i)->nodeValue; } } } else { } return $result; } public static function arrayToNode($array, DOMNode $dom) { foreach($array as $key => $value) { if (is_array($value)) { self::arrayToNode($value, $dom->appendChild(new DOMElement($key))); } else { $item = new DOMElement($key); $dom->appendChild($item); $item->appendChild($dom->ownerDocument->createCDATASection($value)); } } return $dom; } public static function scanDir($root, $dir = "", $filter = array(), $ans = array()) { $rootAdd = (isset($filter["rootAdd"])? $filter["rootAdd"] : false); $folderAdd = (isset($filter["folderAdd"])? $filter["folderAdd"] : false); $subIn = (isset($filter["folderIn"])? $filter["folderIn"] : true); $justFolder = (isset($filter["justFolder"])? $filter["justFolder"] : false); $toLowerCase = (isset($filter["toLowerCase"])? $filter["toLowerCase"] : false); $md5Mode = (isset($filter["md5Mode"])? $filter["md5Mode"] : false); $deepScan = (isset($filter["deepScan"])? $filter["deepScan"] : false); if (!is_dir($root . "/" . $dir)) return $ans; $lst = scandir($root . "/" . $dir); foreach($lst as $filename) if ($filename != "." && $filename != "..") { $path = ($dir != "" ? $dir . "/" :"") . $filename; $path = MotoUtil::replaceSlashes($path); $add = null; if ($add !== false && isset($filter["path.exclude"])) { if (!isset($add)) $add = true; if (!is_array($filter["path.exclude"])) $filter["path.exclude"] = array($filter["path.exclude"]); foreach($filter["path.exclude"] as $pregFilter) { $pregFilter = preg_replace("/[\/\\\]+/", "\\/", $pregFilter); if ($pregFilter != "" && preg_match("/(" . $pregFilter . ")/i", $path)) { $add = false; break; } } } if ($add !== false && isset($filter["extension.exclude"]) && is_file($root . "/" . $path)) { if (!isset($add)) $add = true; if (!is_array($filter["extension.exclude"])) $filter["extension.exclude"] = array($filter["extension.exclude"]); foreach($filter["extension.exclude"] as $pregFilter) if ($pregFilter != "" && preg_match("/\.(" . $pregFilter . ")$/i", $filename)) { $add = false; break; } } if ($add !== false && isset($filter["folder.exclude"]) && is_dir($root . "/" . $path)) { if (!isset($add)) $add = true; if (!is_array($filter["folder.exclude"])) $filter["folder.exclude"] = array($filter["folder.exclude"]); foreach($filter["folder.exclude"] as $pregFilter) if (preg_match("/^(" . $pregFilter . ")$/i", $filename)) { $add = false; break; } } if ($add !== false && isset($filter["extension.include"]) && is_file($root . "/" . $path)) { $add = false; $pregFilter = (is_array($filter["extension.include"]) ? implode("|", $filter["extension.include"]) : $filter["extension.include"]); if (preg_match("/\.(" . $pregFilter . ")$/i", $filename)) { $add = true; } } if ($add !== false && isset($filter["folder.include"]) && is_dir($root . "/" . $path)) { $add = false; $pregFilter = (is_array($filter["folder.include"]) ? implode("|", $filter["folder.include"]) : $filter["folder.include"]); if (preg_match("/^(" . $pregFilter . ")$/i", $filename)) { $add = true; } } if ($add !== false && isset($filter["path.include"])) { $add = false; $pregFilter = (is_array($filter["path.include"]) ? implode("|", $filter["path.include"]) : $filter["path.include"]); if (preg_match("/(" . $pregFilter . ")/i", $path)) { $add = true; } } if (!isset($add)) $add = true; if ($add) { $toAdd = ''; if ($subIn && is_dir($root . "/" . $path)) { if ($folderAdd || $justFolder === true) { $toAdd = preg_replace("/[\/\\\]+/i", "/", ($rootAdd ? $root . "/" :"") . $path); } $ans = self::scanDir($root, $path . "/", $filter, $ans); } elseif ($justFolder == true && is_dir($root ."/" . $path)) { $toAdd = preg_replace("/[\/\\\]+/i", "/", ($rootAdd ? $root . "/" :"") . $path); } elseif(is_file($root . "/" . $path)) $toAdd = preg_replace("/[\/\\\]+/i", "/", ($rootAdd ? $root . "/" :"") . $path); if ($toLowerCase === true) $toAdd = strtolower( $toAdd ); if ($toAdd != '') { if ($md5Mode) $ans[md5($toAdd)] = $toAdd; else $ans[] = $toAdd; } } else { if ($deepScan) { if ($subIn && is_dir($root . "/" . $path)) { if ($folderAdd || $justFolder === true) { $toAdd = preg_replace("/[\/\\\]+/i", "/", ($rootAdd ? $root . "/" :"") . $path); } $ans = self::scanDir($root, $path . "/", $filter, $ans); } } } } return $ans; } public static function trim($str, $charlist = "\t\r\n\x0B") { return trim($str, $charlist); } public static function clearHtmlText($html, $param = array()) { if (!isset($param['step']) || $param['step'] == 0) { $html = MotoUtil::optimizeHtmlText($html); if ($split = preg_split("/<TEXTFORMAT/i", $html)) { $html = ''; foreach($split as $part) if ($part != '') { $div = '<div style="'; if (preg_match("/INDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'text-indent: ' . $style[1] . 'px; '; if (preg_match("/LEADING=[\"\']([0-9]+)[\"\']/i", $part, $style)) if ($style[1]>2) $div .= 'line-height: ' . ($style[1]+18) . 'px; '; if (preg_match("/BLOCKINDENT=[\"\']([0-9]+)[\"\']/i", $part, $style)) $div .= 'padding-left: ' . $style[1] . 'px; '; $part = preg_replace("/^ [^>]*>/i", '', $part); $div .= '"'; if (isset($param['class'])) $div .= ' class="' . $param['class'] . '" '; $div .= '>'; $html .= $div . $part . '</div>'."\n"; } $html = preg_replace("/<\/TEXTFORMAT>/i", '', $html); } if (preg_match_all("/(<a[^>]*>)/i", $html, $match)) { foreach($match[1] as $a) { $html = str_replace($a, MotoFrontController::_prepareDataXml2Html($a), $html); } } if ($split = preg_split("/<font/i", $html)) { $html = ''; foreach($split as $part) { if ($html != '') $html .= '<font'; $style = ' style="'; if (preg_match("/^[^>]*color=[\'\"](#[a-f0-9]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'color:' . $match[1] . ';'; if (preg_match("/^[^>]*face=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'font-family:' . $match[1] . ';'; if (preg_match("/^[^>]*size=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'font-size:' . $match[1] . 'pt;'; if (preg_match("/^[^>]*LETTERSPACING=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'letter-spacing:' . $match[1] . 'px;'; if (preg_match("/^[^>]*KERNING=[\'\"]([^\"]+)[\'\"][^>]*>/i", $part, $match)) $style .= 'word-spacing:' . $match[1] . 'px;'; $style .= '" '; $part = preg_replace("/^ ([^>]*>)/i", $style . '>', $part); $part = preg_replace("/(<a )/i", "<a " . $style, $part); $html .= $part; } $html = str_replace( array('<\A>', '<\FONT>'), array('<\a>', '<\font>'), $html); } } return $html; } public static function isDetectedMobile($browser = null, $accept = null, $preg = null) { if (isset($_GET['mobile_mode']) && $_GET['mobile_mode'] == 'on') $_SESSION['mobile_mode'] = 'on'; if (isset($_GET['mobile_mode']) && $_GET['mobile_mode'] == 'off') $_SESSION['mobile_mode'] = 'off'; if (isset($_SESSION['mobile_mode']) && $_SESSION['mobile_mode'] == 'on') return true; if (is_null($browser)) $browser = (isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : null); if (is_null($accept)) $accept = (isset($_SERVER['HTTP_ACCEPT']) ? $_SERVER['HTTP_ACCEPT'] : null); $result = false; if (!is_array($preg)) { $preg = array(); $preg['Android'] = 'android'; $preg['Apple'] = 'iphone|ipad|ipod|itunes'; $preg['Blackberry'] = 'blackberry'; $preg['NexusOne'] = 'nexus one'; $preg['PalmOS'] = 'palm os|palmos|PalmSource'; $preg['AvantGo'] = 'hiptop|avantgo'; $preg['Opera'] = 'opera mini|opera mobi|'; $preg['Smartphone'] = 'smartphone'; $preg['other'] = ''; $preg['other'] .= 'pocket|phone|pda|NetFront|wm5 pie|docomo|vodafone|j-phone|mimino|plucker|xiino|blazer|elaine'; $preg['other'] .= '|Windows Phone|IEMobile|windows ce'; $preg['other'] .= '|WebOS|MobileExplorer'; $preg['other'] .= '|NetFront|Kindle|POLARIS|UP.Browser|UP.Link'; $preg['other'] .= '|WAP Browser|nook browser'; $preg['other'] .= '|PLAYSTATION|teleca|^ASTEL|MIDP|^PDXG|160x|x160|240x|x320|480x|x640|novarra'; $preg['JME'] = 'ReqwirelessWeb|^AU-M'; $preg['Sumsung'] = 'SEC-SGH|SEC-SGH|Samsung-'; $preg['HTC'] = 'HTC_'; $preg['LG'] = ';LG;| LGE |LGE-|^LG-|^LG\/'; $preg['Nintendo Wii'] = 'Nintendo Wii'; $preg['Nokia'] = 'Symbian OS|SymbianOS|Nokia|Series80|Series60'; $preg['SonyEricsson'] = 'SonyEricsson'; $preg['Motorola'] = '^MOT-'; } $preg = preg_replace('/[\|]+/', '|', implode('|', $preg)); if (!is_null($browser) && preg_match('/(' . $preg . ')/i', $browser, $match)) { $result = true; } elseif(!is_null($accept) && ((strpos($accept,'text/vnd.wap.wml')>0)||(strpos($accept,'application/vnd.wap.xhtml+xml')>0))) { $result = true; } return $result; } static function toBytes($size) { $size = trim($size); $value = null; if (preg_match('/^([0-9]+)\s*(P|T|G|M|K){0,1}/i', $size, $matches)) { $value = isset($matches[1]) ? (int)$matches[1] : 0; $unit = isset($matches[2]) ? strtoupper($matches[2]) : ''; switch ($unit) { case 'P': $value *= 1024; case 'T': $value *= 1024; case 'G': $value *= 1024; case 'M': $value *= 1024; case 'K': $value *= 1024; break; } } return $value; } public static function recurse_delete($src, $kilSrc = false) { $dir = opendir($src); while (false !== ($file = readdir($dir))) if (($file != '.') && ($file != '..')) { if (is_dir($src . '/' . $file) && !is_link($src . '/' . $file)) { self::recurse_delete($src . '/' . $file, true); } else { @unlink($src . '/' . $file); } } closedir($dir); if ($kilSrc) @rmdir($src); } public static function recurse_clean($src) { $dir = opendir($src); while (false !== ($file = readdir($dir))) if (($file != '.') && ($file != '..')) { if (is_dir($src . '/' . $file) && !is_link($src . '/' . $file)) { self::recurse_clean($src . '/' . $file); } else { @unlink($src . '/' . $file); } } closedir($dir); } public static function recurse_copy($src, $dst, $rewrite = true) { if (!file_exists($dst)) mkdir($dst, 0755, true); if (!is_dir($src)) return false; $dir = opendir($src); while (false !== ($file = readdir($dir))) { if (($file != '.') && ($file != '..')) { if (is_dir($src . '/' . $file)) { self::recurse_copy($src . '/' . $file, $dst . '/' . $file, $rewrite); } else { if (file_exists($dst . '/' . $file)) { if ($rewrite) { unlink($dst . '/' . $file); copy($src . '/' . $file, $dst . '/' . $file); } } else { copy($src . '/' . $file, $dst . '/' . $file); } } } } closedir($dir); return true; } public static function renderTemplate($tmpl, $data) { $vars = explode(',', '%' . implode("%,%", array_keys($data)) . '%'); $values = array_values($data); return str_replace($vars, $values, $tmpl); } public static function safeGet($obj, $key, $default = null) { if (is_array($obj) && isset($obj[$key])) return $obj[$key]; if (is_object($obj) && isset($obj->$key)) return $obj->$key; return $default; } public static function setLoadEncodedDataFalse($changeKey = true) { try { if (defined('ENCODED_CONTENT_RESOURSE_PATH') && file_exists(ENCODED_CONTENT_RESOURSE_PATH)) @unlink(ENCODED_CONTENT_RESOURSE_PATH); if (defined('ENCODED_STRUCTURE_RESOURSE_PATH') && file_exists(ENCODED_STRUCTURE_RESOURSE_PATH)) @unlink(ENCODED_STRUCTURE_RESOURSE_PATH); if ($changeKey) ConfigurationService::changeKey('loadEncodedData', 'false'); } catch(Exception $e) { return false; } return true; } static function encrypt($text, $pass) { return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $pass, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)))); } static function decrypt($text, $pass) { return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $pass, base64_decode($text), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))); } static function facebook_parse_signed_request($signed_request, $secret) { list($encoded_sig, $payload) = explode('.', $signed_request, 2); $sig = self::base64_url_decode($encoded_sig); $data = json_decode(self::base64_url_decode($payload), true); if (strtoupper($data['algorithm']) !== 'HMAC-SHA256') { error_log('Unknown algorithm. Expected HMAC-SHA256'); throw new Exception('UNKNOWN_ALGORITHM'); return null; } $expected_sig = hash_hmac('sha256', $payload, $secret, $raw = true); if ($sig !== $expected_sig) { error_log('Bad Signed JSON signature!'); throw new Exception('BAD_SIGNED_JSON_SIGNATURE'); return null; } return $data; } static function base64_url_decode($input) { return base64_decode(strtr($input, '-_', '+/')); } static function downloadFile($url, $destination, $params = array()) { $baseDir = MotoConfig::get('websiteBaseDir'); if ($destination == '' || is_dir($baseDir . '/' . $destination)) throw new Exception(self::ERROR_BAD_PARAMS, 1); $dir = dirname($baseDir . '/' . $destination); MotoUtil::createDir( $dir ); if (!is_dir($dir) || !is_writable($dir)) throw new Exception(self::ERROR_BAD_PARAMS, 2); $options = array( CURLOPT_CONNECTTIMEOUT => 10, CURLOPT_RETURNTRANSFER => true, CURLOPT_TIMEOUT => 25, CURLOPT_USERAGENT => 'motocms-php-0.0.1', CURLOPT_HTTPHEADER => array('Expect:'), CURLOPT_HEADER => 0, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_0, ); foreach ($params as $key => $value) $options[$key] = $value; $options[CURLOPT_URL] = $url; if (defined('MOTO_CURLOPT_PROXY') && !isset($options[CURLOPT_PROXY])) { $options[CURLOPT_PROXY] = MOTO_CURLOPT_PROXY; } $info = parse_url($url); if (isset($info['scheme'])) { $info['scheme'] = strtolower($info['scheme']); if ($info['scheme'] == 'https') { if (!isset($options[CURLOPT_SSL_VERIFYPEER])) $options[CURLOPT_SSL_VERIFYPEER] = false; if (!isset($options[CURLOPT_SSL_VERIFYHOST])) $options[CURLOPT_SSL_VERIFYHOST] = 0; } } $ch = curl_init(); curl_setopt_array($ch, $options); $result = curl_exec($ch); $info = curl_getinfo($ch); if ($result === false) { $e = new Exception(curl_error($ch), StatusEnum::ERROR_WHILE_WORKING_CURL); curl_close($ch); throw $e; } curl_close($ch); if ($info['http_code'] >= 400) { throw new Exception(self::ERROR_ON_CURL_REQUEST, $info['http_code']); } file_put_contents($baseDir . '/' . $destination, $result); MotoUtil::fixFilePermission($baseDir . '/' . $destination); return $destination; } static function getAttributes($node, $toLowerCase = true) { if (!$node->hasAttributes()) { return null; } $data = array(); foreach($node->attributes as $attr) { $name = ($toLowerCase ? strtolower($attr->name) : $attr->name); $data[$name] = $attr->value; } return $data; } static function createUserToken() { $ip = @$_SERVER['REMOTE_ADDR']; $ip = explode('.', $ip); for($i = 0; $i < self::TOKEN_COUNT_IP_DIGIST_IGNORE; $i ++) array_pop($ip); $ip = implode('.', $ip); $data = array( 'ip' => $ip, 'tmp' => uniqid(), ); $data = json_encode($data); $c = new ContentService(); $p = $c->getProductInfo(); $key = MotoUtil::encrypt($data, @$p['product_id']); return $key; } static function isValidUserToken($token) { $c = new ContentService(); $p = $c->getProductInfo(); $data = MotoUtil::decrypt($token, @$p['product_id']); $data = json_decode($data, true); if ($data == null) return false; $ip = @$_SERVER['REMOTE_ADDR']; $ip = explode('.', $ip); for($i = 0; $i < self::TOKEN_COUNT_IP_DIGIST_IGNORE; $i ++) array_pop($ip); $ip = implode('.', $ip); $isValid = ($data['ip'] === $ip); return $isValid; } static function getFilePerms($file, $dec = false) { if (!file_exists($file)) return null; $fileperms = substr(sprintf('%o', fileperms($file)), -4); if (!$dec) $fileperms = octdec($fileperms); return $fileperms; } static function createDir($path, $mode = null, $recursive = true) { $result = true; if ($mode == null) $mode = MOTO_DIR_PERMISSION; if (file_exists($path)) { if (is_dir($path)) { $dirperms = self::getFilePerms($path); if ( $dirperms < $mode ) @chmod($path, $mode); } else $result = false; } else { $result = @mkdir($path, $mode, $recursive); @chmod($path, $mode); } return $result; } static function fixDirPermission($path, $mode = null) { if ($mode == null) $mode = MOTO_DIR_PERMISSION; $dirperms = self::getFilePerms($path); if ( $dirperms != null && $dirperms < $mode ) @chmod($path, $mode); } static function fixFilePermission($file, $mode = null) { if ($mode == null) $mode = MOTO_FILE_PERMISSION; $fileperms = self::getFilePerms($file); if ( $fileperms != null && $fileperms < $mode ) @chmod($file, $mode); } }