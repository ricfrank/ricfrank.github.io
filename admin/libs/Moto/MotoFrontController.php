<?php
 class MotoFrontController { const SEO_IMG_MAX_WIDTH = 800; const SEO_IMG_MAX_HEIGHT = 600; private $engine; private $siteMap; private static $content = null; private static $structure = null; private static $config = null; private static $motoRender = null; public function __construct($engine) { if (self::$config == null) self::$config = self::loadConfig(); $this->engine = $engine; } public function initContent() { $this->loadContent(); } public function loadContent() { if (self::$content == null) self::$content = MotoXML::create(CONTENT_RESOURSE_PATH); if (self::$structure == null) self::$structure = MotoXML::create(STRUCTURE_RESOURSE_PATH); if (self::$config == null) self::$config = self::loadConfig(); } function getPage($uri, $params = array()) { if (empty($uri)) $page = PageVO::findById(self::$config['startPage'], self::$content); else $page = PageVO::findByUrl($uri, self::$content); if (!$page) { $page = PopupVO::findByUrl($uri, self::$content); } if (!$page) { header('HTTP/1.0 404 Not Found'); $page = PageVO::findByUrl('404', self::$content); if (!$page) { $page = PageVO::findById(self::$config['startPage'], self::$content); if (!$page) $page = MotoXML::findOneByXPath(".//page", self::$content, 'PageVO'); $page->title = $page->name = $page->url = 404; } } return $page; } public function dispatch( $isUnderConstruction = false ) { $uri = $this->getRequestURI(); $this->loadContent(); $page = $this->getPage($uri); if ($page instanceof PageVO) { $template = (self::$config['startPage'] == $page->id) ? 'index' : 'page'; } else { $template = 'popup'; } $params = $this->getParams($page); if (!$params['nonFanMode'] && $isUnderConstruction !== 'false') { $params['pageData'] = $this->loadPageData($page); $params['navigation'] = $this->loadMenu($page); } $params['page'] = $page; return $this->engine->render($template, $params); } function getParams($page, $options = array()) { $params = array(); $nonFanEngine = false; $nonFanMode = false; $isFaceBook = false; $app_id = ''; $app_secret = ''; $isFan = false; $fb_request = null; $isProtected = false; if (defined('TEMPLATE_TYPE') && TEMPLATE_TYPE == 'facebook') $isFaceBook = true; $app_id = ''; $app_secret = ''; $isUserLogged = false; $user = new UserService(); $isUserLogged = $user->isAuthenticated()->status->status; if ($isFaceBook) { $app_id = (isset(self::$config['facebookAppId']) ? self::$config['facebookAppId'] : ''); $app_secret = (isset(self::$config['facebookAppSecret']) ? self::$config['facebookAppSecret'] : ''); if ($app_secret != '') { $c = new ContentService(); $p = $c->getProductInfo(); $app_secret = MotoUtil::decrypt($app_secret, $p['product_id']); } if ( isset(self::$config['showCustomBlockForNonFans']) && self::$config['showCustomBlockForNonFans'] == 'true' ) { $nonFanEngine = true; } if (isset($_POST['signed_request']) && $_POST['signed_request'] != '') { try { $fb_request = MotoUtil::facebook_parse_signed_request($_POST['signed_request'], $app_secret); if ($fb_request != null && isset($fb_request['page']['liked']) && $fb_request['page']['liked']) $isFan = true; } catch (Exception $e) { $fb_request = null; if ($isUserLogged && $nonFanEngine) { echo '<div style="font:14px Arial;margin-bottom:4px;padding:8px;text-align:center;color:black;background:#f5f3ce;">Please check your Facebook App ID and secret code.</div>'; } } } else { if ($isUserLogged) { $isFan = true; } } if (!$isFan && $nonFanEngine) { $template = 'nonfanpage'; $nonFanMode = true; } } if (!$nonFanMode) { $isProtected = ( isset(self::$config['websiteProtectionEnabled']) && self::$config['websiteProtectionEnabled'] == 'true' && $page->isProtected ); } $params = array_merge(array( 'isFaceBook' => $isFaceBook, 'app_id' => $app_id, 'isFan' => $isFan, 'nonFanMode' => $nonFanMode, 'isProtected' => $isProtected, 'fb_request' => $fb_request, 'pageURL' => '/' . $page->url, 'basePath' => str_replace("//", "/", MOTO_ROOT_URL . '/'), 'snapshotWidth' => SNAPSHOT_WIDTH, 'snapshotCreationDelay' => SNAPSHOT_CREATION_DELAY, 'pageFavicon' => $this->loadFavicon(), 'isDetectedMobile' => MotoUtil::isDetectedMobile(), 'swfobject' => array( 'flashvars' => array(), 'params' => array( ) ), ), self::$config); if (isset(self::$config["websiteBackgroundColor"]) && self::$config["websiteBackgroundColor"] !== "") { $params = array_merge($params, array('bgColor' => self::$config["websiteBackgroundColor"] , 'isUserBgColor' => true)); } elseif (defined("BACKGROUND_COLOR")) { $params = array_merge($params, array('bgColor' => BACKGROUND_COLOR , 'isUserBgColor' => false)); } else $params = array_merge($params, array('bgColor' => '' , 'isUserBgColor' => false)); if ( !isset(self::$config['enableCompatibilityMode']) || self::$config['enableCompatibilityMode'] == 'false' || self::$config['enableCompatibilityMode'] === false) { $params['wmode'] = 'opaque'; } return $params; } protected function loadFavicon($favicon = "") { $ans = array(); if ($favicon == "" && isset(self::$config["websiteIcon"]) && self::$config["websiteIcon"]!="") $favicon = self::$config["websiteIcon"]; if ($favicon != "") { $favicons = explode(",", $favicon); for($i = 0; $i < count($favicons); $i++) if (file_exists(MOTO_ROOT_DIR . "/" . trim($favicons[$i]))) { $favicons[$i] = trim($favicons[$i]); $info = pathinfo($favicons[$i]); $filename = str_replace("//", "/", str_replace("\\", "/", MOTO_ROOT_URL . "/" . $favicons[$i])); $_ans = array("href" => $filename, "rel" => "icon"); switch($info["extension"]) { case "ico": $_ans["type"] = "image/vnd.microsoft.icon"; $_ans["rel"] = "SHORTCUT ICON"; break; case "jpeg"; case "jpg": $_ans["type"] = "image/jpeg"; break; case "png": $_ans["type"] = "image/png"; break; } $ans[] = $_ans; } } return $ans; } function getRequestURI() { if (!isset($_SERVER['REQUEST_URI'])) { if (defined('MOTO_FRONT_CONTROLLER_REQUEST_URI') && MOTO_FRONT_CONTROLLER_REQUEST_URI == 'first') { $_SERVER['REQUEST_URI'] = (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL'] != '' ? $_SERVER['REDIRECT_URL'] : (isset($_SERVER['PHP_SELF']) && $_SERVER['PHP_SELF'] != '' ? $_SERVER['PHP_SELF'] : '' ) ); } else $_SERVER['REQUEST_URI'] = (isset($_SERVER['PHP_SELF']) && $_SERVER['PHP_SELF'] != '' ? $_SERVER['PHP_SELF'] : '' ); } $rootPath = MotoConfig::get('websiteRootPath'); $uri = substr($_SERVER['REQUEST_URI'], strpos($rootPath, $_SERVER['REQUEST_URI']) + strlen($rootPath)); $script_name = basename($_SERVER['SCRIPT_NAME']); if (!empty($script_name)) { $uri = str_replace($script_name, '', $uri); } if ($uri != '' && $uri != '/' && isset(self::$config['underConstruction']) && self::$config['underConstruction'] == "true" && !preg_match("/preview=true/i", $uri, $match) ) { $this->fixMistypedURL('//'); } $_uri = $uri; if (preg_match("/^([^\?]*)\?/i", $_uri, $match)) { $uri = $match[1]; } if (preg_match("/page=([^&]*)/i", $_uri, $match)) { $uri = $match[1]; } if ($uri == '' && (isset($_GET['page'])) && $_GET['page'] != '') { $uri = $_GET['page']; } $uri = urldecode($uri); $uri = trim($uri, '/'); $this->fixMistypedURL($uri); return $uri; } protected function fixMistypedURL($url, $autoRedirect = true) { $patterns = array( '@/{2,}@', '@^(.+)/$@' ); $replacements = array( '/', '$1' ); $fixed_url = preg_replace($patterns, $replacements, $url); if ($fixed_url != $url && $autoRedirect) { $fixed_url = rtrim(rtrim(MOTO_ROOT_URL, '/') . '/' . $fixed_url, '/') . '/'; header('HTTP/1.1 301 Moved Permanently'); header(sprintf('Location: %s', $fixed_url)); exit; } return $fixed_url; } static function getSettings($key = null, $default = null) { return self::getConfig($key, $default); } static function getConfig($key = null, $default = null) { if (self::$config == null) self::$config = self::loadConfig(); if (is_null($key)) return self::$config; if (isset(self::$config[$key])) return self::$config[$key]; return $default; } static function loadConfig() { $config_xml = MotoXML::create(CONFIG_RESOURSE_PATH); $options = ConfigurationVO::findAll($config_xml); $config = array(); foreach ($options as $option) { if ($option->name == "underConstructionMessage") { $option->value = MotoUtil::clearHtmlText($option->value); } $config[$option->name] = $option->value; } return $config; } protected function loadMenu($page) { return array(); } protected function loadPageData($page) { if (self::$motoRender == null) self::$motoRender = new MotoHTMLRender(self::$content, self::$structure, self::$config); if (method_exists(self::$motoRender, 'loadPageData')) return self::$motoRender->loadPageData($page); $results = array(); $outputs = array(); $images = array(); $image = ""; $output = ''; $section = strtolower(get_class($page)); $section = substr($section,0,strlen($section)-2); $xmls = MotoUtil::getExternalModulesFromPagePopup($page, self::$content, "full"); $results[] = MotoXML::findByXPath('//website//object[@type="htmlText"]/data', self::$content); if (isset($xmls["website"]) && !empty($xmls["website"])) { foreach($xmls["website"] as $xml) if (file_exists(MOTO_ROOT_DIR . "/" . $xml)) { $dom = new MotoXML(MOTO_ROOT_DIR . "/" . $xml); $results[] = MotoXML::findByXPath('.//object[@type="htmlText"]/data', $dom); $images[] = MotoXML::findByXPath('.//object[@type="image"]/data', $dom); $slots = MotoXML::findOneByXPath("//slots", $dom); if (!is_null($slots)) { $this->loadPageDataSlots($slots, $outputs); } } } if ($section == "page") { $results[] = MotoXML::findByXPath('//layout[@layoutType=\'' . $page->pageType->layoutType . '\']//object[@type="htmlText"]/data', self::$content); $images[] = MotoXML::findByXPath('//layout[@layoutType=\'' . $page->pageType->layoutType . '\']//object[@type="image"]/data', self::$content); $query = '//layout[@layoutType=\'' . $page->pageType->layoutType . '\']/slots'; $slots = MotoXML::findOneByXPath($query, self::$content); if (!is_null($slots)) { $this->loadPageDataSlots($slots, $outputs); } if (isset($xmls["layout"]) && !empty($xmls["layout"])) { foreach($xmls["layout"] as $xml) if (file_exists(MOTO_ROOT_DIR . "/" . $xml)) { $dom = new MotoXML(MOTO_ROOT_DIR . "/" . $xml); $results[] = MotoXML::findByXPath('.//object[@type="htmlText"]/data', $dom); $images[] = MotoXML::findByXPath('.//object[@type="image"]/data', $dom); $slots = MotoXML::findOneByXPath("//slots", $dom); if (!is_null($slots)) { $this->loadPageDataSlots($slots, $outputs); } } } } $query = sprintf('//' . $section . '[@id="%d"]//object[@type="htmlText"]/data', $page->id); $results[] = MotoXML::findByXPath($query, self::$content); $query = sprintf('//' . $section . '[@id="%d"]//object[@type="image"]/data', $page->id); $images[] = MotoXML::findByXPath($query, self::$content); if (isset($xmls[$section]) && !empty($xmls[$section])) { foreach($xmls[$section] as $xml) if (file_exists(MOTO_ROOT_DIR . "/" . $xml)) { $dom = new MotoXML(MOTO_ROOT_DIR . "/" . $xml); $results[] = MotoXML::findByXPath('.//object[@type="htmlText"]/data', $dom); $images[] = MotoXML::findByXPath('.//object[@type="image"]/data', $dom); $slots = MotoXML::findOneByXPath("//slots", $dom); if (!is_null($slots)) { $this->loadPageDataSlots($slots, $outputs); } } } $query = '//' . $section . '[@id=' . $page->id . ']/slots'; $slots = MotoXML::findOneByXPath($query, self::$content); if (!is_null($slots)) { $this->loadPageDataSlots($slots, $outputs); } for($i = 0; $i < count($outputs); $i++) { $output .= "<p>" . preg_replace_callback("(<\/?[^>]*>)", array(&$this,'prepareDataXml2Html'), $outputs[$i]) . "</p>\n"; } if (isset($results) && !empty($results)) foreach ($results as $result) { if (empty($result) ) { continue; } foreach ($result as $data) { $text = preg_replace_callback("(<\/?[^>]*>)", array(&$this, 'prepareDataXml2Html'), $data->nodeValue); $object = $data->parentNode; if (preg_match('/^h[123456]{1}$/i', $object->getAttribute('style'))) { $h = $object->getAttribute('style'); $text = "<{$h}>{$text}</{$h}>"; } $output .= "<p>" . $text . "</p>\n"; } } if (isset($images) && !empty($images) && 1==2) { $output .= "\n\n"; foreach ($images as $image) { if (is_string($image)) { $output .= $image; } else { foreach ($image as $data) { $text = preg_replace_callback("(<\/?[^>]*>)", array(&$this, 'prepareDataXml2Html'), $data->nodeValue); $object = $data->parentNode; if (preg_match('/^h[123456]{1}$/i', $object->getAttribute('style'))) { $h = $object->getAttribute('style'); $text = "<{$h}>{$text}</{$h}>"; } $output .= "<p>" . $this->createImgTag($data->nodeValue, $object->getAttribute("click")) . "</p>\n"; } } } $output .= "\n\n"; } return $output; } function loadPageDataSlots($nodeSlots, &$outputs = array()) { $slots = MotoXML::findByXPath("./slot", $nodeSlots); if (!is_null($slots)) { for($islot = 0; $islot < $slots->length; $islot++) { $query = '//slot[@id=' . $slots->item($islot)->getAttribute("slotType") . ']//property[@type="htmlText" or @type="image"]'; $structs = MotoXML::findByXPath($query, self::$structure); if (!is_null($structs) && !empty($structs)) { $_ids = array(); $string = ""; foreach ($structs as $struct) { $query = './slot[@id=' . $slots->item($islot)->getAttribute("id") . ']//item[@propertyType=' . $struct->getAttribute("id") . ']'; $nodes = MotoXML::findByXPath($query, $nodeSlots); $_ids[$struct->getAttribute("id")] = $struct->getAttribute("type"); for ($i = 0; $i < $nodes->length; $i++) { switch($_ids[$nodes->item($i)->getAttribute("propertyType")]) { case "image": $string .= $this->createImgTag($nodes->item($i)->nodeValue); break; case "htmlText": if ($string != "") $string .= ", "; $string .= $nodes->item($i)->nodeValue; break; } } } if ($string != "") { $outputs[] = ($slots->item($islot)->getAttribute("click") != "" ? "<A HREF=\"event:" . $slots->item($islot)->getAttribute("click") . "\">" . $string . "</A>" : $string); } } } } return $outputs; } function prepareDataXml2Html($match) { return self::_prepareDataXml2Html($match); } static function _prepareDataXml2Html($match) { $result = $match; if (is_array($match) && isset($match[0]) && ($match[0]!="")) $result = $match[0]; $allowed = "A|U|I|B"; if (preg_match("/<img (.*)>/i", $result, $regs)) { } elseif (preg_match("/<A (.*)>/i", $result, $regs)) { if (preg_match("/<A HREF=\"((event):(openFile|openLightbox|switchPage|getURL|openPopup|closePopup|mailTo))[;]?((url|page|id|email|file|source)=([^;\"]*))?[;]?((window)=([^;\"]*))?[;]?((rel)=([^;\"]*))?[;]?([^\"]*)\"(.*)>/i", $result, $regs)) { $link["event"] = $regs[3]; $link["url"] = $regs[6]; $link["target"] = ($regs[9] != "_self" ? $regs[9] : ""); $link["rel"] = $regs[12]; $link["title"] = ""; if ($link["event"] == "getURL") { $link["url"] = urldecode($regs[6]); } elseif ($link["event"] == "mailTo") { $link["url"] = 'mailto:' . urldecode($regs[6]); } elseif ($link["event"] == "openLightbox" || $link["event"] == "openFile") { $link["url"] = MOTO_ROOT_URL . preg_replace("/[\/\\\]+/", "/", $link["url"]); $link["target"] = '_blank'; } elseif ($link["event"] == "switchPage") { $page = PageVO::findById($link["url"], self::$content); if (!is_null($page)) { $link["url"] = MOTO_ROOT_URL . "/" . $page->url; if (defined("URL_BASED_SEO_KEY") && URL_BASED_SEO_KEY == "page") $link["url"] = MOTO_ROOT_URL . "/index.php?page=" . $page->url; } else $link["url"] = "#"; $link["url"] = preg_replace("/[\/\\\]+/", "/", $link["url"]); } elseif ($link["event"] == "openPopup") { $page = PopupVO::findById($link["url"], self::$content); if (!is_null($page)) { $link["url"] = MOTO_ROOT_URL . "/" . $page->url; if (defined("URL_BASED_SEO_KEY") && URL_BASED_SEO_KEY == "page") $link["url"] = MOTO_ROOT_URL . "/index.php?page=" . $page->url; } else $link["url"] = "#"; $link["url"] = preg_replace("/[\/\\\]+/", "/", $link["url"]); } $result = $link["link"] = '<a ' . ($link["url"] != "" ? 'href="' . $link["url"].'"' : '') .($link["rel"]!=""?' rel="'.$link["rel"].'" ':"") .($link["target"]!=""?' target="'.$link["target"].'" ':"") .">"; } else $result="<a>"; } elseif (!preg_match("/(<\/?[" . $allowed . "]>)/i", $result)) $result = ""; else $result = strtolower($result); return $result; } function createImgTag($src, $action = "", $options = array()) { $_options = MotoUtil::responseVOToArray(MediaLibraryService::getMediaLibraryItemInfo($src)); foreach($_options as $key=>$value) if (!isset($options[$key])) $options[$key] = $value; if (isset($options["width"]) && isset($options["height"])) { if ($options["width"]>self::SEO_IMG_MAX_WIDTH) { $options["height"] = round(self::SEO_IMG_MAX_WIDTH * $options["height"] / $options["width"]); $options["width"] = self::SEO_IMG_MAX_WIDTH; } if ($options["height"]>self::SEO_IMG_MAX_HEIGHT) { $options["width"] = round(self::SEO_IMG_MAX_HEIGHT * $options["width"] / $options["height"]); $options["height"] = self::SEO_IMG_MAX_HEIGHT; } } $out = ""; $out .= '<img src="' . MOTO_ROOT_URL . '/' . $src . '" '; if ( isset($options["alt"]) && $options["alt"] != "" && (!isset($options["title"]) || $options["title"] == "") ) $options["title"] = $options["alt"]; elseif ( isset($options["title"]) && $options["title"] != "" && (!isset($options["alt"]) || $options["alt"] == "") ) $options["alt"] = $options["title"]; if (isset($options["alt"]) && $options["alt"] != "") $out .= ' alt="' . htmlspecialchars($options["alt"]) . '" '; else $out .= ' alt="" '; if (isset($options["title"]) && $options["title"] != "") $out .= ' title="' . htmlspecialchars($options["title"]) . '" '; if (isset($options["width"]) && $options["width"]*1 > 0) $out .= ' width="' . $options["width"] . '" '; if (isset($options["height"]) && $options["height"]*1 > 0) $out .= ' height="' . $options["height"] . '" '; $out .= '/>'; if ($action != "") { $action = "<a href=\"event:" . $action . "\">"; $out = $this->prepareDataXml2Html($action) . $out . "</A>"; } return $out; } }