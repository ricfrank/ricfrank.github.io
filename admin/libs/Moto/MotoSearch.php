<?php
class MotoSearch { static protected $_instance = null; protected $_debug = false; protected $_isAuth = false; protected $_isNeedAuthCheck = false; protected $_config = array( '' ); function __construct($config = array()) { $this->_init(); if (is_array($config)) $this->_config = array_merge($this->_config, $config); } static function getInstance() { if (self::$_instance == null) { self::$_instance = new self(); } return self::$_instance; } function _init() { $config = MotoFrontController::loadConfig(); $this->_config = array_merge($this->_config, $config); $this->_isNeedAuthCheck = (isset($this->_config['websiteProtectionKey']) && $this->_config['websiteProtectionKey'] != ''); } function dispatch($str, $isAuth = false) { $this->_isAuth = $isAuth; $result = null; if ($str != '') $result = $this->startSearch($str); return $this->renderResult($result); } function getAllParentsNode(DOMNode $node, $parents = array()) { $parents[] = array('id'=>$node->getAttribute('id'),'name'=>$node->nodeName); if ($node->parentNode != null && get_class($node->parentNode) == 'DOMElement') $parents = $this->getAllParentsNode($node->parentNode, $parents); return $parents; } function getParentNode(DOMNode $node, $parents) { $end = 0; $result = null; while($end == 0) { if (in_array($node->nodeName, $parents)) { $result = array('name' => $node->nodeName, 'id'=> $node->getAttribute('id'), 'attr' => array()); if ($node->hasAttributes()) { foreach($node->attributes as $attr) { $result['attr'][$attr->name] = $attr->value; } } $end = 1; break; } if ($node->parentNode != null && get_class($node->parentNode) == 'DOMElement') { $node = $node->parentNode; } else { $result = null; $end = 1; break; } } return $result; } function getDataProviders($dom, $result = array()) { $query = './/module[@externalData="true" and @externalFile!=""]'; $nodes = MotoXML::findByXPath($query, $dom); if (!is_null($nodes)) { foreach($nodes as $node) { $filename = MOTO_ROOT_DIR . '/' . $node->getAttribute('externalFile'); if (file_exists($filename)) { if (!$this->indexExists($filename)) { $moduleVO = new ModuleVO($node); $dom = MotoXML::create($filename); $objectsHolder = new MotoObjectsHolderVO(); $moduleVO->data = $objectsHolder->loadDomElement( MotoXML::findOneByXPath('./data', $dom)); $this->_createIndex($filename, $dom, $moduleVO); } $item = array( 'path' => $filename, 'id' => $node->getAttribute('id'), 'type' => $node->nodeName, ); $parent = $this->getParentNode($node, array('page','popup')); if ($parent != null) { $item['page_id'] = $parent['id']; $item['page_type'] = $parent['name']; $add = true; if ($this->_isNeedAuthCheck && isset($parent['attr']['isProtected']) && $parent['attr']['isProtected'] == 'true') { $add = $this->_isAuth; } if ($add) $result[md5($item['path'])] = $item; } } } } return $result; } function startSearch($str) { $dom = MotoXML::create(CONTENT_RESOURSE_PATH); $items = $this->getDataProviders($dom); $result = $this->searchOnXMLs($items, $str); return $result; } function searchOnXMLs($items, $str) { $results = array(); foreach($items as $item) { $this->searchOnXML($item, $str, $results); } return $results; } function indexExists($filename) { $indexFileName = $this->getIndexFileName($filename); return (file_exists($indexFileName)); } function searchOnXML($item, $str, &$results = array()) { $filename = $item['path']; $indexFileName = $this->getIndexFileName($filename); if (!file_exists($indexFileName)) { return $results; } $dom = MotoXML::create($indexFileName); $root = MotoXML::findOneByXPath('.', $dom); $query = './/object[contains( data, "' . $str . '")]/data'; $nodes = MotoXML::findByXPath($query, $dom); if ($nodes != null) { foreach($nodes as $node) { $result = array( 'id' => $node->parentNode->getAttribute('id'), 'parentID' => $root->getAttribute('id'), 'parts' => $this->getParts($node->nodeValue, $str), 'text' => $node->nodeValue, ); $key = $item['page_type'] . '_' . $item['page_id']; if (!isset($results[$key]['items'])) { $results[$key] = array( 'id' => $item['page_id'], 'type' => $item['page_type'], 'items' => array(), ); } $results[$key]['items'][] = $result; } } return $results; } function getParts($text, $query) { $items = array(); $textParts = explode($query, $text); $textSize = strlen($text); if ($this->_debug) { echo '<pre>'; print_r($textParts); } $icount = count($textParts); $queryLen = strlen($query); $pos = 0; $leftSize = (isset($this->_config['searchLeftPartSize']) ? $this->_config['searchLeftPartSize'] : 15); $rightSize = (isset($this->_config['searchRightPartSize']) ? $this->_config['searchRightPartSize'] : 15); $strLeft = $_text = ''; for($i = 0; $i < $icount - 1; $i ++) { $item = array(); $_text .= $textParts[$i]; $_textSize = strlen($_text); $leftPart = ''; $leftPos = 0; if ($_textSize < $leftSize) { $leftPart = $_text; } else { $leftPos = $_textSize - $leftSize; $leftPart = substr($_text, $leftPos, $leftSize); $leftPart = '...' . $leftPart; } $rightPart = substr($text, $_textSize + $queryLen, $rightSize); if ($_textSize + $queryLen + $rightSize < $textSize) { $rightPart .= '...'; } $item['start'] = strlen($leftPart); $item['end'] = $item['start'] + $queryLen; $item['str'] = $leftPart . $query . $rightPart; $_text .= $query; $items[] = $item; } if ($this->_debug) print_r($items); if ($this->_debug) exit; return $items; } function renderResult($list) { $xml = ''; $dom = new MotoXML(); $rootNode = new DOMElement('root'); $dom->appendChild($rootNode); $itemsNode = new DOMElement('sections'); $rootNode->appendChild($itemsNode); if (is_array($list)) { foreach($list as $item) { $this->renderResultSection($item, $itemsNode); } } header("Content-Type:text/xml"); $xml = $dom->saveXML(); return $xml; if (is_array($list)) foreach($list as $item) { $itemNode = new DOMElement('item'); $itemsNode->appendChild($itemNode); foreach($item as $key => $value) { if (!is_array($value)) { $itemNode->setAttribute($key, $value); } else { $node = new DOMElement($key); $itemNode->appendChild($node); foreach($value as $k => $v) { } } } } header("Content-Type:text/xml"); $xml = $dom->saveXML(); return $xml; } function renderResultSection($section, $parent) { $node = new DOMElement('section'); $parent->appendChild($node); foreach($section as $name => $value) if (!is_array($value)) $node->setAttribute ($name, $value); if (isset($section['items'])) { foreach($section['items'] as $item) { $this->renderResultSectionItem($item, $node); } } return true; } function renderResultSectionItem($item, $parent) { $node = new DOMElement('item'); $parent->appendChild($node); foreach($item as $name => $value) { if (!is_array($value) && $name != 'text') $node->setAttribute ($name, $value); } $nodeText = new DOMElement('text'); $node->appendChild($nodeText); $nodeText->appendChild($nodeText->ownerDocument->createCDATASection($item['text'])); if (isset($item['parts'])) { $pNode = new DOMElement('parts'); $node->appendChild($pNode); foreach($item['parts'] as $part) { $this->renderResultItemPart($part, $pNode); } } return true; } function renderResultItemPart($item, $parent) { $node = new DOMElement('item'); $parent->appendChild($node); if (isset($item['start'])) $node->setAttribute('start', $item['start']); if (isset($item['end'])) $node->setAttribute('end', $item['end']); if (isset($item['str'])) $node->appendChild($node->ownerDocument->createCDATASection( $item['str'] )); return true; } static function dropIndex($filename) { return self::getInstance()->_dropIndex($filename); } function getIndexFileName($filename) { $info = pathinfo($filename); $indexFileName = $info['dirname'] . '/' . $info['filename'] . '.ind'; return $indexFileName; } function _dropIndex($filename) { $indexFileName = $this->getIndexFileName($filename); if (file_exists($indexFileName)) @unlink($indexFileName); } static function createIndex($filename, $dom = null, $obj = null) { return self::getInstance()->_createIndex($filename, $dom, $obj); } function _createIndex($filename, $dom = null, $obj = null) { if ($dom == null) $dom = MotoXML::create($filename); $indexFileName = $this->getIndexFileName($filename); $indexDom = new MotoXML(); $root = new DOMElement('root'); $indexDom->appendChild($root); $type = ''; if ($obj != null) { $root->setAttribute('class', get_class($obj)); if (isset($obj->id)) $root->setAttribute('id', $obj->id); if (isset($obj->moduleType) && isset($obj->moduleType->type) && is_string($obj->moduleType->type)) $root->setAttribute('objectType', $obj->moduleType->type); elseif (isset($obj->slotType) && isset($obj->slotType->type) && is_string($obj->slotType->type)) $root->setAttribute('objectType', $obj->slotType->type); if (isset($obj->moduleTypeId)) $root->setAttribute('objectTypeId', $obj->moduleTypeId); elseif (isset($obj->slotTypeId)) $root->setAttribute('objectTypeId', $obj->slotTypeId); } $save = false; $nodes = MotoXML::findByXPath('.//object[@type="htmlText"]/data', $dom); if ($nodes != null) { foreach($nodes as $i => $node) { $indexNode = new DOMElement('object'); $root->appendChild($indexNode); $indexNode->setAttribute('id', $node->parentNode->getAttribute('id')); $data = new DOMElement('data'); $indexNode->appendChild($data); $value = strtolower($node->nodeValue); $value = strip_tags($value); $data->appendChild($data->ownerDocument->createCDATASection($value)); } } MotoXML::putXML($indexDom, $indexFileName); return true; } }