<?php
class UpdateUtil { protected static $_core = null; public function __construct($core) { self::$_core = $core; } public static function recurse_delete($src, $kilSrc = false) { $dir = opendir($src); while (false !== ($file = readdir($dir))) if (($file != '.') && ($file != '..')) { if (is_dir($src . '/' . $file) && !is_link($src . '/' . $file)) { self::recurse_delete($src . '/' . $file, true); } else { @unlink($src . '/' . $file); } } closedir($dir); if ($kilSrc) @rmdir($src); } public static function scanDataProviders($fullMode = false) { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { $ModulesService = new ModulesService(); $file2Node = array( 'gallery' => array( 'node' => 'galleryData', 'name' => 'Image Gallery', 'type' => 'simpleGallery', ), 'advanced_catalog' => array( 'node' => 'galleryData', 'name' => 'Image Gallery', 'type' => 'advancedGalleryModule', ), 'advanced_gallery' => array( 'node' => 'galleryData', 'name' => 'Image Gallery', 'type' => 'advancedGalleryModule', ), 'info' => array( 'node' => 'dataProvider', 'name' => 'News', 'type' => 'infoModule', ), 'news' => array( 'node' => 'dataProvider', 'name' => 'News', 'type' => 'infoModule', ), 'playlist' => array( 'node' => 'playlist', 'name' => 'Music Player', 'type' => 'mp3Player', ), ); $dps = $ModulesService->getDataProviders(); if ( $dps->status->status != StatusEnum::SUCCESS ) return false; $maxId = 0; $md5XML = $md5Content = $md5File = $md5stamps = array(); foreach($dps->result as $i=>$dpVO) { $stamp = array(); foreach($dpVO->sources as $source) { $stamp[$source->id] = $source->value; } ksort($stamp); $md5 = md5(serialize($stamp)); $md5XML[$md5] = $md5stamps[$md5] = $dpVO; if ($maxId < $dpVO->id) $maxId = $dpVO->id; } $content = MotoXML::create(CONTENT_RESOURSE_PATH); $modules = MotoXML::findByXPath('//module', $content); if (!is_null($modules) && $modules->length > 0) { foreach($modules as $module) { $query = './data/*[@isDataProvider="true"]'; $dps = MotoXML::findByXPath($query, $module); if ($dps->length > 0 ) { $dpVO = new ModuleDataProviderVO(); $dpVO->moduleType = $module->getAttribute('moduleType'); $dpVO->sources = array(); $nodeName = MotoXML::findOneByXPath("./name", $module); if (!is_null($nodeName)) $dpVO->name = (string) $nodeName->nodeValue; $stamp = array(); foreach($dps as $dp) { $source = new stdClass(); $source->value = $dp->nodeValue; $source->id = $dp->nodeName; $dpVO->sources[] = $source; $stamp[$dp->nodeName] = $dp->nodeValue; if (is_null($dpVO->name)) { $dpVO->name = basename($dp->nodeValue) . ' ' . $module->getAttribute('id'); } } ksort($stamp); $md5 = md5(serialize($stamp)); if (!isset($md5Content[$md5])) { $dpVO->id = ++$maxId; $md5Content[$md5] = $dpVO; if (!isset($md5stamps[$md5])) $md5stamps[$md5] = clone $dpVO; } else { } } } } if (1==1) { $structure = self::$_core->openDOM('xml/structure.xml'); $moduleNodes = MotoXML::findByXPath('//module', $structure); $modules = array(); foreach($moduleNodes as $module) { $modules[$module->getAttribute('type')] = $module->getAttribute('id'); } $files = MotoUtil::scanDir(MOTO_ROOT_DIR . '/xml/modules', ''); foreach($files as $file) if (preg_match('/^(advanced_gallery|advanced_catalog|gallery|info|news|playlist)/i', $file, $match)) { if (!isset($file2Node[$match[1]])) continue; $stamp = array(); $stamp[ $file2Node[$match[1]]['node'] ] = 'xml/modules/' . $file; ksort($stamp); $md5 = md5(serialize($stamp)); if (!isset($md5stamps[$md5])) { $dpVO = new ModuleDataProviderVO(); $dpVO->id = ++$maxId; $dpVO->_moduleType = $file2Node[$match[1]]['type']; if (isset($modules[ $file2Node[$match[1]]['type'] ])) $dpVO->moduleType= $modules[ $file2Node[$match[1]]['type'] ]; $dpVO->name = $file2Node[$match[1]]['name'] . ' ' . $dpVO->id; $source = new stdClass(); $source->id = $file2Node[$match[1]]['node']; $source->value = 'xml/modules/' . $file; $dpVO->sources = array( $source ); $md5File[$md5] = $dpVO; $md5stamps[$md5] = clone $dpVO; } } } $result = new stdClass(); $result->system = $md5XML; $result->file = $md5File; $result->content = $md5Content; $result->all = $md5stamps; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } public static function scanContent() { $responseVO = new ResponseVO(); $responseVO->status = new StatusVO(); $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $result = null; try { $content = MotoXML::create(CONTENT_RESOURSE_PATH); $modules = MotoXML::findByXPath('//module', $content); if (!is_null($modules) && $modules->length > 0) { $result = array(); foreach($modules as $module) { $query = './data/*[@isDataProvider="true"]'; $dps = MotoXML::findByXPath($query, $module); if ($dps->length > 0 ) { $dpVO = new ModuleDataProviderVO(); $dpVO->id = -1; $dpVO->moduleType = $module->getAttribute('moduleType'); $dpVO->sources = array(); $dpVO->listModules = $module->getAttribute('id'); foreach($dps as $dp) { if (is_null($dpVO->name)) { $info = pathinfo($dp->nodeValue); $dpVO->name = $info['filename']; } $source = new stdClass(); $source->value = $dp->nodeValue; $source->id = $dp->getAttribute('id'); $dpVO->sources[] = $source; } $result[] = $dpVO; } } } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } $responseVO->result = $result; return $responseVO; } function batchAddFolderToMediaLibrary($folder, $dir = '') { if ($dir == '') $dir = MOTO_ROOT_DIR; $folderId = $this->addFolderToMediaLibrary($folder); $path = $dir . '/' . $folder['dir']; $files = scandir( $path ); $items = array(); foreach($files as $file) if ($file != '.' && $file != '..' && is_file($path . '/' . $file)) { $item = array( 'type' => 'image', 'source' => $folder['dir'] . '/' . $file, 'parent' => $folderId, ); $items[] = $item; } if (count($items) > 0 ) { $this->addImagesToMediaLibrary($items); } else { throw new Exception('Images from ' . $folder['dir'] . ' not founded'); } return $folderId; } function addFolderToMediaLibrary($item) { $dom = self::$_core->openDOM('/admin/xml/mediaLibrary.xml'); $foldersNode = MotoXML::findOneByXPath('./folders', $dom); $itemsNode = MotoXML::findOneByXPath('./items', $dom); if ($foldersNode == null || $itemsNode == null) { $this->recreateMediaLibrary(); $foldersNode = MotoXML::findOneByXPath('./folders', $dom); $itemsNode = MotoXML::findOneByXPath('./items', $dom); } if ($foldersNode == null && $itemsNode == null) { return null; } if ($foldersNode == null) { throw new Exception ('Cant get access to MediaLibrary folders'); } $folderVO = MotoFolderVO::findByName($item['name'], $dom); if ($folderVO == null) { $folderVO = new MotoFolderVO(); $maxFolder = MotoFolderVO::findMaxId($dom); if ($maxFolder == null || $maxFolder <= 0) $maxFolder = 2; else $maxFolder ++; $folderVO->id = $maxFolder; $folderVO->parent = (isset($item['parent']) ? $item['parent'] : 1); $folderVO->order = (isset($item['order']) ? $item['order'] : 0); $folderVO->name = (isset($item['name']) ? $item['name'] : 'mobile'); $folderVO->saveDomElement($foldersNode->appendChild(new DOMElement('folder'))); } return $folderVO->id; } function addImagesToMediaLibrary($items, $parent = 1) { $dom = self::$_core->openDOM('/admin/xml/mediaLibrary.xml'); $foldersNode = MotoXML::findOneByXPath('./folders', $dom); $itemsNode = MotoXML::findOneByXPath('./items', $dom); if ($itemsNode == null && $foldersNode == null) { $itemsNode = MotoXML::findOneByXPath('.', $dom); } if ($itemsNode == null && $foldersNode != null) throw new Exception ('Cant get access to mediaLibrary items'); foreach($items as $item) { if (!isset($item['source']) || $item['source'] == '') throw new Exception('Bad item for MediaLibrary'); $itemVO = MediaLibraryItemVO::findBySource($item['source'], $dom); if ($itemVO == null) { $itemVO = new MediaLibraryItemVO(); $itemVO->type = (isset($item['type']) ? $item['type'] : 'image'); $itemVO->name = (isset($item['name']) ? $item['name'] : basename($item['source'])); if ( isset($item['parent']) && $item['parent'] > 0 ) $itemVO->parent = $item['parent']; $itemVO->source = $item['source']; $itemVO->saveDomElement($itemsNode->appendChild(new DOMElement('item'))); } } } function addImageToMediaLibrary($item, $parent = 1) { if (!isset($item['source']) || $item['source'] == '') throw new Exception('Bad item for MediaLibrary'); $dom = self::$_core->openDOM('/admin/xml/mediaLibrary.xml'); $itemsNode = MotoXML::findOneByXPath('./items', $dom); if ($itemsNode == null) throw new Exception ('Cant get access to mediaLibrary items'); $itemVO = MediaLibraryItemVO::findBySource($item['source'], $dom); if ($itemVO == null) { $itemVO = new MediaLibraryItemVO(); $itemVO->type = (isset($item['type']) ? $item['type'] : 'image'); $itemVO->name = (isset($item['name']) ? $item['name'] : basename($item['source'])); $itemVO->parent = (isset($item['parent']) && $item['parent'] > 0 ? $item['parent'] : $parent); $itemVO->source = $item['source']; $itemVO->saveDomElement($itemsNode->appendChild(new DOMElement('item'))); } } function recreateMediaLibrary() { try { $dom = self::$_core->openDOM('/admin/xml/mediaLibrary.xml'); if (!defined('MEDIA_LIBRARY')) define('MEDIA_LIBRARY', 'xml/mediaLibrary.xml'); if (!defined('MOTO_MEDIA_LIBRARY')) define('MOTO_MEDIA_LIBRARY', MOTO_ADMIN_DIR . '/' . MEDIA_LIBRARY); $ml = new MediaLibraryVO( $dom ); $service = new MediaLibraryService(); $service->saveMediaLibrary( $ml ); } catch(Exception $e) { } } }