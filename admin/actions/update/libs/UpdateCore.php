<?php
class UpdateCore { protected $doms = array(); public $logs = array(); public $errors = array(); protected $ok = true; protected $data = array(); protected $clientVersion; protected $adminVersion; protected $finished = true; protected $cfg = array( "saveXML" => "onFinished", ); protected $_util = null; protected $echo = ''; protected $messages = array(); protected $base_dir = ''; protected $base_url = ''; protected $protocol = ''; protected $errorMessages = array( 'updateCMS' => 'Error on updating', 'checkExistsFiles' => 'Please, check exist and writeble next file(s): ', 'checkExistsClass' => 'Please, check exist all files with lasted version library: ', ); protected $_log = array(); protected $_log2 = ''; protected $_isLog = false; function loadMessages() { } function __destruct() { if (trim($this->_log2) != '' && $this->_isLog) { $filename = MOTO_ADMIN_DIR . '/logs/update_' . date('Y-m-d-H-i-s' , time()) . '.log'; if (defined('WORK_MODE') && WORK_MODE == 'PACK') $filename = dirname(__FILE__) . '/../logs/update_' . date('Y-m-d-H-i-s' , time()) . '.log'; @file_put_contents($filename, date('Y-m-d H:i:s' , time()) . "\n\n" . $this->_log2); } if (defined('WORK_MODE') && WORK_MODE == 'PACK') { $filename = MOTO_ADMIN_DIR . '/xml/config.xml'; if (is_file($filename)) { @unlink($filename); } $filename = MOTO_ADMIN_DIR . '/xml/modules.xml'; if (is_file($filename)) { @unlink($filename); } $filename = MOTO_ADMIN_DIR . '/config.xml'; if (is_file($filename)) { @unlink($filename); } } } function __construct($updating_from = '') { $self = ( !empty($_SERVER['SCRIPT_NAME']) ? $_SERVER['SCRIPT_NAME'] : getenv('SCRIPT_NAME') ); if (empty($self)) $self = (!empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF')); if (empty($self)) { $self = str_replace("\\", "/", __FILE__); $self = explode($_SERVER["DOCUMENT_ROOT"], $self); $self = "/" . $self[1]; } $dir = preg_replace("/[\/\\\]+/i", "/", dirname($self) . "/"); if (substr($dir, 0, 1) == ".") $dir = substr($dir , 1); if ($updating_from != "") { if (preg_match('/^(.*)\/(' . $updating_from . ')\/$/', $dir, $regs)) { $dir = $regs[1]."/"; } } if (isset($_SERVER["SERVER_PROTOCOL"])) { if (preg_match("/^([^\/]*)\//i", $_SERVER["SERVER_PROTOCOL"], $regs)) { $this->protocol = strtolower($regs[1]); } } $this->base_url = $this->protocol . "://" . ( !empty($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME') ) . $dir; $this->base_dir = str_replace('\\', '/', realpath(dirname(__FILE__) . '/../../' ))."/"; } function setData($key, $value = "") { $this->data[$key] = $value; } protected function getTemplateId() { $filename = dirname(dirname(__FILE__)) . '/template.txt'; if (file_exists($filename) && filesize($filename) > 0) { $template_id = file_get_contents($filename)*1; if ($template_id > 0) $this->setData('template_id', $template_id); } $template_id = $this->getData('template_id', ''); if ( $template_id == '') { if (defined('WORK_MODE') && WORK_MODE == 'PACK') { if ( preg_match( '/^[0-9]+_[a-z]+_[0-9]+_([0-9]+)$/i', MOTO_ROOT_DIR, $m) ) { $template_id = $m[1]; } else { $template_id = 0; } } else { $C = new ContentService(); $p = $C->getProductInfo(); if (isset($p['template_id'])) { $template_id = $p['template_id']; $this->setData('template_id', $template_id); } else { $this->log2('Cant get template_id'); $this->ok = false; } } } return $template_id; } function getObjectTypeId($type, $check, $multi = false) { $dom = $this->openDOM('xml/structure.xml'); $types = $type . 's'; $root = MotoXML::findOneByXPath('./' . $types, $dom); if ($root == null) { $this->log2('Error: cant get root on structure.xml'); $this->ok = false; return false; } $result = null; $query = './' . $type . '[' . $check . ']'; if ($multi) { $nodes = MotoXML::findByXPath($query, $root); if ($nodes != null) { $result = array(); foreach($nodes as $node) $result[] = $node->getAttribute('id'); } } else { $node = MotoXML::findOneByXPath($query, $root); if ($node != null && $node->hasAttribute('id')) { $result = $node->getAttribute('id'); } } return $result; } function getData($key, $default = '') { return (isset($this->data[$key]) ? $this->data[$key] : $default); } function log($func, $data = null) { if (!isset($this->logs[$func])) $this->logs[$func] = array(); if ($data !== null) $this->logs[$func][] = $data; } function log2($str, $save = true) { if ($save) $this->_isLog = true; $this->_log2 .= $str . "\n"; } function getLog2() { return $this->_log2; } function getLog($param = array()) { $ans = date('Y-m-d H:i:s', time()) . ' Updater log' . "\n"; foreach($this->logs as $func => $logs) { $ans .= "$func:\n"; $file = ''; foreach($logs as $log) { $str = ''; if (isset($log['file'])) { if ($file == '' || $file != $log['file']) $str .= "\nFile: " . $log['file'] . "\n	"; $file = $log['file']; } if (isset($log['key']) && $log['value']) $str .= $log['key'] . " = " . $log['value']; if (isset($log['action']) && $log['action'] == "skipped") $str = ''; if ($str != '') $ans .= '	' . $str . "\n"; } } return $ans; } function _log($function, $message, $type = 'error', $add = true) { $key = $function . '_' . $type; if ($function == '_header' || $function == '_footer') { $place = $function; } else $place = 'log'; if (isset($this->_log[$place][$key])) { $log = $this->_log[$place][$key]; if ($add) $log['message'] .= $message; else $log['message'] = $message; } else $log = array('type' => $type, 'message' => $message); $this->_log[$place][$key] = $log; } function run() { $this->detectVersion(); $this->_log('_header', "<b>Starting system update.</b><br/>", 'note'); $this->_log('_header', "Current Client Version: " . $this->stringVersion($this->clientVersion)."<br/>", 'note'); $this->_log('_header', "Current Control Panel: " . $this->stringVersion($this->adminVersion)."<br/>", 'note'); $this->ok = $startWork = true; try { if ($this->digitVersion(VERSION) <= $this->clientVersion && $this->digitVersion(VERSION) <= $this->adminVersion) { $startWork = false; $this->_log('_footer', "<b>No need update your system.</b><br>", 'ok'); $this->finish(); throw new Exception(''); } if (!isset($this->data["fileExists"])) { $this->_log('precheck', '<b>fileExists</b> not setted<br>'); $this->ok = false; } if (!isset($this->data["defaultKeys"])) { $this->_log('precheck', '<b>defaultKeys</b> not setted<br>'); $this->ok = false; } if (!isset($this->data["classExists"])) { $this->_log('precheck', '<b>classExists</b> not setted<br>'); $this->ok = false; } if ($this->ok) { $this->checkExistsFiles($this->data["fileExists"]); $this->checkExistsClass($this->data["classExists"]); } if ($this->ok) $this->proccessDefaultKeys($this->data["defaultKeys"]); if ($this->ok) $this->facebookPatch(); if ($this->ok) { $this->startUpdate(); } if ($this->ok) { $this->_log('_footer', "<b>Update system is successfully complete.</b><br>", 'ok'); $this->saveVersion(); $this->saveXMLs(); $this->finish(); } else { $this->_log('_footer', "<b>Update system is break work. Please, repair errors and run update again</b><br>", 'error'); } } catch(Exception $e) { } $this->echoData(); exit; } function finish() { if (!$this->finished) return false; if ( file_exists(dirname(__FILE__) . '/_' . basename(__FILE__)) ) { @rename( dirname(__FILE__) . '/_' . basename(__FILE__) , dirname(__FILE__) . '/_' . uniqid() . '_' . basename(__FILE__) ); } if (file_exists(__FILE__)) { $this->_log('_footer', "Please, delete or rename file <b>admin/actions/" . basename(__FILE__) . "</b><br>", 'ok'); } } function checkExistsClass($list) { $result = true; $error = array(); foreach($list as $class => $methods) { if (!class_exists($class)) { $result = false; $error[] = $class; } elseif ( is_array($methods) && count($methods)>0 ) { $isMethod = true; foreach($methods as $method) { if ($method != '' && !method_exists($class, $method)) { $isMethod = $result = false; } } if (!$isMethod) { $error[] = $class; } } } if (count($error) > 0) $this->_log(__FUNCTION__, Messages::get('E_CHECK_EXISTS_CLASS') . implode(',', $error)); $this->ok = $this->ok && $result; return $result; } function checkExistsFiles($list) { $result = true; $error = array(); foreach($list as $path) { if (!file_exists(MOTO_ROOT_DIR . "/" . $path) || !is_writable(MOTO_ROOT_DIR . "/" . $path)) { $result = false; $error[] = $path; } } if (count($error) > 0) $this->_log(__FUNCTION__, Messages::get('E_CHECK_EXISTS_FILES') . implode(',', $error)); $this->ok = $this->ok && $result; return $result; } function openDOM($file = "", $filename = "", $dir = null) { if (trim($file) == "" && trim($filename) == "") { die("error on " . __FUNCTION__); } try { if ($dir === null) $dir = MOTO_ROOT_DIR; if ($dir != '') $dir = rtrim($dir, '/') . '/'; $filename = ltrim($filename, '/'); if (trim($filename) == "") $filename = $file; if (isset($this->doms[md5($dir . $filename)]) && $this->doms[md5($dir . $filename)] != null) return $this->doms[md5($dir . $filename)]["dom"]; if ($file == "" || !file_exists($dir . $filename)) { if ($file != '' && !file_exists($dir . $filename)) $this->log2('Can not find file ' . $filename . ' - create new', false); $this->doms[md5($dir . $filename)] = array( "dom" => new MotoXML(), "path" => $dir . $filename, ); } else { $this->log2('get access ' . $filename, false); $this->doms[md5($dir . $filename)] = array( "dom" => MotoXML::create($dir . $filename), "path" => $dir . $filename, ); } return $this->doms[md5($dir . $filename)]["dom"]; } catch(Exception $e) { throw $e; } } public function saveXMLs() { if ($this->ok !== true) { return false; } foreach($this->doms as $i => $xml) { $res = $xml["dom"]->save($xml["path"]); if (!$res) { $this->_log('savexml', Messages::get('E_CHECK_EXISTS_FILES') . $xml['path'], 'error'); $this->ok = false; return; throw new Exception('FILE_NOT_HAVE_ACCESS'); } $this->doms[$i] = null; } if (!defined('WORK_MODE') || WORK_MODE != 'PACK') { if ($this->ok) $this->encodeXmlFilesAfterUpdate(); } return true; } public function echoData() { } public function proccessDefaultKeys($defaults) { if (!$this->ok) { return false; } $ii = 0; try { foreach($defaults as $i => $default) { $ii++; $this->addKeyValueToXML($default["filename"], $default["datas"], $default["rootNode"], $default["nodeName"], $default["attrName"]); } } catch(Exception $e) { } return true; } function addKeyValueToXML($filename, $data, $rootNode = "configuration", $nodeName = "item", $attrName ="name", $rewrite = false ) { $dom = $this->openDOM($filename); $root = MotoXML::findOneByXPath("/" . $rootNode, $dom); $result = true; if (is_null($root)) { $path = explode("/", $rootNode); $node = array(); $this->log2('	Add ' . $rootNode . ' to ' . $filename); $this->log(__FUNCTION__, array( "file" => $filename, "key" => "ROOT", "value" => $rootNode, "action" => "added", )); if (count($path) <= 1) { $root = new DOMElement($rootNode); $dom->appendChild($root); } else for($i = 0; $i < count($path); $i++) { if ($i == (count($path) - 1)) { $root = new DOMElement($path[$i]); $node[($i-1)]->appendChild($root); } else { $node[$i] = new DOMElement($path[$i]); if ($i == 0) $dom->appendChild($node[$i]); else $node[($i-1)]->appendChild($node[$i]); } } } foreach($data as $key => $value) { $node = MotoXML::findOneByXPath("./" . $nodeName . "[@" . $attrName . "='" . $key . "']", $root); if (is_null($node)) { $node = new DOMElement($nodeName); $root->appendChild($node); $node->setAttribute($attrName, $key); $node->appendChild($root->ownerDocument->createCDATASection($value)); $this->log(__FUNCTION__, array( "file" => $filename, "key" => $key, "value" => $value, "action" => "added", )); $this->log2('	add: ' . $attrName . '="' . $key . '" value is "' . $value . '" in file ' . $filename); } else { if ($rewrite) { $this->log(__FUNCTION__, array( "file" => $filename, "key" => $key, "value" => $value, "action" => "rewrited", )); $node->nodeValue = ''; $node->appendChild($root->ownerDocument->createCDATASection($value)); } } } return $result; } public function detectVersion() { $this->clientVersion = $this->detectVersionClient(); $this->adminVersion = $this->detectVersionAdmin(); } public function saveVersion($clientVersion = null, $adminVersion = null) { if ( $clientVersion == null ) $clientVersion = $this->clientVersion; if ( $adminVersion == null ) $adminVersion = $this->adminVersion; $this->saveVersionClient($clientVersion); $this->saveVersionAdmin($adminVersion); } public function digitVersion($version) { if (preg_match("/^([0-9]+)\.([0-9]+)?[\.]?([0-9]*)?$/i", $version, $match)) { $version = sprintf("%d%d%03d", $match[1], $match[2], $match[3]) * 1; } return $version; } public function stringVersion($version) { if (preg_match("/^([0-9]+)([0-9]{1})([0-9]{3})$/i", $version, $match)) { $version = $match[1] . "." . $match[2] . "." . ($match[3]*1); } return $version; } public function detectVersionClient() { $dom = $this->openDOM("config.xml"); $node = MotoXML::findOneByXPath("..//*[@name='CLIENT_VERSION']", $dom); $version = "1.1"; if (!is_null($node) && $node->nodeValue != '') $version = $node->nodeValue; return $this->digitVersion($version); } public function saveVersionClient($version) { $dom = $this->openDOM("config.xml"); $node = MotoXML::findOneByXPath("..//*[@name='CLIENT_VERSION']", $dom); $result = true; if (!is_null($node)) { $node->nodeValue = ""; $node->appendChild($node->ownerDocument->createCDATASection($this->stringVersion($version))); } else $this->ok = $result = false; return $result; } public function detectVersionAdmin() { if (defined('WORK_MODE') && WORK_MODE == 'PACK') return $this->clientVersion; $dom = $this->openDOM("admin/config.xml"); $node = MotoXML::findOneByXPath("..//*[@name='CONTROL_PANEL_VERSION']", $dom); $version = "1.1"; if (!is_null($node) && $node->nodeValue != '') $version = $node->nodeValue; if (isset($_COOKIE['DebuGVersioNAdmiN'])) $version = $_COOKIE['DebuGVersioNAdmiN']; return $this->digitVersion($version); } public function saveVersionAdmin($version) { $dom = $this->openDOM("admin/config.xml"); $node = MotoXML::findOneByXPath("..//*[@name='CONTROL_PANEL_VERSION']", $dom); $result = true; if (!is_null($node)) { $node->nodeValue = ""; $node->appendChild($node->ownerDocument->createCDATASection($this->stringVersion($version))); } else $this->ok = $result = false; return $result; } protected function findUpdate($startVersion = 0) { if (!isset($this->updateMap[$startVersion])) $startVersion = '11000'; $nextVersion = $this->updateMap[$startVersion]; return $nextVersion; } public function startUpdate($step = 0) { if ($this->digitVersion(VERSION) <= $this->clientVersion && $this->digitVersion(VERSION) <= $this->adminVersion) { $this->log(__FUNCTION__, array( "message" => "finished", "ok" => $this->ok, )); return true; } $startVersion = ($this->clientVersion < $this->adminVersion ? $this->clientVersion : $this->adminVersion); $nextVersion = $this->findUpdate($startVersion); $method = "updateCMS_" . $nextVersion; $this->log(__FUNCTION__, array( "from" => $startVersion, "to" => $nextVersion, "method" => $method, )); $this->log2('Run ' . $method); if (method_exists($this, $method) && $this->ok === true) { $this->_log($method, Messages::get('N_START_UPDATE_INIT', array('version'=>$this->stringVersion($nextVersion))), 'note'); try { $this->ok = $this->$method(); } catch(Exception $e) { $this->ok = false; $this->log2("\n".'EXCEPTION : ' . $e->getMessage() . "\n" . $e->getTraceAsString()."\n"); } if ($this->ok) { $this->clientVersion = $nextVersion; $this->adminVersion = $nextVersion; $this->log2('Run ' . $method . ' is ok'); } else { $this->log2('Run ' . $method . ' is bad'); $this->_log($method, Messages::get('E_START_UPDATE_BREAK'), 'error'); } $step ++; if ($this->ok === true) $this->startUpdate($step); if ($this->ok === true && isset($this->cfg["saveXML"]) && preg_match("/onEachStep/i", $this->cfg["saveXML"]) ) { $this->saveXMLs(); } } else { $this->_log($method, 'Wrong map Update<br>', 'error'); $this->ok = false; } if ($this->ok != true) { } } function addAttribute($file, $xpath, $attribute, $value) { $dom = $this->openDOM($file); $root = MotoXML::findOneByXPath(".", $dom); $nodes = MotoXML::findByXPath($xpath, $dom); if (!is_null($nodes)) { foreach ($nodes as $node) { if ($node->getAttribute($attribute) == "") { $node->setAttribute($attribute, $value); $this->log(__FUNCTION__, "attribute $attribute is setted"); } else { $this->log(__FUNCTION__, "attribute $attribute is exist - " . $node->getAttribute($attribute)); } } } else { $this->log(__FUNCTION__, "nodes by path: $xpath not found"); } return true; } function addAttributes($file, $datas) { $result = array(); $dom = $this->openDOM($file); $root = MotoXML::findOneByXPath(".", $dom); foreach($datas as $i => $data) { if (!isset($data["attributes"]) || !is_array($data["attributes"])) $data["attributes"] = array($data["attribute"] => $data["value"]); $action = (isset($data["action"]) ? $data["action"] : "init"); $nodes = MotoXML::findByXPath($data["xpath"], $dom); if (!is_null($nodes)) { foreach ($nodes as $node) { foreach($data["attributes"] as $attribute => $value) { if ( ($action == "init" && !$node->hasAttribute($attribute)) || ($action == "reInit" && (!$node->hasAttribute($attribute) || $node->getAttribute($attribute) == "")) || ($action == "set") ) { $this->log2('	' . $action . ' attribute "' . $attribute . '" value "' . $value . '" for ' . $data["xpath"]); $node->setAttribute($attribute, $value); } elseif ($action == "remove" && $node->hasAttribute($attribute)) { $node->removeAttribute($attribute); $this->log2('	' . $action . ' attribute ' . $attribute); } } } } } return true; } public function getDataProvidersFromXML(&$content, $files = array()) { $modules = MotoXML::findByXPath('.//module[@externalData="true" and @externalFile!=""]', $content); if (!is_null($modules)) { foreach($modules as $module) { $filename = $module->getAttribute('externalFile'); if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { $files[md5($filename)] = $filename; } } } return $files; } public function encodeXmlFilesAfterUpdate() { $this->log2('   Post backup actions'); $dom = $this->openDOM('xml/settings.xml'); $node = MotoXML::findOneByXPath('./configuration/option[@name="loadEncodedData"]', $dom); $needEncode = false; if ($node != null) { $needEncode = MotoUtil::toBoolean($node->nodeValue); } if (defined('ENCODED_CONTENT_RESOURSE_PATH')) { if (file_exists(ENCODED_CONTENT_RESOURSE_PATH)) { $this->log2('       delete ' . ENCODED_CONTENT_RESOURSE_PATH); @unlink(ENCODED_CONTENT_RESOURSE_PATH); } } else $needEncode = false; if (defined('ENCODED_STRUCTURE_RESOURSE_PATH')) { if (file_exists(ENCODED_STRUCTURE_RESOURSE_PATH)) { $this->log2('       delete ' . ENCODED_STRUCTURE_RESOURSE_PATH); @unlink(ENCODED_STRUCTURE_RESOURSE_PATH); } } else $needEncode = false; if ($needEncode) { $this->log2('       start compress files'); $level = 9; $files = array( array('xml/content', ENCODED_CONTENT_RESOURSE_PATH) , array('xml/structure', ENCODED_STRUCTURE_RESOURSE_PATH) ); $error = ''; foreach($files as $file) { if (!file_exists(MOTO_ROOT_DIR . '/' . $file[0] . '.xml')) { if ($error != '') $error .= ','; $error .= $file[0] . '.xml'; continue; } $data = file_get_contents(MOTO_ROOT_DIR . '/' . $file[0] . '.xml'); $gzdata = gzcompress($data, $level); $this->log2('           ' . $file[0] . '.xml'); file_put_contents($file[1], $gzdata); @chmod($file[1], 0644); } if ($error != '') { return $error; } } $this->log2('   finished'); return true; } function facebookPatch() { return; $list = array ( ); $p = array( 'template_id' => '000', ); if (defined('WORK_MODE') && WORK_MODE == 'PACK') { $folder = basename(MOTO_ROOT_DIR); if (preg_match('/_[0-9]+_([0-9]+)$/i', $folder, $m)) { $p['template_id'] = $m[1]; } } else { $p['template_id'] = $this->getTemplateId(); } if (defined('TEMPLATE_TYPE') && TEMPLATE_TYPE == 'facebook') $list[$p['template_id']] = $p['template_id']; if ( !isset($list[$p['template_id']]) ) { return; } $this->log2('	Patch for facebook template'); $this->addKeyValueToXML('config.xml', array( 'TEMPLATE_TYPE' => 'facebook', ) ); $this->addKeyValueToXML('xml/settings.xml', array( 'showCustomBlockForNonFans' => 'false', 'nonFansCustomBlockType' => 'image', 'nonFansCustomBlockCode' => '', 'facebookAppId' => '', 'facebookAppSecret' => '', ), 'motoConfig/configuration', 'option', 'name' ); } function addHolderOnStructure(array $params) { $dom = $this->openDOM('xml/structure.xml'); $parentNode = MotoXML::findOneByXPath($params['parent'], $dom); if ($parentNode == null) { throw new Exception('Error: cant find parent by query : ' . $params['parent'], 10); } $query = './contentHolders'; $holderNode = MotoXML::findOneByXPath($query, $parentNode); if ($holderNode == null) { throw new Exception('Error: cant find contentHolders on parent  : ' . $params['parent'], 10); } $query = './holder[@id=' . $params['holder_id'] . ']'; $checkNode = MotoXML::findOneByXPath($query, $holderNode); if ($checkNode != null) { throw new Exception('			holder already exists - skip', 0); } $node = $dom->createDocumentFragment(); $node->appendXML($params['holder_xml']); $holderNode->appendChild($node); return true; } function getNextIdOnContent() { $maxId = $this->getData('max_id'); if ( $maxId == null ) { $maxId = $this->getMaxIdOnContent(); } $maxId ++; $this->setData('max_id', $maxId); return $maxId; } function getMaxIdOnContent() { $maxId = $this->getData('max_id'); if ( $maxId != null ) return $maxId; $dom = $this->openDOM('xml/content.xml'); $query = './/object | .//slot | .//module'; $maxIdNodes = MotoXML::findByXPath($query, $dom); $id = $maxId = 0; if (!is_null($maxIdNodes)) { foreach($maxIdNodes as $maxIdNode) { $id = $maxIdNode->getAttribute('id')*1; if ($id > $maxId) { $maxId = $id; } } } $this->setData('max_id', $maxId); return $maxId; } public function syncLanguages() { $langs = array( 'ru' => 'Русский' ); foreach($langs as $lang => $title) { try { $res = $this->syncLanguage($lang, $title); } catch(Exception $e) { } } } public function syncLanguage($lang, $title) { if (!is_dir(MOTO_ADMIN_DIR . '/language/' . $lang) || !file_exists(MOTO_ADMIN_DIR . '/language/' . $lang . '/language.xml') || !file_exists(MOTO_ADMIN_DIR . '/xml/languages.xml') ) return false; $dom = $this->openDOM('/admin/xml/languages.xml'); $root = MotoXML::findOneByXPath('.', $dom); if ($root == null) return false; $node = MotoXML::findOneByXPath('.//language[@id="' . $lang . '"]', $root); if ($node != null) return false; $node = $root->ownerDocument->createDocumentFragment(); $xml = '	<language id="' . $lang . '">
		<name><![CDATA[' . $title . ']]></name>
	</language>
'; $node->appendXML($xml); $root->appendChild($node); $this->log2('	Add Language "' . $lang . ' : ' . $title . '" to admin/xml/languages.xml'); return true; } public function addObjectToStructure($type, $xml, $checks = '', $reinstall = true) { $xml = '<structure>' . $xml . '</structure>'; $dom = $this->openDOM('xml/structure.xml'); $type = strtolower($type); $types = $type . 's'; $root = MotoXML::findOneByXPath('./' . $types, $dom); $query = './' . $type . '[not(@id <= preceding-sibling::' . $type . '/@id) and not(@id <= following-sibling::' . $type . '/@id)]'; $maxIdNode = MotoXML::findOneByXPath($query, $root); $maxId = 1; if (!is_null($maxIdNode)) { $maxId = $maxIdNode->getAttribute('id')*1 + 1; } $query = './' . $type . '[@id=' . $maxId . ']'; $checkNode = MotoXML::findOneByXPath($query, $root); if ($checkNode != null) { $this->log2('	Error: try to found max ' . $type . ' id on xml/structure.xml - check ID'); $this->_log('updateCMS', Messages::get('E_BAD_ID_IN_FILE', array('type' => $type, 'file' => 'xml/structure.xml')), 'error'); throw new Exception('Ooops error on structure - repeated id in ' . $type); } $isNew = true; $nodeObj = null; if ($checks != '') { $query = './' . $type . '[' . $checks . ']'; $nodeObj = MotoXML::findOneByXPath($query, $root); if ($nodeObj != null) { if ($reinstall === false) { return ; } $maxId = $nodeObj->getAttribute('id'); $isNew = false; } } $_dom = new MotoXML(); $_dom->loadXML($xml); $_root = MotoXML::findOneByXPath('.', $_dom); $nodes = MotoXML::findByXPath('..//' . $type, $_root); if (!is_null($nodes) && $nodes) { foreach($nodes as $node) { $node->setAttribute('id', $maxId); $maxId++; $xml = $node->parentNode->ownerDocument->saveXML($node); try { $nodex = $root->ownerDocument->createDocumentFragment(); $nodex->appendXML($xml); if ($isNew == false && $nodeObj != null) { $root->replaceChild($nodex, $nodeObj); } else $root->appendChild($nodex); } catch(Exception $e) { throw new Exception( $e->getMessage() ); } } } } function copyFiles($version) { $result = array('ok' => false, 'message' => '', 'type'=> '', 'filename'=>''); try { $dir = dirname(dirname(__FILE__)); $result['filename'] = '/files/cms' . $version . '.zip'; $result['dirname'] = '/files/cms' . $version; $result['message'] .= Messages::get('N_COPYINGDIR_START'); if (!file_exists($dir . $result['dirname']) || !is_dir($dir . $result['dirname'])) throw new Exception(Messages::get('E_DIR_NOT_EXISTS', array('folder' => $result['dirname']))); $result['ok'] = $this->copyFolder2Folder($dir . $result['dirname'], MOTO_ROOT_DIR); } catch (Exception $e) { $result['message'] .= $e->getMessage(); $result['type'] = 'error'; $this->ok = false; } return $result; } function copyFolder2Folder($fromDir, $toDir) { $result = true; $lst = scandir($fromDir); foreach($lst as $name) if ($name != '.' && $name != '..') { if (is_dir($fromDir . '/' . $name)) { if (!is_dir($toDir . '/' . $name)) mkdir($toDir . '/' . $name, 0755, true); $result &= $this->copyFolder2Folder($fromDir . '/' . $name, $toDir . '/' . $name); } else { if (file_exists($toDir . '/' . $name)) unlink($toDir . '/' . $name); copy($fromDir . '/' . $name, $toDir . '/' . $name); } } return $result; } function copyFilesOld($version) { $result = array('ok' => false, 'message' => '', 'type'=> '', 'filename'=>''); try { $dir = dirname(dirname(__FILE__)); $result['filename'] = '/files/cms' . $version . '.zip'; $result['message'] .= Messages::get('N_COPYING_START', array('fileUrl' => '.' . $result['filename'])); if (!file_exists($dir . $result['filename']) || !is_file($dir . $result['filename'])) throw new Exception(Messages::get('E_FILE_NOT_EXISTS', array('file' => $result['filename']))); if (!class_exists('ZipArchive', false)) throw new Exception(Messages::get('N_COPYING_NO_ZIP_CLASS', array('fileUrl' => '.' . $result['filename']))); $zip = new ZipArchive(); $zip->open($dir . $result['filename']); $result['ok'] = $zip->extractTo(MOTO_ROOT_DIR); } catch (Exception $e) { $result['message'] .= $e->getMessage(); $result['type'] = 'error'; $this->ok = false; } return $result; } function installModule() { $default = array( 'id' => array( 'required' => true, 'value' => '', 'validation' => '/^[a-z-0-9]+$/i', ), 'librarySymbolLinkage' => array( 'required' => true, 'value' => '', 'validation' => '/^[a-z-0-9]+$/i', ), 'name' => array( 'required' => true, 'value' => '', 'validation' => '/^[a-z-0-9\s]+$/i', ), 'url' => array( 'required' => true, 'value' => '', 'validation' => '/^modules\/[a-z-0-9\/\.]+\.swf$/i', ), 'resizable' => 'true', 'icon' => '', 'smallIcon' => '', 'isContent' => '', 'properties' => '', 'template' => '', ); } function installSlot() { } function getValueXML($node, $def = null) { if (!is_null($node)) return $node->nodeValue; return $def; } public function updateCMS_11000() { if ($this->ok) { $this->ok = $this->updateCMS_11000_website('xml/content.xml'); } if ($this->ok) $this->ok = $this->updateCMS_11000_advancedVerticalMenuModule('xml/content.xml'); if ($this->ok) $this->ok = $this->updateCMS_11000_mobile(); return $this->ok; } public function updateCMS_11000_website($filename) { $this->log2(' '); $this->log2('	Patch for ' . $filename . ' /website/properties'); $this->log2('		start'); $dom = $this->openDOM($filename); $root = MotoXML::findOneByXPath('.', $dom); $websiteNode = MotoXML::findOneByXPath('./website', $dom); if ($websiteNode == null) { $this->log2('	Cant found ./website on ' . $filename); return false; } $propertiesNode = MotoXML::findOneByXPath('./properties', $websiteNode); if (is_null($propertiesNode)) { $this->log2('	Cant found ./website/properties on ' . $filename); return false; } $defaultValues = array( '53' => 'visible', '54' => '', '55' => 'true', '56' => 'images/lightbox/lightbox_close.png', '57' => '', '58' => '100', '59' => 'fit', '60' => 'fade', '61' => 'fade', '360' => '', '366' => '', '367' => '<style background="none 0x00000000 0x00000000 -90  left top no-repeat" border="0xFFFFFFFF 1 1 1 1 0 0 0 0" padding="0 0 0 0"/>', '368' => '', '369' => 'images/lightbox/lightbox_thumbnails_prev.png', '370' => 'images/lightbox/lightbox_thumbnails_next.png', '371' => '50', '372' => 'images/lightbox/lightbox_show_thumbnails.png', '373' => '', '375' => '', '380' => '', ); $mediaLibraryFolder = array( 'parent' => 1, 'order' => 1, 'name' => 'Controls', ); $mediaLibraryFolderId = $this->_util->addFolderToMediaLibrary($mediaLibraryFolder); $errors = array(); foreach($defaultValues as $propertyId => $defaultValue ) { $check = MotoXML::findOneByXPath('./item[@propertyType=' . $propertyId . ']', $propertiesNode); if ($check == null) { $newNode = $dom->createDocumentFragment(); $newNode->appendXML('      <item propertyType="' . $propertyId . '"><![CDATA[' . $defaultValue . ']]></item>
'); $propertiesNode->appendChild($newNode); $this->log2('			add property ' . $propertyId . ' = ' . $defaultValue); switch($propertyId) { case 56: case 369: case 370: case 372: $mediaLibraryItem = array( 'type' => 'image', 'source' => $defaultValue, 'parent' => $mediaLibraryFolderId, ); $this->log2('			Try to add image ' . $defaultValue . ' to MediaLibrary'); $this->_util->addImageToMediaLibrary($mediaLibraryItem); break; } } else { $this->log2('			property ' . $propertyId . ' already exists - skipped'); } } $this->log2('	finished'); return $this->ok; } public function updateCMS_11000_advancedVerticalMenuModule($filename) { $this->log2(' '); $this->log2('	Patch for ' . $filename . ' //module[@moduleType=12]'); $this->log2('		start'); $dom = $this->openDOM($filename); $root = MotoXML::findOneByXPath('.', $dom); $moduleNodes = MotoXML::findByXPath('//module[@moduleType=12]', $dom); if ($moduleNodes == null) { $this->log2('		Not found any module[@moduleType=12]'); $this->log2('	finished'); return true; } foreach($moduleNodes as $moduleNode) { $propertiesNode = MotoXML::findOneByXPath('./properties', $moduleNode); if (is_null($propertiesNode)) { $this->log2('	Cant found ./module[@id=' . $moduleNode->getAttribute('id') . ']/properties '); return false; } $check = MotoXML::findOneByXPath('./item[@propertyType=48]', $propertiesNode); if ($check == null) { $newNode = $dom->createDocumentFragment(); $newNode->appendXML('<item propertyType="48"><![CDATA[false]]></item>
<item propertyType="45"><![CDATA[25]]></item>
<item propertyType="49"><![CDATA[false]]></item>
<item propertyType="55"><![CDATA[100]]></item>
'); $refNode = MotoXML::findOneByXPath('./item[@propertyType="38"]', $propertiesNode); if ($refNode != null) { $refNode->parentNode->insertBefore($newNode, $refNode); $this->log2('       add property id=45, 48, 49, 55 before propertyType=38'); } else { $nodeProps->appendChild($newNode); $this->log2('       add property id=45, 48, 49, 55 to end'); } } else { $this->log2('			property 48 already exists - skipped'); } } $this->log2('	finished'); return $this->ok; } public function updateCMS_11000_mobile() { if (!defined('MOBILE_WEBSITE_FOLDER')) { define('MOBILE_WEBSITE_FOLDER', 'm'); } $filename = MOBILE_WEBSITE_FOLDER . '/xml/content.xml'; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_11000_website($filename); if ($this->ok) $this->ok = $this->updateCMS_11000_advancedVerticalMenuModule($filename); } else { $this->log2('	File ' . $filename . ' not found, patch skiped'); } return $this->ok; } public function updateCMS_11001() { return $this->ok; } public function updateCMS_11002_button($filename = null) { if ($filename == null) { if ($this->ok) $this->updateCMS_11002_button('xml/content.xml'); $mobileFiles = array( 'xml/content.xml', 'template/xml/content.xml', 'blank/xml/content.xml' ); foreach($mobileFiles as $mobileFile) { $filename = MOBILE_WEBSITE_FOLDER . '/' . $mobileFile; if (file_exists(MOTO_ROOT_DIR . '/' . $filename) && $this->ok) $this->ok = $this->updateCMS_11002_button($filename); } return $this->ok; } $this->log2(' '); $this->log2('	Patch for ' . $filename . ' ButtonSlot'); $this->log2('		start'); $dom = $this->openDOM($filename); $query = './/slot[@slotType="1"]'; $slots = MotoXML::findByXPath($query, $dom); if ($slots != null) { foreach($slots as $slotNode) { $propertyNode = MotoXML::findOneByXPath('./properties', $slotNode); if ($propertyNode == null) { $this->log2('Warning: Not found "properties" on slot id:' . $slotNode->getAttribute('id')); continue; } $check = MotoXML::findOneByXPath('./item[@propertyType="6"]', $propertyNode); if ($check != null) { $this->log2('			item[@propertyType="6"] already exists on slot id:' . $slotNode->getAttribute('id')); continue; } $newNode = $dom->createDocumentFragment(); $newNode->appendXML(' <item propertyType="6"><![CDATA[false]]></item>
		    '); $refNode = MotoXML::findOneByXPath('./item[@propertyType="10"]', $propertyNode); if ($refNode != null) { $refNode->parentNode->insertBefore($newNode, $refNode); $this->log2('       add property id=6 before id=10'); } else { $propertyNode->appendChild($newNode); $this->log2('       add property id=6 to end'); } } } else { $this->log2('			Not found "ButtonSlot"'); } $this->log2('		finished'); return $this->ok; } public function updateCMS_11002_slider($filename = null) { if ($filename == null) { if ($this->ok) $this->updateCMS_11002_slider('xml/content.xml'); $mobileFiles = array( 'xml/content.xml', 'template/xml/content.xml', 'blank/xml/content.xml' ); foreach($mobileFiles as $mobileFile) { $filename = MOBILE_WEBSITE_FOLDER . '/' . $mobileFile; if (file_exists(MOTO_ROOT_DIR . '/' . $filename) && $this->ok) $this->ok = $this->updateCMS_11002_slider($filename); } return $this->ok; } $this->log2(' '); $this->log2('	Patch for ' . $filename . ' SliderModule'); $this->log2('		start'); $dom = $this->openDOM($filename); $query = './/module[@moduleType="11"]'; $modules = MotoXML::findByXPath($query, $dom); if ($modules != null) { foreach($modules as $moduleNode) { $propertyNode = MotoXML::findOneByXPath('./properties', $moduleNode); if ($propertyNode == null) { $this->log2('Warning: Not found "properties" on module id:' . $moduleNode->getAttribute('id')); continue; } $check = MotoXML::findOneByXPath('./item[@propertyType="42"]', $propertyNode); if ($check != null) { $this->log2('			item[@propertyType="42"] already exists on module id:' . $moduleNode->getAttribute('id')); continue; } $newNode = $dom->createDocumentFragment(); $newNode->appendXML(' <item propertyType="42"><![CDATA[false]]></item>
		    '); $refNode = MotoXML::findOneByXPath('./item[@propertyType="101"]', $propertyNode); if ($refNode != null) { $refNode->parentNode->insertBefore($newNode, $refNode); $this->log2('       add property id=42 before id=101'); } else { $propertyNode->appendChild($newNode); $this->log2('       add property id=42 to end'); } } } else { $this->log2('			Not found "ButtonSlot"'); } $this->log2('		finished'); return $this->ok; } public function updateCMS_11002() { if (!defined('MOBILE_WEBSITE_FOLDER')) define('MOBILE_WEBSITE_FOLDER', 'm'); if ($this->ok) $this->ok = $this->updateCMS_11002_button(); if ($this->ok) $this->ok = $this->updateCMS_11002_slider(); return $this->ok; } public function updateCMS_11003() { return $this->ok; } public function updateCMS_12000_googleapi($filename) { $this->log2('		start'); $dom = $this->openDOM($filename); $node = MotoXML::findOneByXPath("..//*[@name='YOUTUBE_API_SERVICE']", $dom); if (!is_null($node)) { $node->nodeValue = ""; $node->appendChild($node->ownerDocument->createCDATASection("https://www.googleapis.com/youtube/v3/search")); } $node2 = MotoXML::findOneByXPath("..//*[@name='YOUTUBE_DEVELOPER_KEY']", $dom); if (!is_null($node2)) { $node2->nodeValue = ""; $node2->appendChild($node->ownerDocument->createCDATASection("AIzaSyCWTPG9tHp186QdzafSdEBWn5pld_k6fBU")); } else $this->log2('      not found Youtube api key'); $this->log2('	finished 1.4 config nodes'); return $this->ok; } public function updateCMS_12000() { $filename = 'admin/config.xml'; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_12000_googleapi($filename); } else { $this->log2('	File ' . $filename . ' not found, patch skiped'); } define("FLASH_MIGRATION_CONFIG_PATH", dirname(__FILE__) . DIRECTORY_SEPARATOR . 'flash-migration-config.php'); include_once(FLASH_MIGRATION_CONFIG_PATH); try { $templateProcessor = new TemplateProcessor(); $dom = $this->openDOM('xml/content.xml'); $processingResult = $templateProcessor->processTemplate(MOTO_ROOT_DIR, HTML_TEMPLATE_TYPE,$dom); } catch (Exception $ex) { $this->log($ex); } return $this->ok; } public function updateCMS_13000_facebookappsecret($filename) { $dom = $this->openDOM($filename); $node = MotoXML::findOneByXPath("..//*[@name='facebookAppSecret']", $dom); $result = true; if (!is_null($node)) { $phpv = explode('.',phpversion()); if ($phpv[1] != 6){ $c = new ContentService(); $p = $c->getProductInfo(); $tmpvalue = MotoUtil::decrypt($node->nodeValue, $p['order_id']); $node->nodeValue = MotoUtil::encrypt($tmpvalue, $p['product_id']); } else { $node->nodeValue = ""; $this->_log( "updateCMS_13000", "<span style='color:red;font-weight: bold;'>In php version 5.6 mcrypt_encrypt() changed its working algorythm.<br/>
							We were not able to decrypt your setting 'Facebook App Secret'.<br/>
					 		We've reseted it. Please, fill it again.</span><br/>", 'note' ); } $node->appendChild($node->ownerDocument->createCDATASection($node->nodeValue)); } return $result; } public function updateCMS_13000_contactformsmtp($filename) { $dom = $this->openDOM($filename); $node = MotoXML::findOneByXPath("..//smtpPassword", $dom); $result = true; if (!is_null($node)) { $phpv = explode('.',phpversion()); if ($phpv[1] != 6){ $c = new ContentService(); $p = $c->getProductInfo(); $tmpvalue = MotoUtil::decrypt($node->nodeValue, $p['order_id']); $node->nodeValue = MotoUtil::encrypt($tmpvalue, $p['product_id']); } else { $node->nodeValue = ""; $this->_log( "updateCMS_13000", "<span style='color:red;font-weight: bold;'>In php version 5.6 mcrypt_encrypt() changed its working algorythm.<br/>
							We were not able to decrypt your setting 'smtpPassword'.<br/>
					 		We've reseted it. Please, fill it again.</span><br/>", 'note' ); } $node->appendChild($node->ownerDocument->createCDATASection($node->nodeValue)); } else $this->log2('	property smtpPassword in ' . $filename . ' not found, patch skiped'); return $result; } public function updateCMS_13000_contactform($filename) { $dom = $this->openDOM($filename); $query = './/module[@moduleType="2"]'; $modules = MotoXML::findByXPath($query, $dom); if ($modules != null) { foreach($modules as $moduleNode) { $propertyNode = MotoXML::findOneByXPath('./data/formConfiguration', $moduleNode); if ($propertyNode == null) { $this->log2('Warning: Not found "data/formConfiguration" on module id:' . $moduleNode->getAttribute('id')); continue; } $filename = $propertyNode->nodeValue; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_13000_contactformsmtp($filename); } } } return $this->ok; } public function updateCMS_13000() { $filename = 'xml/settings.xml'; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_13000_facebookappsecret($filename); } else { $this->log2('	File ' . $filename . ' not found, patch skiped'); } $filename = 'xml/content.xml'; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_13000_contactform($filename); } else { $this->log2('	File ' . $filename . ' not found, patch skiped'); } $filename = 'm/xml/content.xml'; if (file_exists(MOTO_ROOT_DIR . '/' . $filename)) { if ($this->ok) $this->ok = $this->updateCMS_13000_contactform($filename); } else { $this->log2('	File ' . $filename . ' not found, patch skiped'); } return $this->ok; } } 