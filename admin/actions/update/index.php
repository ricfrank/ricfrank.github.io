<?php
error_reporting(E_ALL); ini_set('display_errors', 'off'); ini_set('log_errors', 'on'); ini_set('error_log', './php_error.log'); if (isset($_POST['SetWorkModeTo']) && $_POST['SetWorkModeTo'] == 'PACK') { define('WORK_MODE', 'PACK'); } if (isset($_GET['IniTDebuGVersioNAdmiN'])) { $_COOKIE['DebuGVersioNAdmiN'] = $_GET['IniTDebuGVersioNAdmiN']; setcookie('DebuGVersioNAdmiN', $_COOKIE['DebuGVersioNAdmiN'], time() + 60*5); } $require_once = dirname(__FILE__) . '/../../config/ProjectConfig.php'; if (!file_exists($require_once)) { die('<pre>ProjectConfig was not found.</pre>'); } require_once $require_once; set_include_path( '.' . PATH_SEPARATOR . dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX . '/': '') . PATH_SEPARATOR . get_include_path() ); $cfg = array(); ProjectConfig::registerAutoload(); if (!defined('WORK_MODE')) ProjectConfig::loadConstants(); ProjectConfig::startSession(); define("VERSION", MotoVersion::getVersion()); define("MOTO_TOOL_DIR", dirname(__FILE__) . '/'); define("MOTO_TOOL_NAME", 'update'); if (defined('WORK_MODE') && WORK_MODE == 'PACK') { if (!defined('CONTROL_PANEL_CONFIGURATION')) define('CONTROL_PANEL_CONFIGURATION', 'xml/config.xml'); if (!defined('DEMO_MODE')) define('DEMO_MODE', 'false'); } $defaults = array(); $defaults["config.xml"] = array( "filename" => "config.xml", "rootNode" => "configuration", "nodeName" => "item", "attrName" => "name", "datas" => array( "CONFIG_RESOURSE_PATH" => "xml/settings.xml", "CONTENT_RESOURSE_PATH" => "xml/content.xml", "ASSETS_RESOURSE_PATH" => "xml/assets.xml", "STRUCTURE_RESOURSE_PATH" => "xml/structure.xml", "FONTS_RESOURSE_PATH" => "xml/fonts.xml", "FONTS_FOLDER" => "fonts", "SNAPSHOT_WIDTH" => "205", "SNAPSHOT_CREATION_DELAY" => "2", "CLIENT_VERSION" => "1.0", ), ); $defaults["admin_config.xml"] = array( "filename" => "admin/config.xml", "rootNode" => "configuration", "nodeName" => "item", "attrName" => "name", "datas" => array( "CONTROL_PANEL_CONFIGURATION" => "xml/config.xml", "USER_DATA" => "data/users.xml", "SERVER_TEST" => "actions/check_requirements.php", "MEDIA_LIBRARY" => "xml/mediaLibrary.xml", "LANGUAGES_LIBRARY" => "xml/languages.xml", "LANGUAGES_LOCATION" => "language", "LANGUAGE_TEXTS" => "language.xml", "TEMPLATE_LOCATION" => "", "TEMPLATE_CONFIGURATION" => "../config.xml", "MODULES_LIBRARY" => "xml/modules.xml", "FILE_UPLOAD_SCRIPT" => "actions/upload_media.php", "FONTS_UPLOAD_SCRIPT" => "actions/upload_fonts.php", "WEBSITE_URL" => "", "CONTROL_PANEL_ASSETS" => "xml/assets.xml", "DEMO_MODE" => "false", "REBRANDING_ENABLED" => "false", "DEVELOPER_MODE" => "false", "GOOGLE_ANALYTICS_URI" => "http://www.google.com/analytics/", "GOOGLE_WEBMASTER_TOOLS_URI" => "http://www.google.com/webmasters/tools/", "ONLINE_FONT_CREATOR_URI" => "http://www.cms-guide.com/online-font-creator/", 'ONLINE_FONTS_URI' => 'http://fonts.cms-guide.com/google/', 'CMS_HELP_URI' => 'http://cms-guide.com/', 'CMS_ACCOUNTS_URI' => 'http://accounts.cms-guide.com/', "THUMBNAILS_ENABLED" => "true", "THUMBNAIL_MAX_WIDTH" => "260", "THUMBNAIL_MAX_HEIGHT" => "240", "THUMBNAIL_JPG_QUALITY" => "80", "CONTROL_PANEL_VERSION" => "1.0", 'YOUTUBE_API_SERVICE' => 'http://gdata.youtube.com/feeds/api/videos/', 'YOUTUBE_DEVELOPER_KEY' => 'AI39si4q2ytMPHQgytvU7EK-wsQzZe7EPOMawlwaxA-TT6Ftp_5xXGDqIV5fCE3vbW-tEFhPPAzL07wr9TaWAbj82jky92xm4w', 'BACKUP_AUTO_MODE' => 'true', 'MOBILE_WEBSITE_FOLDER' => 'm', 'MOBILE_TEMPLATES_FOLDER' => 'm' ), ); $defaults["admin_xml_config.xml"] = array( "filename" => "admin/xml/config.xml", "rootNode" => "configuration", "nodeName" => "item", "attrName" => "name", "datas" => array( "language" => "eng", "welcomeScreen" => "false", "extendedRightClickMenu" => "false", "checkForUpdates" => "false", "previewWebsiteSameWindow" => "true", "previewWebsiteFromStartPage" => "true", ), ); $defaults["xml_settings.xml"] = array( "filename" => "xml/settings.xml", "rootNode" => "motoConfig/configuration", "nodeName" => "option", "attrName" => "name", "datas" => array( "startPage" => "1", "websiteTitlePrefix" => "", "showWarnings" => "false", "googleAnalyticsEnabled" => "false", "googleAnalyticsAccount" => "", "googleWebmasterToolsEnabled" => "false", "googleWebmasterToolsMetaTag" => "", "googleWebmasterToolsFileName" => "", "websiteIcon" => "", "underConstruction" => "false", "underConstructionTheme" => "", "underConstructionMessage" => "", 'websiteProtectionSessionExpireTime' => '3600', 'websiteProtectionEnabled' => 'false', 'websiteProtectionKey' => '', 'javascriptDisabledMessage' => 'Your browser does not support JavaScript.', 'websitePreloader' => 'images/website-loader.gif', 'contentPreloader' => 'images/website-loader.gif', 'loadEncodedData' => 'false', 'cacheEnabled' => 'true', 'redirectToMobile' => 'false' ), ); if (defined('TEMPLATE_TYPE') && TEMPLATE_TYPE == 'facebook') { $defaults["xml_settings.xml"]['datas']['showCustomBlockForNonFans'] = 'false'; $defaults["xml_settings.xml"]['datas']['nonFansCustomBlockType'] = 'html'; $defaults["xml_settings.xml"]['datas']['nonFansCustomBlockCode'] = ''; $defaults["xml_settings.xml"]['datas']['facebookAppId'] = ''; $defaults["xml_settings.xml"]['datas']['facebookAppSecret'] = ''; } $defaults["xml-assets.xml"] = array( "filename" => "xml/assets.xml", "rootNode" => "assets", "nodeName" => "", "attrName" => "", "datas" => array( ), ); $fileList = array( "config.xml", "admin/config.xml", "admin/xml/config.xml", "admin/xml/assets.xml", "admin/xml/languages.xml", "admin/xml/mediaLibrary.xml", "admin/xml/modules.xml", "admin/xml/system.xml", "xml/content.xml", "xml/settings.xml", "xml/structure.xml", "xml/fonts.xml", "xml/assets.xml", ); if (defined('WORK_MODE') && WORK_MODE == 'PACK') $fileList = array( "admin/xml/system.xml", "config.xml", "xml/content.xml", "xml/settings.xml", "xml/structure.xml", "xml/fonts.xml", "xml/assets.xml", ); $classList = array( "ModulesService" => array('getDataProviders'), 'MotoXML' => array('create'), 'ContentService' => array('getProductInfo'), 'MotoSystem' => array('getAccess'), ); class Update extends UpdateCore { protected $SESSION_PATH = '__Moto_Tool_Session_Area_'; public $view = null; protected $bs = null; protected $_cfg = null; protected $_inp = array(); protected $_get = array(); protected $_post = array(); protected $updateMap = array( 10000 => 11000, 11000 => 11001, 11001 => 11002, 11002 => 11003, 11003 => 12000, 12000 => 13000, ); protected $config = array(); protected $step = null; function __construct($cfg) { Messages::__init(MOTO_TOOL_NAME); if (!defined('WORK_MODE')) { $this->loadConfigAdmin(); if (isset($this->config['LANGUAGE']) && $this->config['LANGUAGE'] != '') Messages::setLang($this->config['LANGUAGE']); } $this->_cfg = $cfg; if (isset($_GET)) foreach($_GET as $key => $value) $this->_get[$key] = $this->_inp[$key] = $value; if (isset($_POST)) foreach($_POST as $key => $value) $this->_post[$key] = $this->_inp[$key] = $value; $this->base_dir = dirname(__FILE__); $this->view = new UpdateView(); $this->_util = new UpdateUtil($this); } function loadConfigAdmin() { if (!defined('CONTROL_PANEL_CONFIGURATION')) { return false; } $dom = $this->openDOM('admin/' . CONTROL_PANEL_CONFIGURATION); $texts = MotoXML::findByXPath(".//item", $dom); if (!is_null($texts)) { for($itext = 0; $itext < $texts->length; $itext++) if ($texts->item($itext)->getAttribute("name") != "") { $this->config[trim(strtoupper($texts->item($itext)->getAttribute("name")))] = $texts->item($itext)->nodeValue; } } return true; } function getSesKey($key, $def = null) { if (!isset($_SESSION[$this->SESSION_PATH])) $_SESSION[$this->SESSION_PATH] = array(); if (isset($_SESSION[$this->SESSION_PATH][$key])) return $_SESSION[$this->SESSION_PATH][$key]; return $def; } function setSesKey($key, $value = '') { if (!isset($_SESSION[$this->SESSION_PATH])) $_SESSION[$this->SESSION_PATH] = array(); $_SESSION[$this->SESSION_PATH][$key] = $value; } function delSesKey($key) { if (isset($_SESSION[$this->SESSION_PATH]) && isset($_SESSION[$this->SESSION_PATH][$key]) ) unset($_SESSION[$this->SESSION_PATH][$key]); } function removeSessionArea() { if (isset($_SESSION[$this->SESSION_PATH])) unset($_SESSION[$this->SESSION_PATH]); } function _get($key, $nulled = null) { if (!isset($this->_inp[$key])) return $nulled; else return $this->_inp[$key]; } function _set($key, $value = '') { $this->_inp[$key] = $value; } function setData($key, $value = "") { $this->data[$key] = $value; } function getData($key, $default = '') { return (isset($this->data[$key]) ? $this->data[$key] : ""); } function run() { $this->detectVersion(); $this->steps = array(); $method = strtolower($this->_get('action')) . ucfirst(strtolower($this->_get('sub', '')) ); if ($method != '' && method_exists($this, $method)) { $this->$method(); } else { $this->initUpdate(); } $this->view->UpdateMessages = $this->_log; $this->view->sub = 'update'; $this->view->action = $this->_get('action', ''); $this->view->step = $this->_get('step', ''); $this->view->output = $this->_get('output', 'html'); $this->view->render(); } function precheckUpdate() { $result = true; if (defined('WORK_MODE') && WORK_MODE == 'PACK') { $filename = MOTO_ADMIN_DIR . '/xml/config.xml'; if (!is_file($filename)) { $xml = '<?xml version="1.0" encoding="utf-8"?><configuration/>'; @file_put_contents($filename, $xml); @chmod($filename, 0775); } $filename = MOTO_ADMIN_DIR . '/xml/modules.xml'; if (!is_file($filename)) { $xml = '<?xml version="1.0" encoding="utf-8"?><modules/>'; @file_put_contents($filename, $xml); @chmod($filename, 0775); } $filename = MOTO_ADMIN_DIR . '/config.xml'; if (!is_file($filename)) { $xml = '<?xml version="1.0" encoding="utf-8"?><configuration/>'; @file_put_contents($filename, $xml); @chmod($filename, 0775); } } if (!isset($this->data["defaultKeys"])) { $this->_log('precheck', Messages::get('E_PRECHECK_DEFAULT_KEYS')); $result = false; } if (!is_file(MOTO_ROOT_DIR . '/xml/assets.xml')) { $xml = '<?xml version="1.0" encoding="utf-8"?><assets/>'; @file_put_contents(MOTO_ROOT_DIR . '/xml/assets.xml', $xml); @chmod(MOTO_ROOT_DIR . '/xml/assets.xml', 0775); } if (!isset($this->data["fileExists"])) { $this->_log('precheck', Messages::get('E_PRECHECK_FILE_EXISTS')); $result = false; } else { $result = $this->checkExistsFiles($this->data["fileExists"]); } if (!isset($this->data["classExists"])) { $this->_log('precheck', Messages::get('E_PRECHECK_CLASS_EXISTS')); $result = false; } else { $result = $this->checkExistsClass($this->data["classExists"]); } $safe_mode = ini_get('safe_mode'); if ($safe_mode == true || strtolower($safe_mode) == 'on') { $this->_log('precheck', Messages::get('E_PRECHECK_SAFE_MODE')); } $result = $this->ok = $this->ok && $result; return $result; } function isNeedUpdate() { $result = true; if ($this->digitVersion(VERSION) <= $this->clientVersion && $this->digitVersion(VERSION) <= $this->adminVersion) { $result = false; } return $result; } function runstepUpdate($param = array()) { $this->step = $this->_post['step']; switch($this->_post['step']) { case 'update': if (defined('WORK_MODE') && WORK_MODE == 'PACK') { $defaults = $this->getData('defaultKeys'); $config = (isset($defaults['admin_config.xml']) ? $defaults['admin_config.xml'] : null); if ($config != null && isset($config['datas'])) { $config = $config['datas']; if (!defined('MOBILE_WEBSITE_FOLDER')) { define('MOBILE_WEBSITE_FOLDER', (isset($config['MOBILE_WEBSITE_FOLDER']) ? $config['MOBILE_WEBSITE_FOLDER'] : 'm')); } if (!defined('MOBILE_TEMPLATES_FOLDER')) { define('MOBILE_TEMPLATES_FOLDER', (isset($config['MOBILE_TEMPLATES_FOLDER']) ? $config['MOBILE_TEMPLATES_FOLDER'] : 'm')); } } if (is_dir(dirname(__FILE__) . '/2copy/')) { MotoUtil::recurse_copy(dirname(__FILE__) . '/2copy/', MOTO_ROOT_DIR, true); } } $this->makeUpdate(); break; case 'finish': $this->clearTempFolder(); $this->finishUpdate(); break; } $this->view->_log = $this->_log; } function clearTempFolder() { $dir = MOTO_ROOT_DIR . '/admin/_tmp/cache'; if (is_dir($dir)) UpdateUtil::recurse_delete($dir); } function initUpdate($param = array()) { $this->_log('_header', Messages::get('I_STEP_INIT'), 'note'); $isNeedUpdate = true; $ok = $this->precheckUpdate(); if ($ok) { $this->detectVersion(); $this->_log('_header', Messages::get('N_STEP_INIT_INFO' , array( 'clientVersion' => $this->stringVersion($this->clientVersion), 'adminVersion' => $this->stringVersion($this->adminVersion) ) ) , 'note' ); $isNeedUpdate = $this->isNeedUpdate(); if (defined('WORK_MODE') && WORK_MODE == 'PACK') $isNeedUpdate = true; if (!$isNeedUpdate) $this->_log('_footer', Messages::get('N_UPDATE_NO_NEED', array('MOTO_ROOT_URL'=>MOTO_ROOT_URL)), 'ok'); } else $this->_log('_header', Messages::get('E_UPDATE_PRECHECK_FAIL'), 'note'); if ($ok && $isNeedUpdate) { $this->_log('_header', '' . '<span id="startUpdate" ><a href="#" onclick="startUpdate();return false;">' . Messages::get('N_STEP_INIT_OK', array('VERSION'=>$this->stringVersion($this->digitVersion(VERSION), false)) ) . '</a></span><br/>', 'note'); $fileHook = dirname(dirname(__FILE__)) . '/backup/index.php'; if (file_exists($fileHook)) { $this->view->backupAllow = true; $step = array('name' => 'backup', 'title' => Messages::get('I_STEP_BACKUP', array('version'=>VERSION))); $this->steps[] = $step; } else { $this->view->backupAllow = false; } $this->view->backupAllow = false; $step = array('name' => 'update', 'title' => Messages::get('I_STEP_UPDATE', array('version'=>VERSION))); $this->steps[] = $step; $step = array('name' => 'finish', 'title' => Messages::get('I_STEP_FINISH')); $this->steps[] = $step; } $this->view->steps = $this->steps; return ; } function _log($function, $message, $type = 'error', $add = true) { $key = $function . '_' . $type; if ($function == '_header' || $function == '_footer') { $place = $function; } else $place = 'log'; if (isset($this->_log[$place][$key])) { $log = $this->_log[$place][$key]; if ($add) $log['message'] .= $message; else $log['message'] = $message; } else $log = array('type' => $type, 'message' => $message); $this->_log[$place][$key] = $log; } function makeUpdate($param = array()) { $this->log2('Init Update'); $result = array('ok' => 0, 'message' => ''); $ans = array(); try { $this->log2('Run proccessDefaultKeys'); $result['proccessDefaultKeys'] = $this->proccessDefaultKeys($this->data["defaultKeys"]); $this->log2('proccessDefaultKeys is ' . ($this->ok ? 'ok' : 'bad')); if ($this->ok) { $this->log2('Run startUpdate'); $this->startUpdate(); $this->log2('startUpdate is ' . ($this->ok ? 'ok' : 'bad')); } else { } if ($this->ok) $this->facebookPatch(); $ok = false; if ($this->ok) { $this->saveVersion(); $ok = $this->saveXMLs(); } if ($this->ok && $ok ) { $this->_log('updateCMS_12000', Messages::get('O_UPDATE_COMPLETE_OK'), 'ok'); } else { $this->_log('updateCMS_12000', Messages::get('E_UPDATE_COMPLETE_BAD'), 'error'); $this->ok = false; } $result['nextStep'] = 'finish'; $result['ok'] = $this->ok; } catch (Exception $e) { $result['message'] = $e->getMessage(); $result['ok'] = 0; } $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } function finishUpdate($param = array()) { $result = array('ok' => 0, 'message' => ''); $ans = array(); try { $this->detectVersion(); $result['clientVersion'] = $this->stringVersion($this->clientVersion); $result['adminVersion'] = $this->stringVersion($this->adminVersion); $result['ok'] = !$this->isNeedUpdate(); if (!$result['ok']) { $result['message'] = ''; if (defined('WORK_MODE') && WORK_MODE == 'PACK') $result['message'] = '<b>This is PACK MODE. Ignore error by Current control panel version.</b>'; } } catch (Exception $e) { $result['message'] = $e->getMessage(); $result['ok'] = 0; } $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } function selfRemoveXML($nodes) { if (is_array($nodes)) { foreach($nodes as $node) if (!is_null($node)) $node->parentNode->removeChild($node); } elseif(is_null($nodes)) $nodes->parentNode->removeChild($nodes); } } $U = new Update($cfg); $U->setData("defaultKeys", $defaults); $U->setData("fileExists", $fileList); $U->setData("classExists", $classList); $U->run(); ?>