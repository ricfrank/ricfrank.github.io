<?php
error_reporting(E_ALL); ini_set('display_errors', 'off'); ini_set('log_errors', 'on'); ini_set('error_log', './php_error.log'); $fileConfig = dirname(__FILE__) . '/../../config/ProjectConfig.php'; if (!file_exists($fileConfig) || !is_file($fileConfig)) { echo "<pre>ProjectConfig was not found.</pre>";exit; } require_once $fileConfig; set_include_path( '.' . PATH_SEPARATOR . dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX : '') . '/' . PATH_SEPARATOR . get_include_path() ); $cfg = array(); require_once dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX . '/' : '') . 'BackupCore.php'; require_once dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX . '/' : '') . 'BackupUtil.php'; require_once dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX . '/' : '') . 'BackupView.php'; require_once dirname(__FILE__) . '/libs/' . (defined('MOTO_MULTI_LIBS_PREFIX') ? MOTO_MULTI_LIBS_PREFIX . '/' : '') . 'Messages.php'; ProjectConfig::registerAutoload(); ProjectConfig::loadConstants(); ProjectConfig::startSession(); define('MOTO_TOOL_DIR', dirname(__FILE__) . '/'); define('MOTO_TOOL_NAME', 'backup'); class Backup extends BackupCore { protected $SESSION_PATH = '__Moto_Tool_Session_Area_'; protected $BACKUP_DIR = 'admin/actions/backup/_backups'; protected $BACKUP_ZIP_BASENAME = 'backup_'; protected $BACKUP_ZIP_PATTERN = 'y-m-d-h-i-s'; protected $config = array(); public $view = null; protected $bs = null; protected $_cfg = null; protected $_inp = array(); protected $_get = array(); protected $_post = array(); protected $step = null; public $util = null; protected $_silenceMode = false; function __construct($cfg) { $this->SESSION_PATH .= MOTO_TOOL_NAME . '__'; Messages::__init(MOTO_TOOL_NAME); $this->loadConfigAdmin(); if (isset($this->config['LANGUAGE']) && $this->config['LANGUAGE'] != '') Messages::setLang($this->config['LANGUAGE']); $this->_cfg = $cfg; if (isset($_GET)) foreach($_GET as $key => $value) $this->_get[$key] = $this->_inp[$key] = $value; if (isset($_POST)) foreach($_POST as $key => $value) $this->_post[$key] = $this->_inp[$key] = $value; $this->base_dir = dirname(__FILE__); $this->view = new BackupView(); $this->util = new BackupUtil($this); $this->view->backupTypeAllow = array('update', 'medium', 'xml', 'full'); $this->view->backupTypeAllow = array('update'); if (defined('MOTO_UTIL_SILENCE_MODE')) $this->_silenceMode = MOTO_UTIL_SILENCE_MODE; if (!defined('MOBILE_WEBSITE_FOLDER')) define('MOBILE_WEBSITE_FOLDER', 'm'); } function loadConfigAdmin() { if (!defined('CONTROL_PANEL_CONFIGURATION')) { return false; } $dom = $this->openDOM('admin/' . CONTROL_PANEL_CONFIGURATION); $texts = MotoXML::findByXPath(".//item", $dom); if (!is_null($texts)) { for($itext = 0; $itext < $texts->length; $itext++) if ($texts->item($itext)->getAttribute("name") != "") { $this->config[trim(strtoupper($texts->item($itext)->getAttribute("name")))] = $texts->item($itext)->nodeValue; } } return true; } function _get($key, $nulled = null) { if (!isset($this->_inp[$key])) return $nulled; else return $this->_inp[$key]; } function _set($key, $value = '') { $this->_inp[$key] = $value; } function setData($key, $value = "") { $this->data[$key] = $value; } function getData($key) { return (isset($this->data[$key]) ? $this->data[$key] : ""); } function run() { $result = $this->precheck(); if (!$result) $this->_log('_footer', Messages::get('E_PRECHECK_FAIL', 'note')); $result = $this->util->checkAuth(); if (!$this->_silenceMode) { if (!$result || $result['status'] == false) { $this->_log('core', Messages::get('AUTHORIZATION_FAILED', array('MOTO_ROOT_URL' => MOTO_ROOT_URL, 'MOTO_ADMIN_URL' => MOTO_ADMIN_URL, ))); $this->ok = false; } } if ($this->ok && $result) { $method = strtolower($this->_get('action')) . ucfirst(strtolower($this->_get('sub', '')) ); if ($method != '' && method_exists($this, $method)) { $this->$method(); } else { } } $this->view->Messages = $this->_log; $this->view->sub = MOTO_TOOL_NAME; $this->view->action = $this->_get('action', ''); $this->view->step = $this->_get('step', ''); $this->view->output = $this->_get('output', 'html'); $this->view->ok = $this->ok; $this->view->render(); } function getSesKey($key, $def = null) { if (!isset($_SESSION[$this->SESSION_PATH])) $_SESSION[$this->SESSION_PATH] = array(); if (isset($_SESSION[$this->SESSION_PATH][$key])) return $_SESSION[$this->SESSION_PATH][$key]; return $def; } function setSesKey($key, $value = '') { if (!isset($_SESSION[$this->SESSION_PATH])) $_SESSION[$this->SESSION_PATH] = array(); $_SESSION[$this->SESSION_PATH][$key] = $value; } function delSesKey($key) { if (isset($_SESSION[$this->SESSION_PATH]) && isset($_SESSION[$this->SESSION_PATH][$key]) ) unset($_SESSION[$this->SESSION_PATH][$key]); } function removeSessionArea() { if (isset($_SESSION[$this->SESSION_PATH])) unset($_SESSION[$this->SESSION_PATH]); } function precheck() { $result = true; $this->isZip = true; if (!class_exists('ZipArchive', false)) { $this->isZip = false; $this->_log(__FUNCTION__, Messages::get('N_PRECHECK_NO_ZIP'), 'note'); } if (!file_exists(MOTO_ROOT_DIR . '/' . $this->BACKUP_DIR) || !is_dir(MOTO_ROOT_DIR . '/' . $this->BACKUP_DIR)) { $this->_log('precheck', Messages::get('E_BACKUP_STORAGE_NOT_EXISTS', array('storagePath' => $this->BACKUP_DIR))); $this->ok = $result = false; } elseif (!is_writable(MOTO_ROOT_DIR . '/' . $this->BACKUP_DIR)) { $this->_log('precheck', Messages::get('E_BACKUP_STORAGE_NOT_WRITEBLE', array('storagePath' => $this->BACKUP_DIR))); $this->ok = $result = false; return false; } $safe_mode = ini_get('safe_mode'); if ($safe_mode == true || strtolower($safe_mode) == 'on') { $this->_log('precheck', Messages::get('E_PRECHECK_SAFE_MODE')); } $result = $this->ok = $this->ok && $result; return $result; } function _log($function, $message, $type = 'error', $add = true) { $key = $function . '_' . $type; if ($function == '_header' || $function == '_footer') { $place = $function; } else $place = 'log'; if (isset($this->_log[$place][$key])) { $log = $this->_log[$place][$key]; if ($add) $log['message'] .= $message; else $log['message'] = $message; } else $log = array('type' => $type, 'message' => $message); $this->_log[$place][$key] = $log; } function initBackup($param = array()) { return ; } function initstartBackup($data = array()) { $this->setSesKey('initTime', time()); $param = $this->initBackupParam(array('mode' => (isset($this->_post['mode']) ? $this->_post['mode'] : 'update'))); $result = array('ok' => 1, 'message' => '', 'action' => 'run', 'step' => '1'); $result['autorun'] = true; $result['setStep'] = array(); $result['setStep'][] = array( 'title' => Messages::get('STEP_TITLE_COPYFILE'), 'step' => 'copyfile', 'class' => '', 'enable' => true, 'param' => array(), 'nextstep' => '' ); if ($this->isZip) { $result['setStep'][] = array( 'title' => Messages::get('STEP_TITLE_MAKE_ZIP'), 'step' => 'makezip', 'class' => '', 'enable' => true, 'param' => array(), 'nextstep' => '' ); } $result['setStep'][] = array( 'title' => Messages::get('STEP_TITLE_FINISH'), 'step' => 'finish', 'class' => '', 'enable' => true, 'param' => array(), 'nextstep' => '' ); $ans = array(); $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } function copyfileBackup($data = array()) { $result = array('ok' => 0, 'message' => '', 'action' => 'run', 'step' => '2'); $ans = array(); try { $param = $this->getSesKey('param'); $obj = new stdClass(); foreach($param as $key => $value) { $obj->$key = $value; } $obj->path_exclude = array($this->BACKUP_DIR, 'admin/_tmp/', '.svn') ; $lst = $this->getFileNamesByMode($obj); $res = $this->copyFilesToFolder($lst, MOTO_ROOT_DIR . '/' . $param['folder']); if ($res->status->status == StatusEnum::SUCCESS) { $result['ok'] = 1; $result['message'] = Messages::get('STEP_TITLE_COPYFILE_OK', array( 'files' => $res->result->fileCopied, 'dirs' => $res->result->processedDir, ) ); } else { $result['ok'] = 0; $result['message'] = Messages::get('STEP_TITLE_COPYFILE_ERROR', array('error' => '')); } } catch (Exception $e) { $result['message'] = Messages::get('STEP_TITLE_COPYFILE_ERROR', array('error' => $e->getMessage())); $result['ok'] = 0; } $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } function makezipBackup($data = array()) { $result = array('ok' => 0, 'message' => '', 'action' => 'run', 'step' => '3'); $ans = array(); try { $param = $this->getSesKey('param'); $obj = new stdClass(); foreach($param as $key => $value) $obj->$key = $value; $res = $this->createArchiveFromDir(MOTO_ROOT_DIR . '/' . $param['folder'] , MOTO_ROOT_DIR . '/' . $param['pathZip']); if ($res->result->result && $res->status->status == StatusEnum::SUCCESS) { $result['ok'] = 1; $result['message'] = Messages::get('STEP_TITLE_MAKE_ZIP_OK', array( 'size' => $res->result->size, ) ); $this->removeFolder(MOTO_ROOT_DIR . '/' . $param['folder'], true); } else { $result['ok'] = 0; $result['message'] = Messages::get('STEP_TITLE_MAKE_ZIP_ERROR', array('error' => '')); } } catch (Exception $e) { $result['ok'] = 0; } $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } function finishBackup($data = array()) { $result = array('ok' => 0, 'message' => '', 'action' => 'run', 'step' => '20'); $ans = array(); try { $param = $this->getSesKey('param'); $obj = new stdClass(); if (is_array($param)) foreach($param as $key => $value) $obj->$key = $value; if (file_exists(MOTO_ROOT_DIR . '/' . $param['pathZip']) && is_file(MOTO_ROOT_DIR . '/' . $param['pathZip']) ) { $result['ok'] = 1; $result['add2Work']['value'] = Messages::get('STEP_TITLE_FINISH_ZIP', array( 'url' => rtrim(MOTO_ROOT_URL, '/') . '/' . ltrim($param['pathZip'], '/'), 'zipname' => basename($param['pathZip']), 'zipsize' => filesize(MOTO_ROOT_DIR . '/' . $param['pathZip']), ) ); } else { $result['ok'] = 1; $result['add2Work']['value'] = Messages::get('STEP_TITLE_FINISH_DIR', array( 'path' => MOTO_ROOT_DIR . '/' . $param['folder'], ) ); } $this->removeSessionArea(); if ($this->_silenceMode) { $result['add2Work'] = ''; $result['message'] = Messages::get('STEP_TITLE_FINISH'); } } catch (Exception $e) { $result['ok'] = 0; } $this->view->resultAction = $result; $this->view->resultActionFull = $ans; } } if (!is_dir(dirname(__FILE__) . '/_backups')) { mkdir(dirname(__FILE__) . '/_backups', 0775); chmod(dirname(__FILE__) . '/_backups', 0775); } $B = new Backup($cfg); $B->run(); 