<?php
 class SimpleGalleryModuleService { protected $_template = 'template.xml'; protected $_newXmlPrefix = 'gallery_'; protected $_languageXml = 'language.xml'; protected $_xmlLocation = 'xml/modules/'; public function __construct() { $this->_xmlLocation = MotoConfig::get('websiteContentFolder', '') . '/' . $this->_xmlLocation; $this->_xmlLocation = ltrim($this->_xmlLocation, '/'); } private function getXMLPath($module) { $dom = new DOMDocument(); $dom->loadXML($module); $node = $dom->getElementsByTagName("galleryData"); if ($node) { $file = $node->item(0)->nodeValue; if (strlen($file) > 0) return MOTO_ROOT_DIR . '/' . $file; } return ""; } public function getLanguages() { $responseVO = new ResponseVO(); try { $query = './language'; $config = MOTO_ADMIN_DIR . '/' . CONTROL_PANEL_CONFIGURATION; if (file_exists($config)) { $config_xml = new MotoXML($config); $lang = MotoXML::findOneByXPath('.//item[@name="language"]', $config_xml); if (!is_null($lang)) { $query = './language[@id="eng" or @id="' . $lang->nodeValue . '"]'; } } $dom = new MotoXML($this->_languageXml); $lanugages = array(); $lanugagesXML = MotoXML::findByXPath($query, $dom); foreach ($lanugagesXML as $languageXML) { array_push($lanugages, new LanguageVO($languageXML)); } $responseVO->result = $lanugages; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getSimpleGalleryModuleStructure($module) { $responseVO = new ResponseVO(); $xmlPath = self::getXMLPath($module); try { $responseVO->result = SimpleGalleryModuleItemTypeVO::findAll(new MotoXML($xmlPath)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getSimpleGalleryModuleData($module) { $responseVO = new ResponseVO(); $xmlPath = self::getXMLPath($module); try { $responseVO->result = SimpleGalleryModuleItemVO::findAll(new MotoXML($xmlPath)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveSimpleGalleryModuleData($module, array $items) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = self::getXMLPath($module); try { $dom = new MotoXML($xmlPath); $data = new DOMElement('data'); $dom->documentElement->replaceChild($data, MotoXML::findOneByXPath('./data', $dom)); foreach ($items as $item) { $item->saveDomElement($data->appendChild(new DOMElement('item'))); } MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getSimpleGalleryModuleConfigurationData($module) { $responseVO = new ResponseVO(); $xmlPath = self::getXMLPath($module); try { $responseVO->result = ModuleConfigurationVO::findAll(new MotoXML($xmlPath)); $option = new ModuleOptionVO(); $option->id = 'gdEnabled'; $option->value = MotoImgUtil::checkGD(); $responseVO->result->options[] = $option; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveSimpleGalleryModuleConfigurationData($module, ModuleConfigurationVO $configurationVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = self::getXMLPath($module); try { $dom = new MotoXML($xmlPath); $configuration = new DOMElement('configuration'); $dom->documentElement->replaceChild($configuration, MotoXML::findOneByXPath('//configuration', $dom)); $configurationVO->saveDomElement($configuration); MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function checkRequiredFiles($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $dom = new MotoXML(); $dom->loadXML($module); $templateNode = MotoXML::findOneByXPath('./template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_template = $templateNode->nodeValue; } $file = $this->getXMLPath($module); if (strlen($file) == 0) { MotoUtil::createDir( MOTO_ROOT_DIR . '/' . $this->_xmlLocation ); $dest = MOTO_ROOT_DIR.'/' . $this->_xmlLocation . $this->_newXmlPrefix.uniqid().'.xml'; if (file_exists($this->_template) && copy($this->_template, $dest)) { $responseVO->result = str_replace(MOTO_ROOT_DIR.'/', '', $dest); $responseVO->status->status = StatusEnum::SUCCESS; } } else { if (!is_file($file)) { if (file_exists($this->_template) && copy($this->_template, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR.'/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } else $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function createModuleData($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $dom = new MotoXML(); $dom->loadXML($module); $templateNode = MotoXML::findOneByXPath('./template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_template = $templateNode->nodeValue; } MotoUtil::createDir( MOTO_ROOT_DIR . '/' . $this->_xmlLocation ); $file = MOTO_ROOT_DIR . '/' . $this->_xmlLocation . $this->_newXmlPrefix . uniqid() . '.xml'; if (file_exists($this->_template) && copy($this->_template, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function duplicateModuleData(ModuleDataProviderVO $dpVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { if ($dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if ($source == '' || !file_exists(MOTO_ROOT_DIR . '/' . $source->value)) throw new Exception('File ' . $source->value . ' not found'); } foreach($dpVO->sources as &$source) { $newFile = $this->_xmlLocation . $this->_newXmlPrefix . uniqid() . '.xml'; if (!copy(MOTO_ROOT_DIR . '/' . $source->value, MOTO_ROOT_DIR . '/' . $newFile)) { throw new Exception('File ' . $source->value . ' can not be duplicated'); break; } $source->value = $newFile; } $responseVO->result = $dpVO; } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function removeModuleData(ModuleDataProviderVO $dpVO) { if (DEMO_MODE === 'true') { return false; } if (isset($dpVO->sources) && $dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if(is_file(MOTO_ROOT_DIR . '/' . $source->value)) @unlink(MOTO_ROOT_DIR . '/' . $source->value); } } } public function generateThumbnail($itemVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $pathPrefix = ""; $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $params = array(); $filenameIn = ''; if (isset($itemVO->properties)) foreach($itemVO->properties as $id => $prop) { if (isset($prop->parameters['_createThumbnail']) && ($prop->parameters['_createThumbnail'] == 'true' || $prop->parameters['_createThumbnail'] === true) && (isset($prop->parameters['_thumbnailWidth'])) && (isset($prop->parameters['_thumbnailHeight'])) && (isset($prop->parameters['_commonDirectory'])) ) { $params[$id] = array( 'width' => $prop->parameters['_thumbnailWidth'], 'height' => $prop->parameters['_thumbnailHeight'], 'commonDirectory' => $prop->parameters['_commonDirectory'], 'scalingMode' => MotoUtil::safeGet($prop->parameters, '_scalingMode', 'fit') ); if ($filenameIn == '' && isset($prop->parameters['_mediaSource']) && $prop->parameters['_mediaSource'] != '') $filenameIn = $prop->parameters['_mediaSource']; } } $options = array( 'filenameOut' => '%dirname%/%commonDirectory%/%filename%_%width%_%height%.%extension%', 'reMake' => true, 'quality' => 100, ); if ($pathPrefix !== '' && strpos($filenameIn, $pathPrefix) === 0 ) $filenameIn = substr($filenameIn, strlen($pathPrefix)); $result = MotoImgUtil::makeThumbnails($filenameIn, $params, $options); $mediaLibrary = new MediaLibraryService(); $mediaLibraryVO = $mediaLibrary->getMediaLibrary(); $mediaLibraryVO = $mediaLibraryVO->result; $dom = MotoXML::create(MOTO_MEDIA_LIBRARY); $folderMaxId = MotoFolderVO::findMaxId($dom) + 1; if ($folderMaxId < 2) $folderMaxId = 2; if (is_array($result)) { foreach($result as $key => $value) { $folderVO = null; $itemVO->properties[$key]->value = $pathPrefix . $value; if ($value) { if (trim($itemVO->properties[$key]->parameters['_commonDirectory']) != '') { $folderVO = MotoFolderVO::findByName($itemVO->properties[$key]->parameters['_commonDirectory'], $dom); if (is_null($folderVO)) { $folderVO = new MotoFolderVO(); $folderVO->name = $itemVO->properties[$key]->parameters['_commonDirectory']; $folderVO->id = $folderMaxId++; $folderVO->parent = 1; $mediaLibraryVO->folders[] = $folderVO; } } $mliVO = MediaLibraryItemVO::findBySource($value, $dom); if (!$mliVO) { $mliVO = new MediaLibraryItemVO(); $mliVO->name = basename($value); $mliVO->type = 'image'; $mliVO->source = $value; if ($folderVO && isset($folderVO->id) && $folderVO->id > 0) $mliVO->parent = $folderVO->id; $mediaLibraryVO->items[] = $mliVO; } } else { } } $mediaLibrary->saveMediaLibrary($mediaLibraryVO); } else { } $responseVO->result = $itemVO; if ($result) { $responseVO->status->status = StatusEnum::SUCCESS; } else { $error = MotoImgUtil::getError(); $responseVO->status->message = $error['code']; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } function getModule($module) { try { $moduleVO = new stdClass(); $xmlPath = self::getXMLPath($module); if ($xmlPath == '') { return null; } $dom = MotoXML::create($xmlPath); $moduleVO->configuration = ModuleConfigurationVO::findAll( $dom ); $moduleVO->structure = SimpleGalleryModuleItemTypeVO::findAll( $dom ); $moduleVO->items = SimpleGalleryModuleItemVO::findAll( $dom ); usort($moduleVO->items, array($this, 'compare')); } catch (Exception $e) { $moduleVO = null; } return $moduleVO; } protected function compare($a, $b) { if ($a->order == $b->order) return 0; return ($a->order < $b->order) ? -1 : 1; } }