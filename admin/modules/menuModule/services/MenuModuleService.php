<?php
 class MenuModuleService { public static $dom = null; protected $_template = 'template.xml'; protected $_newXmlPrefix = 'menu_'; protected $_languageXml = 'language.xml'; protected $_xmlLocation = 'xml/modules/'; public function __construct() { $this->_xmlLocation = MotoConfig::get('websiteContentFolder', '') . '/' . $this->_xmlLocation; $this->_xmlLocation = ltrim($this->_xmlLocation, '/'); } public function getLanguages() { $responseVO = new ResponseVO(); try { $query = './language'; $config = MOTO_ADMIN_DIR . '/' . CONTROL_PANEL_CONFIGURATION; if (file_exists($config)) { $config_xml = new MotoXML($config); $lang = MotoXML::findOneByXPath('.//item[@name="language"]', $config_xml); if (!is_null($lang)) { $query = './language[@id="eng" or @id="' . $lang->nodeValue . '"]'; } } $dom = new MotoXML($this->_languageXml); $lanugages = array(); $lanugagesXML = MotoXML::findByXPath($query, $dom); foreach ($lanugagesXML as $languageXML) { array_push($lanugages, new LanguageVO($languageXML)); } $responseVO->result = $lanugages; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } private function getXMLPath($module, $fullPath = true) { $dom = new DOMDocument(); $dom->loadXML($module); $node = $dom->getElementsByTagName("dataProvider"); if ($node) { $file = $node->item(0)->nodeValue; if (strlen($file) > 0) return ($fullPath ? MOTO_ROOT_DIR . '/' : '') . $file; } return ""; } public function getMenuModuleStructure($module) { $responseVO = new ResponseVO(); $xmlPath = $this->getXMLPath($module); try { $responseVO->result = MenuModuleItemTypeVO::findAll(new MotoXML($xmlPath)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getMenuModuleData($module) { $responseVO = new ResponseVO(); $xmlPath = $this->getXMLPath($module); try { $responseVO->result = MenuModuleItemVO::findAll(new MotoXML($xmlPath)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveMenuModuleData($module, array $items) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = $this->getXMLPath($module); try { $dom = new MotoXML($xmlPath); $data = new DOMElement('data'); $dom->documentElement->replaceChild($data, MotoXML::findOneByXPath('./data', $dom)); foreach ($items as $item) { $item->saveDomElement($data->appendChild(new DOMElement('item'))); } MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getMenuModuleConfigurationData($module) { $responseVO = new ResponseVO(); $xmlPath = $this->getXMLPath($module); try { $responseVO->result = ModuleConfigurationVO::findAll(new MotoXML($xmlPath)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveMenuModuleConfigurationData($module, ModuleConfigurationVO $configurationVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = $this->getXMLPath($module); try { $dom = new MotoXML($xmlPath); $configuration = new DOMElement('configuration'); $dom->documentElement->replaceChild($configuration, MotoXML::findOneByXPath('//configuration', $dom)); $configurationVO->saveDomElement($configuration); MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function checkRequiredFiles($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $dom = new MotoXML(); $dom->loadXML($module); $templateNode = MotoXML::findOneByXPath('./template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_template = $templateNode->nodeValue; } $file = $this->getXMLPath($module); if (strlen($file) == 0) { MotoUtil::createDir( MOTO_ROOT_DIR . '/' .$this->_xmlLocation ); $path = $this->_xmlLocation . $this->_newXmlPrefix . uniqid() . '.xml'; $dest = MOTO_ROOT_DIR . '/' . $path; if (file_exists($this->_template) && copy($this->_template, $dest)) { $responseVO->result = $path; $responseVO->status->status = StatusEnum::SUCCESS; } } else { if (!is_file($file)) { if (file_exists($this->_template) && copy($this->_template, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } else $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function createModuleData($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $dom = new MotoXML(); $dom->loadXML($module); $templateNode = MotoXML::findOneByXPath('./template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_template = $templateNode->nodeValue; } MotoUtil::createDir( MOTO_ROOT_DIR . '/' . $this->_xmlLocation ); $file = MOTO_ROOT_DIR . '/' . $this->_xmlLocation . $this->_newXmlPrefix . uniqid() . '.xml'; if (file_exists($this->_template) && copy($this->_template, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function duplicateModuleData(ModuleDataProviderVO $dpVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { if ($dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if ($source == '' || !file_exists(MOTO_ROOT_DIR . '/' . $source->value)) throw new Exception('File ' . $source->value . ' not found'); } foreach($dpVO->sources as &$source) { $newFile = $this->_xmlLocation . $this->_newXmlPrefix . uniqid() . '.xml'; if (!copy(MOTO_ROOT_DIR . '/' . $source->value, MOTO_ROOT_DIR . '/' . $newFile)) { throw new Exception('File ' . $source->value . ' can not be duplicated'); break; } $source->value = $newFile; } $responseVO->result = $dpVO; } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function removeModuleData(ModuleDataProviderVO $dpVO) { if (DEMO_MODE === 'true') { return false; } if (isset($dpVO->sources) && $dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if(is_file(MOTO_ROOT_DIR . '/' . $source->value)) @unlink(MOTO_ROOT_DIR . '/' . $source->value); } } } function getModule($module) { try { $moduleVO = new stdClass(); $moduleVO->dataProvider = $this->getXMLPath($module, false); if ($moduleVO->dataProvider == '') { return null; } $dom = new MotoXML(MOTO_ROOT_DIR . '/' . $moduleVO->dataProvider); $moduleVO->configuration = ModuleConfigurationVO::findAll( $dom ); $moduleVO->structure = MenuModuleItemTypeVO::findAll( $dom ); $moduleVO->items = MenuModuleItemVO::findAll( $dom ); $this->_createMapItems($moduleVO); } catch (Exception $e) { $moduleVO = null; } return $moduleVO; } protected function _createMapItems($moduleVO) { if ($moduleVO->items == null || count($moduleVO->items) == 0 ) return false; $mapById = array(); $mapByParent = array(); usort($moduleVO->items, array($this, 'compare')); foreach($moduleVO->items as $item) { $mapById[$item->id] = $item; if (!isset($mapByParent[$item->parent])) $mapByParent[$item->parent] = array(); $mapByParent[$item->parent][] = $item->id; } foreach($moduleVO->items as $item) { if ($item->parent > 0) { $parent = ( isset($mapById[$item->parent]) ? $mapById[$item->parent] : null); if ($parent != null) { $parent->addChild($item); } } } } protected function compare($a, $b) { if ($a->order == $b->order) return 0; return ($a->order < $b->order) ? -1 : 1; } }