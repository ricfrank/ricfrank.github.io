<?php
class ContactFormModuleService { protected $_templateConfig = 'configuration_template.xml'; protected $_templateStruct = 'structure_template.xml'; protected $_newConfigXmlPrefix = 'form_configuration_'; protected $_newStructXmlPrefix = 'form_structure_'; protected $_configuration = 'configuration'; protected $_structure = 'structure'; protected $_languageXml = 'language.xml'; protected $_xmlLocation = 'xml/modules/'; protected $uniqid = null; public static $dom = null; public function __construct() { $this->_xmlLocation = MotoConfig::get('websiteContentFolder', '') . '/' . $this->_xmlLocation; $this->_xmlLocation = ltrim($this->_xmlLocation, '/'); } public function getLanguages() { $responseVO = new ResponseVO(); try { $query = './language'; $config = MOTO_ADMIN_DIR . '/' . CONTROL_PANEL_CONFIGURATION; if (file_exists($config)) { $config_xml = new MotoXML($config); $lang = MotoXML::findOneByXPath('.//item[@name="language"]', $config_xml); if (!is_null($lang)) { $query = './language[@id="eng" or @id="' . $lang->nodeValue . '"]'; } } $dom = new MotoXML($this->_languageXml); $lanugages = array(); $lanugagesXML = MotoXML::findByXPath($query, $dom); foreach ($lanugagesXML as $languageXML) { array_push($lanugages, new LanguageVO($languageXML)); } $responseVO->result = $lanugages; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getFormConfiguration($module) { $responseVO = new ResponseVO(); $xmlPath = $this->getConfigurationXMLPath($module); try { $dom = new MotoXML($xmlPath); $responseVO->result = new FormConfigurationVO(MotoXML::findOneByXPath('/contactFormConfiguration', $dom)); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function getFormStructure($module) { $responseVO = new ResponseVO(); $xmlPath = $this->getStructureXMLPath($module); try { $dom = new MotoXML($xmlPath); $responseVO->result = new FormStructureVO($dom); $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveFormStructure($formStructureVO, $module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = $this->getStructureXMLPath($module); try { $dom = new MotoXML($xmlPath); $formStructureVO->saveDomElement(MotoXML::findOneByXPath('/contactFormStructure', $dom)); MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function saveFormConfiguration($configuration, $module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $xmlPath = $this->getConfigurationXMLPath($module); try { $dom = new MotoXML($xmlPath); $contactFormConfiguration = new DOMElement('contactFormConfiguration'); $dom->replaceChild($contactFormConfiguration, MotoXML::findOneByXPath('//contactFormConfiguration', $dom)); $configuration->saveDomElement($contactFormConfiguration); MotoXML::putXML($dom, $xmlPath); $responseVO->result = null; $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function checkRequiredFiles($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $dom = new MotoXML(); $dom->loadXML($module); $this->checkTemplates($dom); $response1 = $this->checkFile($this->getConfigurationXMLPath($module), $this->_configuration); $response2 = $this->checkFile($this->getStructureXMLPath($module), $this->_structure); if ($response1->status->status == StatusEnum::SUCCESS && $response2->status->status == StatusEnum::SUCCESS) { $responseVO->result = array( "formConfiguration" => $response1->result, "formStructure" => $response2->result); $responseVO->status->status = StatusEnum::SUCCESS; return $responseVO; } return $responseVO; } private function checkFile($file, $type) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { if (is_null($this->uniqid)) $this->uniqid = uniqid(); MotoUtil::createDir( MOTO_ROOT_DIR . '/' . $this->_xmlLocation ); if (strlen($file) == 0) { if ($type == $this->_configuration) { $dest = MOTO_ROOT_DIR.'/'. $this->_xmlLocation . $this->_newConfigXmlPrefix . $this->uniqid . '.xml'; if (file_exists($this->_templateConfig) && copy($this->_templateConfig, $dest)) { $responseVO->result = str_replace(MOTO_ROOT_DIR.'/', '', $dest); $responseVO->status->status = StatusEnum::SUCCESS; } } elseif ($type == $this->_structure) { $dest = MOTO_ROOT_DIR . '/'. $this->_xmlLocation . $this->_newStructXmlPrefix . $this->uniqid . '.xml'; if (file_exists($this->_templateStruct) && copy($this->_templateStruct, $dest)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $dest); $responseVO->status->status = StatusEnum::SUCCESS; } } } else { if (!is_file($file)) { if ($type == $this->_configuration) { if (file_exists($this->_templateConfig) && copy($this->_templateConfig, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } elseif ($type == $this->_structure) { if (file_exists($this->_templateStruct) && copy($this->_templateStruct, $file)) { $responseVO->result = str_replace(MOTO_ROOT_DIR . '/', '', $file); $responseVO->status->status = StatusEnum::SUCCESS; } } } else $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } private function getConfigurationXMLPath($module, $fullPath = true) { $dom = new DOMDocument(); $dom->loadXML($module); $node = $dom->getElementsByTagName("formConfiguration"); if ($node) { $file = $node->item(0)->nodeValue; if (strlen($file) > 0) return ($fullPath ? MOTO_ROOT_DIR . '/' : '') . $file; } return ""; } private function getStructureXMLPath($module, $fullPath = true) { $dom = new DOMDocument(); $dom->loadXML($module); $node = $dom->getElementsByTagName("formStructure"); if ($node) { $file = $node->item(0)->nodeValue; if (strlen($file) > 0) return ($fullPath ? MOTO_ROOT_DIR . '/' : '') . $file; } return ""; } public function createModuleData($module) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; $dom = new MotoXML(); $dom->loadXML($module); $this->checkTemplates($dom); try { $this->uniqid = uniqid(); $configurationResponse = $this->checkFile("", $this->_configuration); $structureResponse = $this->checkFile("", $this->_structure); MotoUtil::createDir( MOTO_ROOT_DIR . '/' . $this->_xmlLocation); if ($configurationResponse->status->status == StatusEnum::SUCCESS && $structureResponse->status->status == StatusEnum::SUCCESS && $configurationResponse->result && $structureResponse->result) { $responseVO->result = array( "formConfiguration" => $configurationResponse->result, "formStructure" => $structureResponse->result); $responseVO->status->status = StatusEnum::SUCCESS; } } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function duplicateModuleData(ModuleDataProviderVO $dpVO) { $responseVO = new ResponseVO(); if (DEMO_MODE === 'true') { $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; return $responseVO; } $responseVO->result = null; $responseVO->status->status = StatusEnum::ERROR_WHILE_WORKING_WITH_FILE; try { $this->uniqid = uniqid(); if ($dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if ($source == '' || !file_exists(MOTO_ROOT_DIR . '/' . $source->value)) throw new Exception('File ' . $source->value . ' not found'); } foreach($dpVO->sources as &$source) { $newFile = ''; switch($source->id) { case 'formConfiguration': $newFile = $this->_xmlLocation . $this->_newConfigXmlPrefix . $this->uniqid . '.xml'; break; case 'formStructure': $newFile = $this->_xmlLocation . $this->_newStructXmlPrefix . $this->uniqid . '.xml'; break; } if ($newFile == '' || !copy(MOTO_ROOT_DIR . '/' . $source->value, MOTO_ROOT_DIR . '/' . $newFile)) { throw new Exception('File ' . $source->value . ' can not be duplicated'); break; } $source->value = $newFile; } $responseVO->result = $dpVO; } $responseVO->status->status = StatusEnum::SUCCESS; } catch (Exception $e) { $responseVO->status->message = $e->getMessage(); } return $responseVO; } public function removeModuleData(ModuleDataProviderVO $dpVO) { if (DEMO_MODE === 'true') { return false; } if (isset($dpVO->sources) && $dpVO->sources != null && count($dpVO->sources) > 0) { foreach($dpVO->sources as $source) { if(is_file(MOTO_ROOT_DIR . '/' . $source->value)) @unlink(MOTO_ROOT_DIR . '/' . $source->value); } } } private function checkTemplates($dom) { $templateNode = MotoXML::findOneByXPath('./configuration_template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_templateConfig = $templateNode->nodeValue; } $templateNode = MotoXML::findOneByXPath('./structure_template', $dom); if ($templateNode && strlen($templateNode->nodeValue) > 0) { $this->_templateStruct = $templateNode->nodeValue; } } function getModule($module) { try { $moduleVO = new stdClass(); $moduleVO->configurationDataProvider = $this->getConfigurationXMLPath($module, false); $dom = new MotoXML(MOTO_ROOT_DIR . '/' . $moduleVO->configurationDataProvider); $moduleVO->configuration = new FormConfigurationVO(MotoXML::findOneByXPath('/contactFormConfiguration', $dom)); $moduleVO->structure = null; $moduleVO->itemsDataProvider = $this->getStructureXMLPath($module, false); $dom = new MotoXML(MOTO_ROOT_DIR . '/' . $moduleVO->itemsDataProvider); $moduleVO->items = new FormStructureVO($dom); } catch (Exception $e) { $moduleVO = null; } return $moduleVO; } }