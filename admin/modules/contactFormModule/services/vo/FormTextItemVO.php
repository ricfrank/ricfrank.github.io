<?php
 class FormTextItemVO extends FormItemVO { public $validator = ""; public $minChars = 0; public $regExp = ""; public $regExpFlags = ""; public $minValue = 0; public $maxValue = 9999; public $allowNegative = false; public $minLettersAfterLastPoint = 2; public $maxLettersAfterLastPoint = 6; public $minLettersBeforeAt = 1; public $maxLettersBeforeAt = 64; public $mask = ""; public $minDateAllowed = 0; public $maxDateAllowed = 0; public $restrict = ""; public $maxChars = 512; public $password = false; public $multiline = false; public function loadDomElement(DOMNode $parent) { parent::loadDomElement($parent); $nodeValue = $parent->getElementsByTagName('validator')->item(0); if (!is_null($nodeValue)) $this->validator = (string) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('regExp')->item(0); if (!is_null($nodeValue)) $this->regExp = (string) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('regExpFlags')->item(0); if (!is_null($nodeValue)) $this->regExpFlags = (string) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('mask')->item(0); if (!is_null($nodeValue)) $this->mask = (string) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('restrict')->item(0); if (!is_null($nodeValue)) $this->restrict = (string) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('minChars')->item(0); if (!is_null($nodeValue)) $this->minChars = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('minLettersAfterLastPoint')->item(0); if (!is_null($nodeValue)) $this->minLettersAfterLastPoint = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('maxLettersAfterLastPoint')->item(0); if (!is_null($nodeValue)) $this->maxLettersAfterLastPoint = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('minLettersBeforeAt')->item(0); if (!is_null($nodeValue)) $this->minLettersBeforeAt = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('maxLettersBeforeAt')->item(0); if (!is_null($nodeValue)) $this->maxLettersBeforeAt = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('minDateAllowed')->item(0); if (!is_null($nodeValue)) $this->minDateAllowed = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('maxDateAllowed')->item(0); if (!is_null($nodeValue)) $this->maxDateAllowed = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('maxChars')->item(0); if (!is_null($nodeValue)) $this->maxChars = (int) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('minValue')->item(0); if (!is_null($nodeValue)) $this->minValue = (float) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('maxValue')->item(0); if (!is_null($nodeValue)) $this->maxValue = (float) $nodeValue->nodeValue; $nodeValue = $parent->getElementsByTagName('allowNegative')->item(0); if (!is_null($nodeValue)) $this->allowNegative = (boolean) MotoUtil::toBoolean($nodeValue->nodeValue); $nodeValue = $parent->getElementsByTagName('password')->item(0); if (!is_null($nodeValue)) $this->password = (boolean) MotoUtil::toBoolean($nodeValue->nodeValue); $nodeValue = $parent->getElementsByTagName('multiline')->item(0); if (!is_null($nodeValue)) $this->multiline = (boolean) MotoUtil::toBoolean($nodeValue->nodeValue); } public function saveDomElement(DOMNode $parent) { parent::saveDomElement($parent); if ($this->validator != "") { $parent->appendChild(new DOMElement('validator', $this->validator)); switch ($this->validator) { case "StringValidator": { if ($this->minChars != 0) { $parent->appendChild(new DOMElement('minChars', $this->minChars)); } if ($this->regExp != "") { $parent->appendChild(new DOMElement('regExp')) ->appendChild($parent->ownerDocument->createCDATASection($this->regExp)); } if ($this->regExpFlags != "") { $parent->appendChild(new DOMElement('regExpFlags', $this->regExpFlags)); } break; } case "EmailValidator": { if ($this->minLettersAfterLastPoint != 2) { $parent->appendChild(new DOMElement('minLettersAfterLastPoint', $this->minLettersAfterLastPoint)); } if ($this->maxLettersAfterLastPoint != 6) { $parent->appendChild(new DOMElement('maxLettersAfterLastPoint', $this->maxLettersAfterLastPoint)); } if ($this->minLettersBeforeAt != 1) { $parent->appendChild(new DOMElement('minLettersBeforeAt', $this->minLettersBeforeAt)); } if ($this->maxLettersBeforeAt != 64) { $parent->appendChild(new DOMElement('maxLettersBeforeAt', $this->maxLettersBeforeAt)); } break; } case "NumberValidator": { if ($this->minValue != 0) { $parent->appendChild(new DOMElement('minValue', $this->minValue)); } if ($this->maxValue != 9999) { $parent->appendChild(new DOMElement('maxValue', $this->maxValue)); } if ($this->allowNegative == true) { $parent->appendChild(new DOMElement('allowNegative', MotoUtil::boolToString($this->allowNegative))); } break; } case "DateValidator": { if ($this->mask != "") { $parent->appendChild(new DOMElement('mask')) ->appendChild($parent->ownerDocument->createCDATASection($this->mask)); } if ($this->minDateAllowed != 0) { $parent->appendChild(new DOMElement('minDateAllowed', $this->minDateAllowed)); } if ($this->maxDateAllowed != 0) { $parent->appendChild(new DOMElement('maxDateAllowed', $this->maxDateAllowed)); } break; } } } if ($this->restrict != "") { $parent->appendChild(new DOMElement('restrict')) ->appendChild($parent->ownerDocument->createCDATASection($this->restrict)); } if ($this->maxChars != 512) { $parent->appendChild(new DOMElement('maxChars', $this->maxChars)); } if ($this->password == true) { $parent->appendChild(new DOMElement('password', MotoUtil::boolToString($this->password))); } if ($this->multiline == true) { $parent->appendChild(new DOMElement('multiline',MotoUtil::boolToString($this->multiline))); } return $parent; } } ?>